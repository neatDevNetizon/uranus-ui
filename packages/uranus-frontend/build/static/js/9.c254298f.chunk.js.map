{"version":3,"sources":["state/info/types.ts","config/constants/info.ts","views/Info/utils/infoDataHelpers.ts","views/Info/utils/infoQueryHelpers.ts","views/Info/hooks/useBlocksFromTimestamps.ts","state/info/queries/protocol/overview.ts","state/info/queries/helpers.ts","views/Info/components/InfoCharts/ChartCard/index.tsx","state/info/queries/protocol/chart.ts","state/info/queries/protocol/transactions.ts","state/info/queries/pools/topPools.ts","state/info/queries/pools/poolData.ts","views/Info/hooks/useCroPrices.ts","state/info/queries/tokens/tokenData.ts","state/info/queries/tokens/topTokens.ts","state/info/queries/pools/chartData.ts","state/info/queries/pools/transactions.ts","state/info/queries/tokens/chartData.ts","state/info/queries/tokens/transactions.ts","state/info/queries/tokens/priceData.ts","state/info/queries/tokens/poolsForToken.ts","state/info/hooks.ts","state/info/updaters.ts","state/info/queries/search/index.ts","views/Info/components/CurrencyLogo/LogoLoader.tsx","views/Info/components/CurrencyLogo/index.tsx","views/Info/utils/formatInfoNumbers.ts","views/Info/components/SaveIcon/index.tsx","views/Info/components/InfoSearch/index.tsx","views/Info/components/InfoNav/index.tsx","views/Info/components/ChartLoaders/LineChartLoaderSVG.tsx","views/Info/components/ChartLoaders/BarChartLoaderSVG.tsx","views/Info/components/ChartLoaders/CandleChartLoaderSVG.tsx","views/Info/components/ChartLoaders/index.tsx","views/Info/components/InfoCharts/LineChart/index.tsx","views/Info/components/Percent/index.tsx","views/Info/components/InfoTables/shared.tsx","views/Info/components/InfoTables/TokensTable.tsx","views/Info/components/InfoTables/PoolsTable.tsx","views/Info/components/InfoCharts/BarChart/index.tsx","views/Info/components/InfoTables/TransactionsTable.tsx","views/Info/Overview/index.tsx","views/Info/components/Watchlist/index.tsx","views/Info/Pools/index.tsx","views/Info/components/InfoCharts/CandleChart/index.tsx","components/TabToggle/index.tsx","views/Info/Pools/PoolPage.tsx","views/Info/components/TopTokenMovers/index.tsx","views/Info/Tokens/index.tsx","views/Info/hooks/useCMCLink.ts","views/Info/Tokens/TokenPage.tsx","views/Info/Tokens/redirects.tsx","views/Info/index.tsx"],"names":["TransactionType","TOTAL_FEE","LP_HOLDERS_FEE","TAN_FINANCE_START","ONE_DAY_UNIX","ITEMS_PER_INFO_TABLE_PAGE","TOKEN_BLACKLIST","getAmountChange","valueNow","valueBefore","getPercentChange","getChangeForPeriod","valueOnePeriodAgo","valueTwoPeriodsAgo","currentPeriodAmount","previousPeriodAmount","getLpFeesAndApr","volumeUSD","volumeUSDWeek","liquidityUSD","lpApr7d","totalFees24h","totalFees7d","lpFees24h","lpFees7d","Infinity","multiQuery","queryConstructor","subqueries","endpoint","a","skipCount","fetchedData","allFound","skip","end","length","subqueriesSlice","slice","request","result","Object","keys","console","error","getDeltaTimestamps","utcCurrentTime","getUnixTime","Date","startOfMinute","subDays","subWeeks","getBlockSubqueries","timestamps","map","timestamp","blocksQueryConstructor","gql","getBlocksFromTimestamps","sortDirection","BLOCKS_CLIENT","sortingFunction","b","number","blocks","key","push","split","parseInt","sort","useBlocksFromTimestamps","useState","setBlocks","setError","useEffect","fetchData","getOverviewData","block","query","INFO_CLIENT","data","formatTanFactoryResponse","rawTanFactory","totalTransactions","parseFloat","totalVolumeUSD","totalLiquidityUSD","useFetchProtocolData","fetchState","setFetchState","t24","t48","blockError","block24","block48","fetch","undefined","error24","data24","error48","data48","anyError","overviewData","TanFactories","overviewData24Formatted","overviewData24","overviewData48Formatted","overviewData48","allDataAvailable","volumeUSDChange","liquidityUSDChange","txCount","txCountChange","protocolData","ChartView","mapMints","mint","type","MINT","hash","id","sender","to","token0Symbol","pair","token0","symbol","token1Symbol","token1","token0Address","token1Address","amountUSD","amountToken0","amount0","amountToken1","amount1","mapBurns","burn","BURN","mapSwaps","swap","SWAP","from","amount0In","amount0Out","amount1In","amount1Out","mapDayData","tokenDayData","date","dailyVolumeUSD","mapPairDayData","pairDayData","reserveUSD","fetchChartData","getEntityDayDatas","address","chartEntries","fetchError","concat","formattedDayDatas","reduce","accum","dayData","dayOrdinal","toFixed","availableDays","firstAvailableDayData","latestLiquidityUSD","endTimestamp","includes","toString","values","TAN_DAY_DATAS","getOverviewChartData","startTime","TanDayDatas","useFetchGlobalChartData","overviewChartData","setOverviewChartData","GLOBAL_TRANSACTIONS","fetchTopTransactions","mints","burns","swaps","fetchTopPools","timestamp24hAgo","blacklist","pairDayDatas","p","useTopPoolAddresses","topPoolAddresses","setTopPoolAddresse","fetched","setFetched","addresses","POOL_AT_BLOCK","pools","blockString","addressesString","join","fetchPoolData","block24h","block48h","block7d","block14d","poolAddresses","parsePoolData","pairs","poolData","reserve0","reserve1","token0Price","token1Price","usePoolDatas","t24h","t48h","t7d","t14d","_","find","formattedPoolData","now","formattedPoolData24h","oneDayAgo","formattedPoolData48h","twoDaysAgo","formattedPoolData7d","oneWeekAgo","formattedPoolData14d","twoWeeksAgo","formatted","current","oneDay","twoDays","week","twoWeeks","volumeUSDChangeWeek","liquidityToken0","liquidityToken1","name","allBlocksAvailable","CRO_PRICES","fetchCroPrices","blockWeek","croPrices","croPrice","twoDay","oneWeek","TOKEN_AT_BLOCK","tokens","fetchTokenData","tokenAddresses","parseTokenData","tokenData","derivedCRO","derivedUSD","tradeVolumeUSD","totalLiquidity","useFetchedTokenDatas","prices","setPrices","tWeek","useCroPrices","parsed","parsed24","parsed48","parsed7d","parsed14d","liquidityUSDOneDayAgo","liquidityToken","priceUSD","priceUSDOneDay","priceUSDWeek","priceUSDChange","priceUSDChangeWeek","exists","fetchTopTokens","tokenDayDatas","t","useTopTokenAddresses","topTokenAddresses","setTopTokenAddresses","getPoolChartData","fetchPoolChartData","POOL_TRANSACTIONS","fetchPoolTransactions","getTokenChartData","fetchTokenChartData","TOKEN_TRANSACTIONS","fetchTokenTransactions","mints0","mintsAs0","mints1","mintsAs1","burns0","burnsAs0","burns1","burnsAs1","swaps0","swapsAs0","swaps1","swapsAs1","getPriceSubqueries","tokenAddress","priceQueryConstructor","fetchTokenPriceData","interval","startTimestamp","time","tokenPrices","forEach","priceKey","tokenPriceIndex","findIndex","tokenPrice","formattedHistory","i","open","close","high","low","POOLS_FOR_TOKEN","fetchPoolsForToken","asToken0","asToken1","useProtocolData","useSelector","state","info","protocol","overview","dispatch","useDispatch","useCallback","updateProtocolData","useProtocolChartData","chartData","updateProtocolChartData","useProtocolTransactions","transactions","transactionsData","updateProtocolTransactions","useAllPoolData","byAddress","useAddPoolKeys","addPoolKeys","allPoolData","addNewPoolKeys","untrackedAddresses","filter","pool","useAllTokenData","useAddTokenKeys","addTokenKeys","useTokenDatas","allTokenData","addNewTokenKeys","useMemo","token","ProtocolUpdater","setProtocolData","fetchedProtocolData","updateChartData","fetchedChartData","chartError","updateTransactions","PoolUpdater","updatePoolData","useUpdatePoolData","unfetchedPoolAddresses","poolDataError","poolDatas","TokenUpdater","updateTokenDatas","updateTokenData","useUpdateTokenData","unfetchedTokenAddresses","tokenDataError","tokenDatas","TOKEN_SEARCH","POOL_SEARCH","getIds","entityArrays","ids","entities","currentTokenArray","entity","Array","Set","useFetchSearchResults","searchString","loading","searchResults","setSearchResults","searchStringTooShort","search","toUpperCase","charAt","toLowerCase","tokenIds","asAddress","asSymbol","asName","as0","as1","tokenDatasFull","poolDatasFull","tokensLoading","poolsLoading","BAD_SRCS","LogoLoader","src","alt","rest","refresh","srcFailedLoading","onError","StyledLogo","styled","size","theme","colors","background","text","CurrencyLogo","checkSummedAddress","isAddress","process","DoubleCurrencyWrapper","div","DoubleCurrencyLogo","address0","address1","formatAmount","amount","options","notation","displayThreshold","tokenPrecision","isInteger","match","precision","format","repeat","amountWithPrecision","numeral","HoverIcon","SaveIcon","fill","useTheme","stroke","warning","color","textDisabled","Container","StyledInput","Input","Menu","hide","secondary","mediaQueries","sm","md","Blackout","ResponsiveGrid","Break","cardBorder","HoverText","HoverRowLink","OptionButton","enabled","primary","card","tokenIncludesSearchTerm","value","Search","history","useHistory","useMatchBreakpoints","isXs","isSm","useTranslation","inputRef","useRef","menuRef","showMoreRef","showMenu","setShowMenu","setValue","debouncedSearchTerm","useDebounce","tokensShown","setTokensShown","poolsShown","setPoolsShown","handleOutsideClick","e","menuClick","contains","target","inputCLick","showMoreClick","document","addEventListener","querySelector","style","overflow","removeEventListener","useWatchlistTokens","savedTokens","addSavedToken","useWatchlistPools","savedPools","addSavedPool","handleItemClick","watchListTokenData","watchListTokenLoading","watchListPoolData","watchListPoolLoading","showWatchlist","setShowWatchlist","tokensForList","t0","t1","poolForList","poolIncludesSearchTerm","p0","p1","onChange","placeholder","ref","onFocus","mb","onClick","bold","textAlign","fontSize","ml","marginLeft","stopPropagation","isLoading","noTokensFound","noWatchlistTokens","showMessage","noTokensMessage","contentUnderTokenList","whiteSpace","noPoolsFound","noWatchlistPools","noPoolsMessage","contentUnderPoolList","NavWrapper","Flex","gradients","cardHeader","InfoNav","activeIndex","useRouteMatch","scale","variant","as","Link","width","LineChartLoaderSVG","props","height","preserveAspectRatio","viewBox","d","strokeWidth","strokeDasharray","strokeDashoffset","opacity","attributeName","dur","begin","className","stdDeviation","in","BarChartLoaderSVG","keyTimes","repeatCount","x","CandleChartLoaderSVG","LoadingText","Box","LoadingIndicator","BarChartLoader","LineChartLoader","CandleChartLoader","HoverUpdater","payload","setHoverValue","setHoverDate","LineChart","ResponsiveContainer","AreaChart","margin","top","right","left","bottom","onMouseLeave","XAxis","dataKey","axisLine","tickLine","tickFormatter","minTickGap","YAxis","tickCount","val","orientation","tick","dx","textSubtle","Tooltip","cursor","contentStyle","display","formatter","tooltipValue","Area","lightBlue","Percent","Number","isNaN","isNegative","Math","abs","ClickableColumnHeader","Text","TableWrapper","radii","PageButtons","Arrow","LinkWrapper","ResponsiveLogo","TableLoader","loadingRow","DataRow","index","alignItems","fontWeight","SORT_FIELD","TokenTable","maxItems","sortField","setSortField","setSortDirection","page","setPage","maxPage","setMaxPage","extraPages","floor","sortedTokens","handleSort","newField","arrow","field","textTransform","Fragment","LoadingRow","PoolTable","sortedPools","CustomBar","y","rx","Chart","BarChart","backgroundDisabled","Bar","shape","Wrapper","RadioGroup","transaction","abs0","abs1","outputTokenSymbol","inputTokenSymbol","href","getExplorerLink","truncateHash","formatDistanceToNowStrict","TransactionTable","txFilter","setTxFilter","sortedTransactions","filteredTransactions","tx","handleFilter","newFilter","flexDirection","checked","justifyContent","ChartCardsContainer","lg","Overview","liquidityHover","setLiquidityHover","liquidityDateHover","setLiquidityDateHover","volumeHover","setVolumeHover","volumeDateHover","setVolumeDateHover","currentDate","formattedLiquidityData","day","fromUnixTime","formattedVolumeData","allTokens","formattedTokens","somePoolsAreLoading","some","Page","mt","WatchlistCard","lightBeige","space","PoolsOverview","watchlistPools","px","py","CandleChart","setLabel","chartRef","chartCreated","setChart","handleResize","parentElement","resize","clientWidth","timeScale","fitContent","scrollToPosition","isClient","window","chart","createChart","layout","backgroundColor","textColor","fontFamily","rightPriceScale","scaleMargins","borderVisible","secondsVisible","tickMarkFormatter","unixTime","watermark","visible","grid","horzLines","vertLines","crosshair","horzLine","labelVisible","mode","vertLine","labelBackgroundColor","series","addCandlestickSeries","upColor","success","downColor","failure","borderDownColor","borderUpColor","wickDownColor","wickUpColor","setData","subscribeCrosshairMove","param","point","utc","getTime","getTimezoneOffset","seriesPrices","get","Inner","input","TabToggle","button","isActive","TabToggleGroup","children","ChartCard","tokenPriceData","VOLUME","view","setView","hoverValue","hoverDate","formattedTvlData","LIQUIDITY","PRICE","pt","valueToDisplay","getLatestValueDisplay","small","ContentLayout","TokenButton","LockedTokensContainer","PoolPage","routeAddress","params","showWeeklyData","setShowWeeklyData","useTooltip","tooltip","tooltipVisible","targetRef","scrollTo","updatePoolChartData","poolAddress","usePoolChartData","updatePoolTransactions","usePoolTransactions","addPoolToWatchlist","mr","flex","onItemClick","totalFees","Spinner","CardWrapper","TopMoverCard","ScrollableRow","DataCard","lineHeight","TopTokenMovers","topPriceIncrease","min","increaseRef","moveLeftRef","scrollInterval","setInterval","scrollLeft","scrollWidth","clearInterval","entry","TokensOverview","watchListTokens","useCMCLink","cmcPageUrl","setCMCPageUrl","fetchLink","status","json","then","url","StyledCMCLink","UIKitLink","DEFAULT_TIME_WINDOW","weeks","TokenPage","cmcLink","useTokenData","poolsForToken","addTokenPoolAddresses","usePoolsForToken","updateTokenTransactions","useTokenTransactions","updateTokenChartData","useTokenChartData","priceData","timeWindow","oldestTimestampFetched","oldestFetchedTimestamp","startOfHour","sub","fetchingError","updateTokenPriceData","secondsInterval","useTokenPriceData","adjustedPriceData","watchlistTokens","addWatchlistToken","rel","RedirectInvalidToken","Info","Toolbar","path","exact","Pools","Tokens","component"],"mappings":"0IAsBYA,E,gFClBCC,EAAY,MACZC,EAAiB,MAOjBC,EAAoB,WACpBC,EAAe,MAGfC,EAA4B,GAI5BC,EAAkB,CAE7B,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CACA,6CAEA,6CACA,8CCnCWC,EAAkB,SAACC,EAAmBC,GACjD,OAAID,GAAYC,EACPD,EAAWC,EAEhBD,GAGG,GAQIE,EAAmB,SAACF,EAAmBC,GAClD,OAAID,GAAYC,GACLD,EAAWC,GAAeA,EAAe,IAE7C,GAWIE,EAAqB,SAChCH,EACAI,EACAC,GAEA,IAAMC,EAAsBP,EAAgBC,EAAUI,GAChDG,EAAuBR,EAAgBK,EAAmBC,GAEhE,MAAO,CAACC,EADiBJ,EAAiBI,EAAqBC,KAIpDC,EAAkB,SAACC,EAAmBC,EAAuBC,GACxE,IAKMC,EAAUD,EAAe,EAAKD,EAAgBhB,EDpDzB,QCoD0D,IAAOiB,EAAe,EAC3G,MAAO,CACLE,aAPmBJ,EAAYhB,EAQ/BqB,YAPkBJ,EAAgBjB,EAQlCsB,UAPgBN,EAAYf,EAQ5BsB,SAPeN,EAAgBhB,EAQ/BkB,QAASA,IAAYK,IAAWL,EAAU,I,8CCjDjCM,EAAU,uCAAG,WACxBC,EACAC,EACAC,GAHwB,uCAAAC,EAAA,sDAIxBC,EAJwB,+BAIZ,IAERC,EAAc,GACdC,GAAW,EACXC,EAAO,EARa,mBAUdD,EAVc,wBAWhBE,EAAMP,EAAWQ,OACjBF,EAAOH,EAAYH,EAAWQ,SAChCD,EAAMD,EAAOH,GAETM,EAAkBT,EAAWU,MAAMJ,EAAMC,GAf3B,UAiBCI,kBAAQV,EAAUF,EAAiBU,IAjBpC,QAiBdG,EAjBc,OAkBpBR,EAAW,2BACNA,GACAQ,GAELP,EAAWQ,OAAOC,KAAKF,GAAQJ,OAASL,GAAaG,EAAOH,EAAYH,EAAWQ,OACnFF,GAAQH,EAvBY,gDAyBfC,GAzBe,yCA2BtBW,QAAQC,MAAM,4BAAd,MA3BsB,kBA4Bf,MA5Be,0DAAH,0DAmCVC,EAAqB,WAChC,IAAMC,EAA2C,IAA1BC,YAAY,IAAIC,MAKvC,MAAO,CAJMD,YAAYE,YAAcC,kBAAQJ,EAAgB,KAClDC,YAAYE,YAAcC,kBAAQJ,EAAgB,KACnDC,YAAYE,YAAcE,kBAASL,EAAgB,KAClDC,YAAYE,YAAcE,kBAASL,EAAgB,OC7C5DM,EAAqB,SAACC,GAAD,OACzBA,EAAWC,KAAI,SAACC,GACd,MAAM,IAAN,OAAWA,EAAX,8FAA0GA,EAA1G,2BACEA,EAAY,IADd,kCAOEC,EAAyB,SAAC5B,GAC9B,OAAO6B,cAAP,qDACI7B,IAQO8B,EAAuB,uCAAG,WACrCL,GADqC,yCAAAvB,EAAA,yDAErC6B,EAFqC,+BAEL,OAChC5B,EAHqC,+BAGzB,IAEe,KAAb,OAAVsB,QAAU,IAAVA,OAAA,EAAAA,EAAYjB,QALqB,yCAM5B,IAN4B,uBASNV,EAC7B8B,EACAJ,EAAmBC,GACnBO,IACA7B,GAbmC,OAoBrC,GAXMC,EAT+B,OAgB/B6B,EACc,SAAlBF,EAA2B,SAAC7B,EAAUgC,GAAX,OAAwBA,EAAEC,OAASjC,EAAEiC,QAAS,SAACjC,EAAUgC,GAAX,OAAwBhC,EAAEiC,OAASD,EAAEC,QAE1GC,EAAkB,GACpBhC,EAAa,CAEf,UAAkBS,OAAOC,KAAKV,GAA9B,eAAWiC,EAAiC,KACtCjC,EAAYiC,GAAK7B,OAAS,GAC5B4B,EAAOE,KAAK,CACVX,UAAWU,EAAIE,MAAM,KAAK,GAC1BJ,OAAQK,SAASpC,EAAYiC,GAAK,GAAGF,OAAQ,MAKnDC,EAAOK,KAAKR,GA/BuB,yBAiC9BG,GAjC8B,4CAAH,sDAwCvBM,EAA0B,SACrCjB,GAMI,IALJM,EAKG,uDAL6B,OAChC5B,EAIG,uDAJS,IAKZ,EAA4BwC,qBAA5B,mBAAOP,EAAP,KAAeQ,EAAf,KACA,EAA0BD,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc6B,EAAd,KAgBA,OAdAC,qBAAU,WACR,IAAMC,EAAS,uCAAG,4BAAA7C,EAAA,sEACK4B,EAAwBL,EAAYM,EAAe5B,GADxD,OAEM,KADhBS,EADU,QAELJ,OACTqC,GAAS,GAETD,EAAUhC,GALI,2CAAH,qDAQVwB,GAAWpB,GACd+B,OAIG,CACLX,SACApB,UCvEEgC,EAAe,uCAAG,WAAOC,GAAP,iBAAA/C,EAAA,sEAEdgD,EAAQrB,cAFM,+LAIdoB,EAAK,2BAAuBA,EAAvB,SAJS,SAWDtC,kBAA0BwC,IAAaD,GAXtC,cAWdE,EAXc,yBAYb,CAAEA,OAAMpC,OAAO,IAZF,uCAcpBD,QAAQC,MAAM,gCAAd,MAdoB,kBAeb,CAAEoC,KAAM,KAAMpC,OAAO,IAfR,yDAAH,sDAmBfqC,EAA2B,SAACC,GAChC,OAAIA,EACK,CACLC,kBAAmBC,WAAWF,EAAcC,mBAC5CE,eAAgBD,WAAWF,EAAcG,gBACzCC,kBAAmBF,WAAWF,EAAcI,oBAGzC,MAuEMC,EA/Dc,WAC3B,MAAoChB,mBAA6B,CAC/D3B,OAAO,IADT,mBAAO4C,EAAP,KAAmBC,EAAnB,KAGA,EAAmB5C,IAAnB,mBAAO6C,EAAP,KAAYC,EAAZ,KACA,EAAsCrB,EAAwB,CAACoB,EAAKC,IAA5D3B,EAAR,EAAQA,OAAe4B,EAAvB,EAAgBhD,MAChB,SAA2BoB,QAA3B,IAA2BA,IAAU,GAArC,mBAAO6B,EAAP,KAAgBC,EAAhB,KAsDA,OApDApB,qBAAU,WACR,IAAMqB,EAAK,uCAAG,wFAAAjE,EAAA,sEACkB8C,IADlB,uBACJhC,EADI,EACJA,MAAOoC,EADH,EACGA,KADH,SAEmCJ,EAAe,iBAACiB,QAAD,IAACA,OAAD,EAACA,EAAS9B,cAAV,aAAoBiC,GAFtE,uBAEGC,EAFH,EAEJrD,MAAsBsD,EAFlB,EAEYlB,KAFZ,UAGmCJ,EAAe,iBAACkB,QAAD,IAACA,OAAD,EAACA,EAAS/B,cAAV,aAAoBiC,GAHtE,iBAGGG,EAHH,EAGJvD,MAAsBwD,EAHlB,EAGYpB,KAClBqB,EAAWzD,GAASqD,GAAWE,EAC/BG,EAAerB,EAAwB,OAACD,QAAD,IAACA,GAAD,UAACA,EAAMuB,oBAAP,aAAC,EAAqB,IAG7DC,EAA0BvB,EAAwB,OAACiB,QAAD,IAACA,GAAD,UAACA,EAAQK,oBAAT,aAAC,EAAuB,IAC1EE,EAAiBD,GAA2BF,EAC5CI,EAA0BzB,EAAwB,OAACmB,QAAD,IAACA,GAAD,UAACA,EAAQG,oBAAT,aAAC,EAAuB,IAC1EI,EAAiBD,GAA2BD,GAAkBH,EAE9DM,EAAmBN,GAAgBG,GAAkBE,EACvDN,IAAaO,EACfnB,EAAc,CACZ7C,OAAO,KAEH,EAC+BjC,EACnC2F,EAAajB,eACboB,EAAepB,eACfsB,EAAetB,gBAJZ,mBACEpE,EADF,KACa4F,EADb,KAMCC,EAAqBpG,EAAiB4F,EAAahB,kBAAmBmB,EAAenB,mBANtF,EAQ4B3E,EAC/B2F,EAAanB,kBACbsB,EAAetB,kBACfwB,EAAexB,mBAXZ,mBAQE4B,EARF,KAQWC,EARX,KAaCC,EAA6B,CACjChG,YACA4F,gBAA4C,kBAApBA,EAA+BA,EAAkB,EACzE1F,aAAcmF,EAAahB,kBAC3BwB,qBACAC,UACAC,iBAEFvB,EAAc,CACZ7C,OAAO,EACPoC,KAAMiC,KAzCE,4CAAH,wDA6CuB,OAAPpB,QAAO,IAAPA,OAAA,EAAAA,EAAS9B,UAAT,OAAmB+B,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAS/B,UAC5B6B,GAAeJ,EAAWR,MACnDe,MAED,CAACF,EAASC,EAASF,EAAYJ,IAE3BA,G,kBL9FGxF,O,eAAAA,I,eAAAA,I,gBAAAA,M,KMhBL,I,mICKFkH,GDLQC,GAAW,SAACC,GACvB,MAAO,CACLC,KAAMrH,EAAgBsH,KACtBC,KAAMH,EAAKI,GAAGrD,MAAM,KAAK,GACzBZ,UAAW6D,EAAK7D,UAChBkE,OAAQL,EAAKM,GACbC,aAAcP,EAAKQ,KAAKC,OAAOC,OAC/BC,aAAcX,EAAKQ,KAAKI,OAAOF,OAC/BG,cAAeb,EAAKQ,KAAKC,OAAOL,GAChCU,cAAed,EAAKQ,KAAKI,OAAOR,GAChCW,UAAW/C,WAAWgC,EAAKe,WAC3BC,aAAchD,WAAWgC,EAAKiB,SAC9BC,aAAclD,WAAWgC,EAAKmB,WAIrBC,GAAW,SAACC,GACvB,MAAO,CACLpB,KAAMrH,EAAgB0I,KACtBnB,KAAMkB,EAAKjB,GAAGrD,MAAM,KAAK,GACzBZ,UAAWkF,EAAKlF,UAChBkE,OAAQgB,EAAKhB,OACbE,aAAcc,EAAKb,KAAKC,OAAOC,OAC/BC,aAAcU,EAAKb,KAAKI,OAAOF,OAC/BG,cAAeQ,EAAKb,KAAKC,OAAOL,GAChCU,cAAeO,EAAKb,KAAKI,OAAOR,GAChCW,UAAW/C,WAAWqD,EAAKN,WAC3BC,aAAchD,WAAWqD,EAAKJ,SAC9BC,aAAclD,WAAWqD,EAAKF,WAIrBI,GAAW,SAACC,GACvB,MAAO,CACLvB,KAAMrH,EAAgB6I,KACtBtB,KAAMqB,EAAKpB,GAAGrD,MAAM,KAAK,GACzBZ,UAAWqF,EAAKrF,UAChBkE,OAAQmB,EAAKE,KACbnB,aAAciB,EAAKhB,KAAKC,OAAOC,OAC/BC,aAAca,EAAKhB,KAAKI,OAAOF,OAC/BG,cAAeW,EAAKhB,KAAKC,OAAOL,GAChCU,cAAeU,EAAKhB,KAAKI,OAAOR,GAChCW,UAAW/C,WAAWwD,EAAKT,WAC3BC,aAAchD,WAAWwD,EAAKG,WAAa3D,WAAWwD,EAAKI,YAC3DV,aAAclD,WAAWwD,EAAKK,WAAa7D,WAAWwD,EAAKM,cAIlDC,GAAa,SAACC,GAAD,MAA0D,CAClFC,KAAMD,EAAaC,KACnBpI,UAAWmE,WAAWgE,EAAaE,gBACnCnI,aAAciE,WAAWgE,EAAa9D,qBAG3BiE,GAAiB,SAACC,GAAD,MAA2C,CACvEH,KAAMG,EAAYH,KAClBpI,UAAWmE,WAAWoE,EAAYF,gBAClCnI,aAAciE,WAAWoE,EAAYC,cAQ1BC,GAAc,uCAAG,WAC5BC,EACAC,GAF4B,6CAAA9H,EAAA,sDAIxB+H,EAA6B,GAC7BjH,GAAQ,EACRV,EAAO,EACPD,GAAW,EAPa,UASpBA,EAToB,iCAWgB0H,EAAkBzH,EAAM0H,GAXxC,gBAWlB5E,EAXkB,EAWlBA,KAAa8E,EAXK,EAWZlH,MACdV,GAAQ,IACRD,IAAY+C,GAAMA,EAAK5C,OAAS,IAChCQ,EAAQkH,EACJ9E,IACF6E,EAAeA,EAAaE,OAAO/E,IAhBX,2BAoBxBpC,GAAiC,IAAxBiH,EAAazH,OApBE,0CAqBnB,CACLQ,OAAO,IAtBiB,QA0C5B,IAhBMoH,EAAoBH,EAAaI,QAAO,SAACC,EAAuCC,GAEpF,IAAMC,EAAahG,UAAU+F,EAAQd,KAAOjJ,GAAciK,QAAQ,IAClE,OAAO,2BACJD,EAAaD,GACXD,KAEJ,IAEGI,EAAgB7H,OAAOC,KAAKsH,GAAmB1G,KAAI,SAAC8G,GAAD,OAAgBhG,SAASgG,EAAY,OAExFG,EAAwBP,EAAkBM,EAAc,IAE1D/G,EAvCwB,iBAuCZgH,QAvCY,IAuCZA,OAvCY,EAuCZA,EAAuBlB,YAvCX,QAuCmBlJ,EAC3CqK,EAxCwB,iBAwCHD,QAxCG,IAwCHA,OAxCG,EAwCHA,EAAuBpJ,oBAxCpB,QAwCoC,EAC1DsJ,EAAe1H,YAAY,IAAIC,MAC9BO,EAAYkH,EAAerK,GAChCmD,GAAanD,EACPgK,EAAahG,UAAUb,EAAYnD,GAAciK,QAAQ,GAAI,IAC9D5H,OAAOC,KAAKsH,GAAmBU,SAASN,EAAWO,YAOtDH,EAAqBR,EAAkBI,GAAYjJ,aANnD6I,EAAkBI,GAAc,CAC9Bf,KAAM9F,EACNtC,UAAW,EACXE,aAAcqJ,GAjDQ,yBAwDrB,CACLxF,KAAMvC,OAAOmI,OAAOZ,GACpBpH,OAAO,IA1DmB,4CAAH,wDE3DrBiI,GAAgBpH,cAAH,6QAUbqH,GAAoB,uCAAG,WAAO5I,GAAP,mBAAAJ,EAAA,+EAEKS,kBAA6BwC,IAAa8F,GAAe,CACrFE,UAAW5K,EACX+B,SAJuB,uBAEjB8I,EAFiB,EAEjBA,YAIFhG,EAAOgG,EAAY1H,IAAI6F,IANJ,kBAOlB,CAAEnE,OAAMpC,OAAO,IAPG,uCASzBD,QAAQC,MAAM,sCAAd,MATyB,kBAUlB,CAAEA,OAAO,IAVS,yDAAH,sDA4CXqI,GA3BiB,WAI9B,MAAkD1G,qBAAlD,mBAAO2G,EAAP,KAA0BC,EAA1B,KACA,EAA0B5G,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc6B,EAAd,KAgBA,OAdAC,qBAAU,WACR,IAAMqB,EAAK,uCAAG,8BAAAjE,EAAA,sEACW4H,GAAeoB,IAD1B,iBACJ9F,EADI,EACJA,MAENmG,EAAqBnG,GAErBP,GAAS,GALC,2CAAH,qDAQNyG,GAAsBtI,GACzBmD,MAED,CAACmF,EAAmBtI,IAEhB,CACLA,QACAoC,KAAMkG,I,SCrDJE,GAAsB3H,cAAH,8gCAkEnB4H,GAAoB,uCAAG,kCAAAvJ,EAAA,+EAENS,kBAA4BwC,IAAaqG,IAFnC,UAEnBpG,EAFmB,qDAKhBgB,GALgB,cAQnBsF,EAAQtG,EAAKsG,MAAMhI,IAAI6D,IACvBoE,EAAQvG,EAAKuG,MAAMjI,IAAIkF,IACvBgD,EAAQxG,EAAKwG,MAAMlI,IAAIqF,IAVJ,kBAYlB,uBAAI2C,GAAJ,aAAcC,GAAd,aAAwBC,IAAOnH,MAAK,SAACvC,EAAGgC,GAC7C,OAAOM,SAASN,EAAEP,UAAW,IAAMa,SAAStC,EAAEyB,UAAW,QAblC,gEAgBlByC,GAhBkB,0DAAH,qDAoBXqF,MChFTI,GAAa,uCAAG,WAAOC,GAAP,iBAAA5J,EAAA,sEAEZgD,EAAQrB,cAFI,oYAcClB,kBAA0BwC,IAAaD,EAAO,CAAE6G,UAAWrL,EAAiBoL,oBAd7E,cAcZ1G,EAdY,yBAgBXA,EAAK4G,aAAatI,KAAI,SAACuI,GAAD,OAAOA,EAAErE,GAAGrD,MAAM,KAAK,OAhBlC,uCAkBlBxB,QAAQC,MAAM,4BAAd,MAlBkB,kBAmBX,IAnBW,yDAAH,sDA6CJkJ,GAnBa,WAC1B,MAA+CvH,mBAAS,IAAxD,mBAAOwH,EAAP,KAAyBC,EAAzB,KACA,EAA0BnJ,IAAnB6I,EAAP,oBACA,EAA8BnH,oBAAS,GAAvC,mBAAO0H,EAAP,KAAgBC,EAAhB,KAaA,OAXAxH,qBAAU,WACR,IAAMqB,EAAK,uCAAG,4BAAAjE,EAAA,sEACY2J,GAAcC,GAD1B,OACNS,EADM,OAEZH,EAAmBG,GACnBD,GAAW,GAHC,2CAAH,qDAKND,GACHlG,MAED,CAACgG,EAAkBL,EAAiBO,IAEhCF,G,qBCJHK,GAAgB,SAACvH,EAAsBwH,GAC3C,IAAMC,EAAczH,EAAK,0BAAsBA,EAAtB,QACnB0H,EAAe,YAAQF,EAAMG,KAAK,OAAnB,MACrB,MAAM,+BAAN,OACoBD,EADpB,mBAEID,EAFJ,kSA0BIG,GAAa,uCAAG,WACpBC,EACAC,EACAC,EACAC,EACAC,GALoB,iBAAAhL,EAAA,sEAQZgD,EAAQrB,cARI,mLAUP2I,GAAc,KAAMU,GACdV,GAAcM,EAAUI,GACvBV,GAAcO,EAAUG,GACxBV,GAAcQ,EAASE,GACtBV,GAAcS,EAAUC,IAdzB,SAiBCvK,kBAA4BwC,IAAaD,GAjB1C,cAiBZE,EAjBY,yBAkBX,CAAEA,OAAMpC,OAAO,IAlBJ,uCAoBlBD,QAAQC,MAAM,4BAAd,MApBkB,kBAqBX,CAAEA,OAAO,IArBE,yDAAH,8DA0BbmK,GAAgB,SAACC,GACrB,OAAKA,EAGEA,EAAM/C,QAAO,SAACC,EAAmD+C,GACtE,IAAQhM,EAAwEgM,EAAxEhM,UAAWwI,EAA6DwD,EAA7DxD,WAAYyD,EAAiDD,EAAjDC,SAAUC,EAAuCF,EAAvCE,SAAUC,EAA6BH,EAA7BG,YAAaC,EAAgBJ,EAAhBI,YAUhE,OATAnD,EAAM+C,EAASzF,IAAf,2BACKyF,GADL,IAEEhM,UAAWmE,WAAWnE,GACtBwI,WAAYrE,WAAWqE,GACvByD,SAAU9H,WAAW8H,GACrBC,SAAU/H,WAAW+H,GACrBC,YAAahI,WAAWgI,GACxBC,YAAajI,WAAWiI,KAEnBnD,IACN,IAdM,IA4IIoD,GAjHM,SAACR,GACpB,MAAoCvI,mBAAoB,CAAE3B,OAAO,IAAjE,mBAAO4C,EAAP,KAAmBC,EAAnB,KACA,EAAgC5C,IAAhC,mBAAO0K,EAAP,KAAaC,EAAb,KAAmBC,EAAnB,KAAwBC,EAAxB,KACA,EAAsCpJ,EAAwB,CAACiJ,EAAMC,EAAMC,EAAKC,IAAxE1J,EAAR,EAAQA,OAAe4B,EAAvB,EAAgBhD,MAEhB,SAAgDoB,QAAhD,IAAgDA,IAAU,GAA1D,mBAAO0I,EAAP,KAAiBC,EAAjB,KAA2BC,EAA3B,KAAoCC,EAApC,KAyGA,OAvGAnI,qBAAU,WACR,IAAMqB,EAAK,uCAAG,4CAAAjE,EAAA,sEASkB2K,GAC5BC,EAAS3I,OACT4J,KAAEC,KAAK,CAACjB,EAAUD,IAAW,SAAA7H,GAAK,YAAcmB,IAAVnB,KAAqBd,OAC3D4J,KAAEC,KAAK,CAAChB,EAASD,EAAUD,IAAW,SAAA7H,GAAK,YAAcmB,IAAVnB,KAAqBd,OACpE4J,KAAEC,KAAK,CAACf,EAAUD,EAASD,EAAUD,IAAW,SAAA7H,GAAK,YAAcmB,IAAVnB,KAAqBd,OAC9E+I,GAdU,gBASJlK,EATI,EASJA,MAAOoC,EATH,EASGA,KAOXpC,EACF6C,EAAc,CAAE7C,OAAO,KAEjBiL,EAAoBd,GAAa,OAAC/H,QAAD,IAACA,OAAD,EAACA,EAAM8I,KACxCC,EAAuBhB,GAAa,OAAC/H,QAAD,IAACA,OAAD,EAACA,EAAMgJ,WAC3CC,EAAuBlB,GAAa,OAAC/H,QAAD,IAACA,OAAD,EAACA,EAAMkJ,YAC3CC,EAAsBpB,GAAa,OAAC/H,QAAD,IAACA,OAAD,EAACA,EAAMoJ,YAC1CC,EAAuBtB,GAAa,OAAC/H,QAAD,IAACA,OAAD,EAACA,EAAMsJ,aAG3CC,EAAYzB,EAAc7C,QAAO,SAACC,EAAwCN,GAE9E,IAAM4E,EAA2CX,EAAkBjE,GAC7D6E,EAA0CV,EAAqBnE,GAC/D8E,EAA2CT,EAAqBrE,GAChE+E,EAAwCR,EAAoBvE,GAC5DgF,EAA4CP,EAAqBzE,GAEvE,EAAqCjJ,EAAkB,OACrD6N,QADqD,IACrDA,OADqD,EACrDA,EAASvN,UAD4C,OAErDwN,QAFqD,IAErDA,OAFqD,EAErDA,EAAQxN,UAF6C,OAGrDyN,QAHqD,IAGrDA,OAHqD,EAGrDA,EAASzN,WAHX,mBAAOA,EAAP,KAAkB4F,EAAlB,KAKA,EAA6ClG,EAAkB,OAC7D6N,QAD6D,IAC7DA,OAD6D,EAC7DA,EAASvN,UADoD,OAE7D0N,QAF6D,IAE7DA,OAF6D,EAE7DA,EAAM1N,UAFuD,OAG7D2N,QAH6D,IAG7DA,OAH6D,EAG7DA,EAAU3N,WAHZ,mBAAOC,EAAP,KAAsB2N,EAAtB,KAMM1N,EAAeqN,EAAUA,EAAQ/E,WAAa,EAE9C3C,EAAqBpG,EAAgB,OAAC8N,QAAD,IAACA,OAAD,EAACA,EAAS/E,WAAV,OAAsBgF,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAQhF,YAEnEqF,EAAkBN,EAAUA,EAAQtB,SAAW,EAC/C6B,EAAkBP,EAAUA,EAAQrB,SAAW,EAErD,EAAoEnM,EAClEC,EACAC,EACAC,GAHME,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,YAAaC,EAAnC,EAAmCA,UAAWC,EAA9C,EAA8CA,SAAUJ,EAAxD,EAAwDA,QAqCxD,OA/BIoN,IACFtE,EAAMN,GAAW,CACfA,UACA/B,OAAQ,CACN+B,QAAS4E,EAAQ3G,OAAOL,GACxBwH,KAAMR,EAAQ3G,OAAOmH,KACrBlH,OAAQ0G,EAAQ3G,OAAOC,QAEzBE,OAAQ,CACN4B,QAAS4E,EAAQxG,OAAOR,GACxBwH,KAAMR,EAAQxG,OAAOgH,KACrBlH,OAAQ0G,EAAQxG,OAAOF,QAEzBsF,YAAaoB,EAAQpB,YACrBC,YAAamB,EAAQnB,YACrBpM,YACA4F,kBACA3F,gBACA2N,sBACAxN,eACAC,cACAC,YACAC,WACAJ,UACAD,eACA2F,qBACAgI,kBACAC,oBAIG7E,IACN,IACHzE,EAAc,CAAET,KAAMuJ,EAAW3L,OAAO,KA3F9B,2CAAH,qDAgGLqM,EAAkB,OAAGvC,QAAH,IAAGA,OAAH,EAAGA,EAAU3I,OACjC+I,EAAc1K,OAAS,GAAK6M,IAAuBrJ,GACrDG,MAED,CAAC+G,EAAeJ,EAAUC,EAAUC,EAASC,EAAUjH,IAEnDJ,GC1OH0J,GAAazL,cAAH,wZAgCV0L,GAAc,uCAAG,WACrBtJ,EACAC,EACAsJ,GAHqB,+BAAAtN,EAAA,+EAMAS,kBAAwBwC,IAAamK,GAAY,CAClErJ,UACAC,UACAsJ,cATiB,cAMbpK,EANa,yBAWZ,CACLpC,OAAO,EACPyM,UAAW,CACTb,QAASpJ,WAAU,oBAACJ,EAAKwJ,eAAN,aAAC,EAAcc,gBAAf,QAA2B,KAC9Cb,OAAQrJ,WAAU,oBAACJ,EAAKyJ,cAAN,aAAC,EAAaa,gBAAd,QAA0B,KAC5CC,OAAQnK,WAAU,oBAACJ,EAAKuK,cAAN,aAAC,EAAaD,gBAAd,QAA0B,KAC5CX,KAAMvJ,WAAU,oBAACJ,EAAKwK,eAAN,aAAC,EAAcF,gBAAf,QAA2B,QAjB5B,uCAqBnB3M,QAAQC,MAAM,6BAAd,MArBmB,kBAsBZ,CACLA,OAAO,EACPyM,eAAWrJ,IAxBM,yDAAH,0DCHdyJ,GAAiB,SAAC5K,EAA2B6K,GACjD,IAAMnD,EAAe,YAAQmD,EAAOlD,KAAK,OAApB,MACfF,EAAczH,EAAK,0BAAsBA,EAAtB,QACzB,MAAM,iCAAN,OACqB0H,EADrB,oBAEMD,EAFN,iOAkBIqD,GAAc,uCAAG,WACrBjD,EACAC,EACAC,EACAC,EACA+C,GALqB,iBAAA9N,EAAA,sEAQbgD,EAAQrB,cARK,oLAURgM,GAAe,KAAMG,GACfH,GAAe/C,EAAUkD,GACxBH,GAAe9C,EAAUiD,GACzBH,GAAe7C,EAASgD,GACvBH,GAAe5C,EAAU+C,IAdzB,SAiBArN,kBAA4BwC,IAAaD,GAjBzC,cAiBbE,EAjBa,yBAkBZ,CAAEA,OAAMpC,OAAO,IAlBH,uCAoBnBD,QAAQC,MAAM,6BAAd,MApBmB,kBAqBZ,CAAEA,OAAO,IArBG,yDAAH,8DA0BdiN,GAAiB,SAACH,GACtB,OAAKA,EAGEA,EAAOzF,QAAO,SAACC,EAAoD4F,GACxE,IAAQC,EAA8ED,EAA9EC,WAAYC,EAAkEF,EAAlEE,WAAYC,EAAsDH,EAAtDG,eAAgB9K,EAAsC2K,EAAtC3K,kBAAmB+K,EAAmBJ,EAAnBI,eASnE,OARAhG,EAAM4F,EAAUtI,IAAhB,2BACKsI,GADL,IAEEC,WAAY3K,WAAW2K,GACvBC,WAAY5K,WAAW4K,GACvBC,eAAgB7K,WAAW6K,GAC3B9K,kBAAmBC,WAAWD,GAC9B+K,eAAgB9K,WAAW8K,KAEtBhG,IACN,IAbM,IA2HIiG,GAjGc,SAACP,GAC5B,MAAoCrL,mBAAqB,CAAE3B,OAAO,IAAlE,mBAAO4C,EAAP,KAAmBC,EAAnB,KACA,EAAgC5C,IAAhC,mBAAO0K,EAAP,KAAaC,EAAb,KAAmBC,EAAnB,KAAwBC,EAAxB,KACA,EAAsCpJ,EAAwB,CAACiJ,EAAMC,EAAMC,EAAKC,IAAxE1J,EAAR,EAAQA,OAAe4B,EAAvB,EAAgBhD,MAEhB,SAAgDoB,QAAhD,IAAgDA,IAAU,GAA1D,mBAAO0I,EAAP,KAAiBC,EAAjB,KAA2BC,EAA3B,KAAoCC,EAApC,KACMwC,ED9CoB,WAC1B,MAA4B9K,qBAA5B,mBAAO6L,EAAP,KAAeC,EAAf,KACA,EAA0B9L,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc6B,EAAd,KAEA,EAA0B5B,IAA1B,mBAAO6C,EAAP,KAAYC,EAAZ,KAAiB2K,EAAjB,KACA,EAAsChM,EAAwB,CAACoB,EAAKC,EAAK2K,IAAjEtM,EAAR,EAAQA,OAAe4B,EAAvB,EAAgBhD,MAwBhB,OAtBA8B,qBAAU,WACR,IAAMqB,EAAK,uCAAG,sCAAAjE,EAAA,2EAC0BkC,EAD1B,GACL6B,EADK,KACIC,EADJ,KACasJ,EADb,cAImCD,GAC7CtJ,EAAQ9B,OACR+B,EAAQ/B,OACRqL,EAAYA,EAAUrL,OAAS+B,EAAQ/B,QAP7B,gBAIJsL,EAJI,EAIJA,UAJI,EAIOzM,MAOjB6B,GAAS,GAET4L,EAAUhB,GAbA,2CAAH,qDAgBNe,GAAWxN,IAASoB,GAAW4B,GAClCG,MAED,CAACnD,EAAOwN,EAAQpM,EAAQ4B,IAEpBwK,ECiBWG,GAwFlB,OAtFA7L,qBAAU,WACR,IAAMqB,EAAK,uCAAG,4CAAAjE,EAAA,sEASkB6N,GAC5BjD,EAAS3I,OACT4J,KAAEC,KAAK,CAACjB,EAAUD,IAAW,SAAA7H,GAAK,YAAcmB,IAAVnB,KAAqBd,OAC3D4J,KAAEC,KAAK,CAAChB,EAASD,EAAUD,IAAW,SAAA7H,GAAK,YAAcmB,IAAVnB,KAAqBd,OACpE4J,KAAEC,KAAK,CAACf,EAAUD,EAASD,EAAUD,IAAW,SAAA7H,GAAK,YAAcmB,IAAVnB,KAAqBd,OAC9E6L,GAdU,gBASJhN,EATI,EASJA,MAAOoC,EATH,EASGA,KAOXpC,EACF6C,EAAc,CAAE7C,OAAO,KAEjB4N,EAASX,GAAc,OAAC7K,QAAD,IAACA,OAAD,EAACA,EAAM8I,KAC9B2C,EAAWZ,GAAc,OAAC7K,QAAD,IAACA,OAAD,EAACA,EAAMgJ,WAChC0C,EAAWb,GAAc,OAAC7K,QAAD,IAACA,OAAD,EAACA,EAAMkJ,YAChCyC,EAAWd,GAAc,OAAC7K,QAAD,IAACA,OAAD,EAACA,EAAMoJ,YAChCwC,EAAYf,GAAc,OAAC7K,QAAD,IAACA,OAAD,EAACA,EAAMsJ,aAGjCC,EAAYqB,EAAe3F,QAAO,SAACC,EAAyCN,GAAa,IAAD,EACtF4E,EAA4CgC,EAAO5G,GACnD6E,EAA2CgC,EAAS7G,GACpD8E,EAA4CgC,EAAS9G,GACrD+E,EAAyCgC,EAAS/G,GAClDgF,EAA6CgC,EAAUhH,GAE7D,EAAqCjJ,EAAkB,OACrD6N,QADqD,IACrDA,OADqD,EACrDA,EAASyB,eAD4C,OAErDxB,QAFqD,IAErDA,OAFqD,EAErDA,EAAQwB,eAF6C,OAGrDvB,QAHqD,IAGrDA,OAHqD,EAGrDA,EAASuB,gBAHX,mBAAOhP,EAAP,KAAkB4F,EAAlB,KAKA,EAAwBlG,EAAkB,OACxC6N,QADwC,IACxCA,OADwC,EACxCA,EAASyB,eAD+B,OAExCtB,QAFwC,IAExCA,OAFwC,EAExCA,EAAMsB,eAFkC,OAGxCrB,QAHwC,IAGxCA,OAHwC,EAGxCA,EAAUqB,gBAHL/O,EAAP,oBAKMC,EAAeqN,EAAUA,EAAQ0B,eAAiB1B,EAAQwB,WAAa,EACvEa,EAAwBpC,EAASA,EAAOyB,eAAiBzB,EAAOuB,WAAa,EAC7ElJ,EAAqBpG,EAAiBS,EAAc0P,GACpDC,EAAiBtC,EAAUA,EAAQ0B,eAAiB,EAEpDa,EAAWvC,EAAUA,EAAQuB,WAAaV,EAAUb,QAAU,EAC9DwC,EAAiBvC,EAASA,EAAOsB,WAAaV,EAAUZ,OAAS,EAEjEwC,EAAetC,EAAOA,EAAKoB,YAAL,UAAmBV,EAAUV,YAA7B,QAAqCU,EAAUZ,QAAU,EAC/EyC,EAAiBxQ,EAAiBqQ,EAAUC,GAC5CG,EAAqBzQ,EAAiBqQ,EAAUE,GAChDlK,EAAUxG,EAAe,OAACiO,QAAD,IAACA,OAAD,EAACA,EAASrJ,kBAAV,OAA6BsJ,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAQtJ,mBAmBpE,OAjBA+E,EAAMN,GAAW,CACfwH,SAAU5C,EACV5E,UACAoF,KAAMR,EAAUA,EAAQQ,KAAO,GAC/BlH,OAAQ0G,EAAUA,EAAQ1G,OAAS,GACnC7G,YACA4F,kBACA3F,gBACA6F,UACA5F,eACA2F,qBACAgK,iBACAC,WACAG,iBACAC,sBAGKjH,IACN,IACHzE,EAAc,CAAET,KAAMuJ,EAAW3L,OAAO,KA3E9B,2CAAH,qDA+ELqM,EAAkB,OAAGvC,QAAH,IAAGA,OAAH,EAAGA,EAAU3I,OACjC6L,EAAexN,OAAS,GAAK6M,IAAuBrJ,GAAcyJ,GACpEtJ,MAED,CAAC6J,EAAgBlD,EAAUC,EAAUC,EAASC,EAAUjH,EAAYyJ,IAEhE7J,GClMH6L,GAAc,uCAAG,WAAO3F,GAAP,iBAAA5J,EAAA,sEAEbgD,EAAQrB,cAFK,uWAcAlB,kBAA2BwC,IAAaD,EAAO,CAAE6G,UAAWrL,EAAiBoL,oBAd7E,cAcb1G,EAda,yBAgBZA,EAAKsM,cAAchO,KAAI,SAACiO,GAAD,OAAOA,EAAE/J,GAAGrD,MAAM,KAAK,OAhBlC,uCAkBnBxB,QAAQC,MAAM,6BAAd,MAlBmB,kBAmBZ,IAnBY,yDAAH,sDA6CL4O,GAnBc,WAC3B,MAAkDjN,mBAAS,IAA3D,mBAAOkN,EAAP,KAA0BC,EAA1B,KACA,EAA0B7O,IAAnB6I,EAAP,oBACA,EAA8BnH,oBAAS,GAAvC,mBAAO0H,EAAP,KAAgBC,EAAhB,KAaA,OAXAxH,qBAAU,WACR,IAAMqB,EAAK,uCAAG,4BAAAjE,EAAA,sEACYuP,GAAe3F,GAD3B,OACNS,EADM,OAEZuF,EAAqBvF,GACrBD,GAAW,GAHC,2CAAH,qDAKND,GACHlG,MAED,CAAC0L,EAAmB/F,EAAiBO,IAEjCwF,G,wCCpDHE,GAAgB,uCAAG,WAAOzP,EAAc0H,GAArB,qBAAA9H,EAAA,sEAEfgD,EAAQrB,cAFO,qZAiBUlB,kBAA8BwC,IAAaD,EAAO,CAC/EiG,UAAW5K,EACX+B,OACA0H,YApBmB,uBAiBbgC,EAjBa,EAiBbA,aAKF5G,EAAO4G,EAAatI,IAAIiG,IAtBT,kBAuBd,CAAEvE,OAAMpC,OAAO,IAvBD,yCAyBrBD,QAAQC,MAAM,kCAAd,MAzBqB,kBA0Bd,CAAEA,OAAO,IA1BK,0DAAH,wDA8BhBgP,GAAkB,uCAAG,WAAOhI,GAAP,SAAA9H,EAAA,+EAClB4H,GAAeiI,GAAkB/H,IADf,2CAAH,sDAITgI,MCjCTC,GAAoBpO,cAAH,wlCAmEjBqO,GAAqB,uCAAG,WAAOlI,GAAP,qBAAA9H,EAAA,+EAEPS,kBAA4BwC,IAAa8M,GAAmB,CAC7EjI,YAHwB,cAEpB5E,EAFoB,OAKpBsG,EAAQtG,EAAKsG,MAAMhI,IAAI6D,IACvBoE,EAAQvG,EAAKuG,MAAMjI,IAAIkF,IACvBgD,EAAQxG,EAAKwG,MAAMlI,IAAIqF,IAPH,kBAQnB,CAAE3D,KAAK,GAAD,oBAAMsG,GAAN,aAAgBC,GAAhB,aAA0BC,IAAQ5I,OAAO,IAR5B,yCAU1BD,QAAQC,MAAR,gDAAuDgH,GAAvD,MAV0B,kBAWnB,CACLhH,OAAO,IAZiB,0DAAH,sDAiBZkP,MCrFTC,GAAiB,uCAAG,WAAO7P,EAAc0H,GAArB,qBAAA9H,EAAA,sEAEhBgD,EAAQrB,cAFQ,wZAiBUlB,kBAA+BwC,IAAaD,EAAO,CACjFiG,UAAW5K,EACX+B,OACA0H,YApBoB,uBAiBd0H,EAjBc,EAiBdA,cAKFtM,EAAOsM,EAAchO,IAAI6F,IAtBT,kBAuBf,CAAEnE,OAAMpC,OAAO,IAvBA,yCAyBtBD,QAAQC,MAAM,mCAAd,MAzBsB,kBA0Bf,CAAEA,OAAO,IA1BM,0DAAH,wDA8BjBoP,GAAmB,uCAAG,WAAOpI,GAAP,SAAA9H,EAAA,+EACnB4H,GAAeqI,GAAmBnI,IADf,2CAAH,sDAIVoI,MChCTC,GAAqBxO,cAAH,0qEA8HlByO,GAAsB,uCAAG,WAAOtI,GAAP,2BAAA9H,EAAA,+EAERS,kBAA4BwC,IAAakN,GAAoB,CAC9ErI,YAHyB,cAErB5E,EAFqB,OAKrBmN,EAASnN,EAAKoN,SAAS9O,IAAI6D,IAC3BkL,EAASrN,EAAKsN,SAAShP,IAAI6D,IAE3BoL,EAASvN,EAAKwN,SAASlP,IAAIkF,IAC3BiK,EAASzN,EAAK0N,SAASpP,IAAIkF,IAE3BmK,EAAS3N,EAAK4N,SAAStP,IAAIqF,IAC3BkK,EAAS7N,EAAK8N,SAASxP,IAAIqF,IAZN,kBAcpB,CAAE3D,KAAK,GAAD,oBAAMmN,GAAN,aAAiBE,GAAjB,aAA4BE,GAA5B,aAAuCE,GAAvC,aAAkDE,GAAlD,aAA6DE,IAASjQ,OAAO,IAd/D,yCAgB3BD,QAAQC,MAAR,iDAAwDgH,GAAxD,MAhB2B,kBAiBpB,CACLhH,OAAO,IAlBkB,0DAAH,sDAuBbsP,MCvJTa,GAAqB,SAACC,EAAsBhP,GAAvB,OACzBA,EAAOV,KACL,SAACuB,GAAD,yBACKA,EAAMtB,UADX,sBACkCyP,EADlC,+BACqEnO,EAAMd,OAD3E,uDAIKc,EAAMtB,UAJX,6CAIyDsB,EAAMd,OAJ/D,+CAaEkP,GAAwB,SAACrR,GAC7B,OAAO6B,cAAP,2EAEM7B,IAKFsR,GAAmB,uCAAG,WAC1BtJ,EACAuJ,EACAC,GAH0B,6BAAAtR,EAAA,sDAY1B,IAHM2I,EAAe1H,YAAY,IAAIC,MAC/BK,EAAa,GACfgQ,EAAOD,EACJC,GAAQ5I,GACbpH,EAAWa,KAAKmP,GAChBA,GAAQF,EAdgB,yBAiBHzP,EAAwBL,EAAY,MAAO,KAjBxC,WAiBlBW,EAjBkB,SAkBS,IAAlBA,EAAO5B,OAlBE,wBAmBtBO,QAAQC,MAAM,uCAAwCS,GAnBhC,kBAoBf,CACLT,OAAO,IArBa,yBAyBclB,EACpCuR,GACAF,GAAmBnJ,EAAS5F,GAC5Be,IACA,KA7BsB,WAyBlBqL,EAzBkB,+BAiCtBzN,QAAQC,MAAM,6BAjCQ,kBAkCf,CACLA,OAAO,IAnCa,QA8ExB,IAtCM0Q,EAIA,GAGN7Q,OAAOC,KAAK0N,GAAQmD,SAAQ,SAACC,GAC3B,IAEe,EAFTjQ,EAAYiQ,EAASrP,MAAM,KAAK,GAElCZ,GACF+P,EAAYpP,KAAK,CACfX,YACAwM,YAAY,UAAAK,EAAOoD,UAAP,eAAkBzD,YAAa3K,WAAWgL,EAAOoD,GAAUzD,YAAc,EACrFgB,SAAU,OAMhBtO,OAAOC,KAAK0N,GAAQmD,SAAQ,SAACC,GAC3B,IAAMjQ,EAAYiQ,EAASrP,MAAM,KAAK,GAEtC,GAAIZ,EAAW,CACb,IAAMkQ,EAAkBH,EAAYI,WAAU,SAACC,GAAD,OAAgBA,EAAWpQ,YAAcA,KACvF,GAAIkQ,GAAmB,EAAG,CAAC,IAAD,IAChB1D,EAAeuD,EAAYG,GAA3B1D,WACRuD,EAAYG,GAAiB1C,SAAW3L,WAAU,oBAACgL,EAAOoD,UAAR,aAAC,EAAkBlE,gBAAnB,QAA+B,GAAKS,OAM5FuD,EAAYjP,MAAK,SAACvC,EAAGgC,GAAJ,OAAUM,SAAStC,EAAEyB,UAAW,IAAMa,SAASN,EAAEP,UAAW,OAEvEqQ,EAAmB,GAGhBC,EAAI,EAAGA,EAAIP,EAAYlR,OAAS,EAAGyR,IAC1CD,EAAiB1P,KAAK,CACpBmP,KAAMjO,WAAWkO,EAAYO,GAAGtQ,WAChCuQ,KAAMR,EAAYO,GAAG9C,SACrBgD,MAAOT,EAAYO,EAAI,GAAG9C,SAC1BiD,KAAMV,EAAYO,EAAI,GAAG9C,SACzBkD,IAAKX,EAAYO,GAAG9C,WApFA,yBAwFjB,CAAE/L,KAAM4O,EAAkBhR,OAAO,IAxFhB,yCA0FxBD,QAAQC,MAAR,+CAAsDgH,GAAtD,MA1FwB,kBA2FjB,CACLhH,OAAO,IA5Fe,0DAAH,0DAiGVsQ,MCxHTgB,GAAkBzQ,cAAH,mhBA8Bf0Q,GAAkB,uCAAG,WACzBvK,GADyB,eAAA9H,EAAA,+EAOJS,kBAA+BwC,IAAamP,GAAiB,CAC9EtK,UACA+B,UAAWrL,IATU,cAOjB0E,EAPiB,yBAWhB,CACLpC,OAAO,EACPuJ,UAAWnH,EAAKoP,SAASrK,OAAO/E,EAAKqP,UAAU/Q,KAAI,SAACuI,GAAD,OAAOA,EAAErE,QAbvC,uCAgBvB7E,QAAQC,MAAR,0CAAiDgH,GAAjD,MAhBuB,kBAiBhB,CACLhH,OAAO,IAlBc,yDAAH,sDAuBTuR,M,UC7BFG,GAAkB,WAC7B,IAAMrN,EAAyCsN,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAKC,SAASC,YAE9FC,EAAWC,eAMjB,MAAO,CAAC5N,EALsD6N,uBAC5D,SAAC9P,GAAD,OAAwB4P,EAASG,aAAmB,CAAE9N,aAAcjC,OACpE,CAAC4P,MAMQI,GAAuB,WAClC,IAAMC,EAAsCV,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAKC,SAASO,aAC3FL,EAAWC,eAKjB,MAAO,CAACI,EAJgDH,uBACtD,SAAC9P,GAAD,OAAwB4P,EAASM,aAAwB,CAAED,UAAWjQ,OACtE,CAAC4P,MAKQO,GAA0B,WACrC,IAAMC,EAA0Cb,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAKC,SAASU,gBAC/FR,EAAWC,eAKjB,MAAO,CAACO,EAJuDN,uBAC7D,SAACO,GAAD,OAAqCT,EAASU,aAA2B,CAAEF,aAAcC,OACzF,CAACT,MAOQW,GAAiB,WAG5B,OAAOhB,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAKpI,MAAMmJ,cAQ9CC,GAAiB,WAC5B,IAAMb,EAAWC,eACjB,OAAOC,uBAAY,SAAChI,GAAD,OAA6B8H,EAASc,aAAY,CAAE5I,qBAAmB,CAAC8H,KAGhFtH,GAAe,SAACR,GAC3B,IAAM6I,EAAcJ,KACdK,EAAiBH,KAEjBI,EAAqB/I,EAAc7C,QAAO,SAACC,EAAiBN,GAIhE,OAHKnH,OAAOC,KAAKiT,GAAajL,SAASd,IACrCM,EAAMhG,KAAK0F,GAENM,IACN,IAcH,OAZAxF,qBAAU,WACJmR,GACFD,EAAeC,KAEhB,CAACD,EAAgBC,IAEE/I,EACnBxJ,KAAI,SAACsG,GAAa,IAAD,EAChB,iBAAO+L,EAAY/L,UAAnB,aAAO,EAAsB5E,QAE9B8Q,QAAO,SAACC,GAAD,OAAUA,MAsDTC,GAAkB,WAG7B,OAAOzB,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAK/E,OAAO8F,cAa/CS,GAAkB,WAC7B,IAAMrB,EAAWC,eACjB,OAAOC,uBAAY,SAAClF,GAAD,OAA8BgF,EAASsB,aAAa,CAAEtG,sBAAoB,CAACgF,KAGnFuB,GAAgB,SAAChK,GAC5B,IAAMiK,EAAeJ,KACfK,EAAkBJ,KAoBxB,OAjBS,OAAT9J,QAAS,IAATA,KAAWoH,SAAQ,SAACzR,GACbsU,EAAatU,IAChBuU,EAAgB,CAACvU,OAIEwU,mBAAQ,WAC7B,GAAKnK,EAGL,OAAOA,EACJ7I,KAAI,SAACxB,GAAO,IAAD,EACV,iBAAOsU,EAAatU,UAApB,aAAO,EAAiBkD,QAEzB8Q,QAAO,SAACS,GAAD,OAAWA,OACpB,CAACpK,EAAWiK,KCjLJI,GAA4B,WACvC,MAAwClC,KAAxC,mBAAOrN,EAAP,KAAqBwP,EAArB,KACA,EAA6ClR,IAA/BmR,EAAd,EAAQ1R,KAA2BpC,EAAnC,EAAmCA,MAEnC,EAAqCoS,KAArC,mBAAOC,EAAP,KAAkB0B,EAAlB,KACA,EAAsD1L,KAAxC2L,EAAd,EAAQ5R,KAA+B6R,EAAvC,EAAgCjU,MAEhC,EAA2CuS,KAA3C,mBAAOC,EAAP,KAAqB0B,EAArB,KA4BA,OAzBApS,qBAAU,gBACasB,IAAjBiB,GAA8ByP,IAAwB9T,GACxD6T,EAAgBC,KAEjB,CAAC9T,EAAO8T,EAAqBzP,EAAcwP,IAG9C/R,qBAAU,gBACUsB,IAAdiP,GAA2B2B,IAAqBC,GAClDF,EAAgBC,KAEjB,CAAC3B,EAAW4B,EAAYD,EAAkBD,IAE7CjS,qBAAU,WACR,IAAMqB,EAAK,uCAAG,4BAAAjE,EAAA,sEACOuJ,KADP,QACNrG,EADM,SAGV8R,EAAmB9R,GAHT,2CAAH,qDAMNoQ,GACHrP,MAED,CAACqP,EAAc0B,IAEX,MAGIC,GAAwB,WACnC,IAAMC,EDYyB,WAC/B,IAAMpC,EAAWC,eACjB,OAAOC,uBAAY,SAACzI,GAAD,OAAuBuI,EAASoC,aAAe,CAAE3K,aAAW,CAACuI,ICdzDqC,GACjBvB,EAAcD,KAEdE,EAAcJ,KACdpJ,EAAYL,KAGlBpH,qBAAU,WACJyH,EAAU/J,OAAS,GACrBsT,EAAYvJ,KAEb,CAACuJ,EAAavJ,IAGjB,IAAM+K,EAAyBZ,mBAAQ,WACrC,OAAO7T,OAAOC,KAAKiT,GAAa1L,QAAO,SAACC,EAAiBN,GAKvD,OAJiB+L,EAAY/L,GACf5E,MACZkF,EAAMhG,KAAK0F,GAENM,IACN,MACF,CAACyL,IAGJ,EAAkDrI,GAAa4J,GAAhDC,EAAf,EAAQvU,MAA4BwU,EAApC,EAA8BpS,KAO9B,OANAN,qBAAU,WACJ0S,IAAcD,GAChBH,EAAevU,OAAOmI,OAAOwM,MAE9B,CAACD,EAAeC,EAAWJ,IAEvB,MAGIK,GAAe,WAC1B,IAAMC,EDmE0B,WAChC,IAAM1C,EAAWC,eACjB,OAAOC,uBACL,SAACpF,GACCkF,EAAS2C,aAAgB,CAAE7H,cAE7B,CAACkF,ICzEsB4C,GACnBtB,EAAeD,KAEfG,EAAeJ,KACf7J,EAAYqF,KAGlB9M,qBAAU,WACJyH,EAAU/J,OAAS,GACrB8T,EAAa/J,KAEd,CAAC+J,EAAc/J,IAGlB,IAAMsL,EAA0BnB,mBAAQ,WACtC,OAAO7T,OAAOC,KAAK0T,GAAcnM,QAAO,SAACC,EAAiBjG,GAKxD,OAJkBmS,EAAanS,GAChBe,MACbkF,EAAMhG,KAAKD,GAENiG,IACN,MACF,CAACkM,IAGJ,EAAoDjG,GAAqBsH,GAA1DC,EAAf,EAAQ9U,MAA6B+U,EAArC,EAA+B3S,KAO/B,OANAN,qBAAU,WACJiT,IAAeD,GACjBJ,EAAiB7U,OAAOmI,OAAO+M,MAEhC,CAACD,EAAgBC,EAAYL,IAEzB,M,4CCxHHM,GAAenU,cAAH,meAcZoU,GAAcpU,cAAH,qTA6BXqU,GAAS,SAACC,GACd,IAAMC,EAAMD,EACT9N,QAAO,SAACgO,EAAUC,GAAX,6BAAqCD,GAArC,aAAkDC,MAAoB,IAC7E5U,KAAI,SAAC6U,GAAD,OAAYA,EAAO3Q,MAC1B,OAAO4Q,MAAMtP,KAAK,IAAIuP,IAAIL,KAsFbM,GAnFe,SAC5BC,GAQA,MAA0ChU,mBAAS,CACjDmL,OAAQ,GACRrD,MAAO,GACPmM,SAAS,EACT5V,OAAO,IAJT,mBAAO6V,EAAP,KAAsBC,EAAtB,KAOMC,EAAuBJ,EAAanW,OtBzEH,EsB4EvCsC,qBAAU,WACRgU,EAAiB,CACfhJ,OAAQ,GACRrD,MAAO,GACPmM,SAAUG,EACV/V,OAAO,MAER,CAAC2V,EAAcI,IAElBjU,qBAAU,WACR,IAAMkU,EAAM,uCAAG,gCAAA9W,EAAA,+EAEUS,kBAA6BwC,IAAa6S,GAAc,CAC3E9P,OAAQyQ,EAAaM,cAErB7J,KAAMuJ,EAAaO,OAAO,GAAGD,cAAgBN,EAAajW,MAAM,GAChEkF,GAAI+Q,EAAaQ,gBANR,cAELrJ,EAFK,OAQLsJ,EAAWlB,GAAO,CAACpI,EAAOuJ,UAAWvJ,EAAOwJ,SAAUxJ,EAAOyJ,SARxD,SASS5W,kBAA4BwC,IAAa8S,GAAa,CACxEnI,OAAQsJ,EACRxR,GAAI+Q,EAAaQ,gBAXR,OASL1M,EATK,OAaXqM,EAAiB,CACfhJ,OAAQsJ,EACR3M,MAAOyL,GAAO,CAACzL,EAAM4M,UAAW5M,EAAM+M,IAAK/M,EAAMgN,MACjDb,SAAS,EACT5V,OAAO,IAjBE,kDAoBXD,QAAQC,MAAR,4BAAmC2V,GAAnC,MACAG,EAAiB,CACfhJ,OAAQ,GACRrD,MAAO,GACPmM,SAAS,EACT5V,OAAO,IAzBE,0DAAH,qDA6BP+V,GACHC,MAED,CAACL,EAAcI,IAKlB,IAAMW,EAAiBnD,GAAcsC,EAAc/I,QAC7C6J,EAAgBjM,GAAamL,EAAcpM,OAOjD,MAAO,CACLqD,OAAQ4J,EACRjN,MAAOkN,EACPC,cANoBF,EAAelX,SAAWqW,EAAc/I,OAAOtN,QAAUqW,EAAcD,QAO3FiB,aANmBF,EAAcnX,SAAWqW,EAAcpM,MAAMjK,QAAUqW,EAAcD,QAOxF5V,MAAO6V,EAAc7V,Q,kCCrInB8W,GAAqB,GAgCZC,GAtB+B,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,IAAQC,EAAW,mBACvE,EAAoBvV,mBAAS,GAApBwV,EAAT,oBAEMC,EAAmBN,GAAShP,SAASkP,GAE3C,OAAIA,IAAQI,EAER,gDACMF,GADN,IAEED,IAAKA,EACLD,IAAKA,EACLK,QAAS,WACHL,GAAKF,GAASxV,KAAK0V,GACvBG,GAAQ,SAAClG,GAAD,OAAOA,EAAI,SAMpB,eAAC,KAAD,eAAciG,K,sBC3BjBI,GAAaC,aAAOR,GAAPQ,CAAH,+KACL,qBAAGC,QACF,qBAAGA,QACI,qBAAGA,QAEA,qBAAGC,MAAkBC,OAAOC,cACvC,qBAAGF,MAAkBC,OAAOE,QAG1BC,GAGR,SAAC,GAAyC,IAAvC7Q,EAAsC,EAAtCA,QAAsC,IAA7BwQ,YAA6B,MAAtB,OAAsB,EAAXN,EAAW,mBACtCF,EAAMtD,mBAAQ,WAClB,IAAMoE,EAAqBC,aAAU/Q,GACrC,OAAI8Q,EACI,GAAN,OAAUE,wBAAV,0BAA0DF,EAA1D,QAEK,OACN,CAAC9Q,IAEJ,OAAO,eAACsQ,GAAD,aAAYE,KAAMA,EAAMR,IAAKA,EAAKC,IAAI,cAAiBC,KAG1De,GAAwBV,KAAOW,IAAV,uIAcdC,GAAwD,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,SAA0B,IAAhBb,YAAgB,MAAT,GAAS,EAC1G,OACE,gBAACS,GAAD,WACGG,GAAY,eAAC,GAAD,CAAcpR,QAASoR,EAAUZ,KAAI,UAAKA,EAAKzP,WAAV,QACjDsQ,GAAY,eAAC,GAAD,CAAcrR,QAASqR,EAAUb,KAAI,UAAKA,EAAKzP,WAAV,Y,sBC5B3CuQ,GAAe,SAC1BC,EACAC,GAOA,MAA8EA,GAAW,CAAEC,SAAU,WAArG,IAAQA,gBAAR,MAAmB,UAAnB,EAA8BC,EAA9B,EAA8BA,iBAAkBC,EAAhD,EAAgDA,eAAgBC,EAAhE,EAAgEA,UAChE,GAAe,IAAXL,EACF,OAAIK,EACK,IAEF,OAET,IAAKL,EAAQ,MAAO,IACpB,GAAIG,GAAoBH,EAASG,EAC/B,MAAM,IAAN,OAAWA,GAEb,GAAIH,EAAS,IAAMI,EACjB,OAAoCJ,EAjCzB9Q,QAAQ,GAAGoR,MAAM,sBAAsB,GAoCpD,IAAIC,EAAY,EACZH,IACFG,EAAYP,EAAS,EAAI,EAAI,GAG/B,IAAIQ,EAAM,YAAQ,IAAIC,OAAOF,GAAnB,KAEO,aAAbL,IACFM,EAAM,cAAU,IAAIC,OAAOF,KAGzBF,GAAaL,EAAS,MACxBQ,EAAS,KAGX,IAAME,EAAsBzW,WAAW+V,EAAO9Q,QAAQqR,IAGtD,OAAOI,KAAQD,GAAqBF,OAAOA,GAAQ9C,e,8BCxD/CkD,GAAY5B,KAAOW,IAAV,8JAuBAkB,GAbgE,SAAC,GAA+B,IAAD,IAA5BC,YAA4B,SAAXnC,EAAW,mBACpGO,EAAU6B,eAAV7B,MACR,OACE,eAAC0B,GAAD,2BAAejC,GAAf,aACGmC,EACC,eAAC,MAAD,CAAcE,OAAQ9B,EAAMC,OAAO8B,QAASC,MAAOhC,EAAMC,OAAO8B,UAEhE,eAAC,MAAD,CAAcD,OAAQ9B,EAAMC,OAAOgC,mB,UCPrCC,GAAYpC,KAAOW,IAAV,qFAMT0B,GAAcrC,aAAOsC,KAAPtC,CAAH,kFAMXuC,GAAOvC,KAAOW,IAAV,upBAYM,qBAAGT,MAAkBC,OAAOC,cAI/B,qBAAGoC,MAAmB,UACb,qBAAGtC,MAAkBC,OAAOsC,aAE9C,qBAAGvC,MAAkBwC,aAAaC,MAKlC,qBAAGzC,MAAkBwC,aAAaE,MAOhCC,GAAW7C,KAAOW,IAAV,gLAWRmC,GAAiB9C,KAAOW,IAAV,2MAMhB,qBAAGT,MAAkBwC,aAAaC,MAKhCI,GAAQ/C,KAAOW,IAAV,2GAEW,qBAAGT,MAAkBC,OAAO6C,cAK5CC,GAAYjD,KAAOW,IAAV,6IACJ,qBAAGT,MAAkBC,OAAOsC,aAC1B,qBAAGD,KAAmB,OAAS,WAQtCU,GAAelD,KAAOW,IAAV,wFAOZwC,GAAenD,KAAOW,IAAV,0UAUI,gBAAGT,EAAH,EAAGA,MAAH,SAAUkD,QAAyBlD,EAAMC,OAAOkD,QAAU,iBACrE,gBAAGnD,EAAH,EAAGA,MAAH,SAAUkD,QAAyBlD,EAAMoD,KAAKlD,WAAaF,EAAMC,OAAOsC,aAW7Ec,GAA0B,SAACnH,EAAuBoH,GACtD,OACEpH,EAAM3M,QAAQmP,cAAcrO,SAASiT,EAAM5E,gBAC3CxC,EAAMzO,OAAOiR,cAAcrO,SAASiT,EAAM5E,gBAC1CxC,EAAMvH,KAAK+J,cAAcrO,SAASiT,EAAM5E,gBAwR7B6E,GA5QA,WACb,IAAMC,EAAUC,cAChB,EAAuBC,gBAAfC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KACN1M,EAAM2M,eAAN3M,EAEF4M,EAAWC,iBAAyB,MACpCC,EAAUD,iBAAuB,MACjCE,EAAcF,iBAAuB,MAE3C,EAAgC7Z,oBAAS,GAAzC,mBAAOga,EAAP,KAAiBC,EAAjB,KACA,EAA0Bja,mBAAS,IAAnC,mBAAOoZ,EAAP,KAAcc,EAAd,KACMC,EAAsBC,aAAYhB,EAAO,KAE/C,EAA8DrF,GAAsBoG,GAA5EhP,EAAR,EAAQA,OAAQrD,EAAhB,EAAgBA,MAAOmN,EAAvB,EAAuBA,cAAeC,EAAtC,EAAsCA,aAAc7W,EAApD,EAAoDA,MAEpD,EAAsC2B,mBAAS,GAA/C,mBAAOqa,EAAP,KAAoBC,EAApB,KACA,EAAoCta,mBAAS,GAA7C,mBAAOua,EAAP,KAAmBC,EAAnB,KAEAra,qBAAU,WACRma,EAAe,GACfE,EAAc,KACb,CAACL,IAEJ,IAAMM,EAAqB,SAACC,GAC1B,IAAMC,EAAYb,EAAQ7P,SAAW6P,EAAQ7P,QAAQ2Q,SAASF,EAAEG,QAC1DC,EAAalB,EAAS3P,SAAW2P,EAAS3P,QAAQ2Q,SAASF,EAAEG,QAC7DE,EAAgBhB,EAAY9P,SAAW8P,EAAY9P,QAAQ2Q,SAASF,EAAEG,QAEvEF,GAAcG,GAAeC,IAChCP,EAAc,GACdF,EAAe,GACfL,GAAY,KAIhB9Z,qBAAU,WASR,OARI6Z,GACFgB,SAASC,iBAAiB,QAASR,GACnCO,SAASE,cAAc,QAAQC,MAAMC,SAAW,WAEhDJ,SAASK,oBAAoB,QAASZ,GACtCO,SAASE,cAAc,QAAQC,MAAMC,SAAW,WAG3C,WACLJ,SAASK,oBAAoB,QAASZ,GACtCO,SAASE,cAAc,QAAQC,MAAMC,SAAW,aAEjD,CAACpB,IAGJ,MAAqCsB,eAArC,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAmCC,eAAnC,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAkB,SAACzY,GACvB8W,GAAY,GACZO,EAAc,GACdF,EAAe,GACfhB,EAAQ3Z,KAAKwD,IAIT0Y,EAAqBjK,GAAc2J,GACnCO,EAAwBD,EAAmBhe,SAAW0d,EAAY1d,OAClEke,EAAoBhT,GAAa2S,GACjCM,EAAuBD,EAAkBle,SAAW6d,EAAW7d,OAGrE,EAA0CmC,oBAAS,GAAnD,mBAAOic,EAAP,KAAsBC,EAAtB,KACMC,EAAgBpK,mBAAQ,WAC5B,OAAIkK,EACKJ,EAAmBtK,QAAO,SAACS,GAAD,OAAWmH,GAAwBnH,EAAOoH,MAEtEjO,EAAOrL,MAAK,SAACsc,EAAIC,GAAL,OAAaD,EAAG1f,UAAY2f,EAAG3f,WAAa,EAAI,OAClE,CAACuf,EAAe9Q,EAAQ0Q,EAAoBzC,IAEzCkD,EAAcvK,mBAAQ,WAC1B,OAAIkK,EACKF,EAAkBxK,QAAO,SAACC,GAAD,OAtFP,SAACA,EAAgB4H,GAC9C,OACE5H,EAAKnM,QAAQmP,cAAcrO,SAASiT,EAAM5E,gBAC1C2E,GAAwB3H,EAAKlO,OAAQ8V,IACrCD,GAAwB3H,EAAK/N,OAAQ2V,GAkFOmD,CAAuB/K,EAAM4H,MAElEtR,EAAMhI,MAAK,SAAC0c,EAAIC,GAAL,OAAaD,EAAG9f,UAAY+f,EAAG/f,WAAa,EAAI,OACjE,CAACoL,EAAOmU,EAAeF,EAAmB3C,IAsC7C,OACE,uCACGY,EAAW,eAACvB,GAAD,IAAe,KAC3B,gBAACT,GAAD,WACE,eAACC,GAAD,CACEnV,KAAK,OACLsW,MAAOA,EACPsD,SAAU,SAAChC,GACTR,EAASQ,EAAEG,OAAOzB,QAEpBuD,YAAa3P,EAAE,0BACf4P,IAAKhD,EACLiD,QAAS,WACP5C,GAAY,MAGhB,gBAAC9B,GAAD,CAAMC,MAAO4B,EAAU4C,IAAK9C,EAA5B,UACE,gBAAC,KAAD,CAAMgD,GAAG,OAAT,UACE,eAAC/D,GAAD,CAAcC,SAAUiD,EAAec,QAAS,kBAAMb,GAAiB,IAAvE,SACGlP,EAAE,YAEL,eAAC+L,GAAD,CAAcC,QAASiD,EAAec,QAAS,kBAAMb,GAAiB,IAAtE,SACGlP,EAAE,kBAGN3O,GAAS,eAAC,MAAD,CAAMyZ,MAAM,UAAZ,SAAuB9K,EAAE,sCAEnC,gBAAC0L,GAAD,WACE,eAAC,MAAD,CAAMsE,MAAI,EAAClF,MAAM,YAAjB,SACG9K,EAAE,aAEHyM,IAASC,GACT,eAAC,MAAD,CAAMuD,UAAU,MAAMC,SAAS,OAA/B,SACGlQ,EAAE,YAGLyM,IAASC,GACT,eAAC,MAAD,CAAMuD,UAAU,MAAMC,SAAS,OAA/B,SACGlQ,EAAE,iBAGLyM,IAASC,GACT,eAAC,MAAD,CAAMuD,UAAU,MAAMC,SAAS,OAA/B,SACGlQ,EAAE,kBAIRmP,EAAcpe,MAAM,EAAGsc,GAAatb,KAAI,SAACiT,EAAO1C,GAC/C,OAEE,cADA,CACCwJ,GAAD,CAAciE,QAAS,kBAAMnB,EAAgB,eAAD,OAAgB5J,EAAM3M,WAAlE,SACE,gBAACqT,GAAD,WACE,gBAAC,KAAD,WACE,eAAC,GAAD,CAAcrT,QAAS2M,EAAM3M,UAC7B,eAAC,MAAD,CAAM8X,GAAG,OAAT,SACE,eAAC,MAAD,oBAAUnL,EAAMvH,KAAhB,aAAyBuH,EAAMzO,OAA/B,SAEF,eAAC,GAAD,CACEN,GAAG,iBACHkY,MAAO,CAAEiC,WAAY,OACrB1F,KAAM6D,EAAYpV,SAAS6L,EAAM3M,SACjC0X,QAAS,SAACrC,GACRA,EAAE2C,kBACF7B,EAAcxJ,EAAM3M,gBAIxBoU,IAASC,GAAQ,gBAAC,MAAD,CAAMuD,UAAU,MAAhB,cAAwBtG,GAAa3E,EAAMxF,cAC5DiN,IAASC,GAAQ,gBAAC,MAAD,CAAMuD,UAAU,MAAhB,cAAwBtG,GAAa3E,EAAMtV,eAC5D+c,IAASC,GAAQ,gBAAC,MAAD,CAAMuD,UAAU,MAAhB,cAAwBtG,GAAa3E,EAAMpV,qBAnBiB0S,MAtFjE,WAC5B,IAAMgO,EAAYrB,EAAgBH,EAAwB7G,EACpDsI,EACqB,IAAzBpB,EAActe,SAAiByf,GAAanD,EAAoBtc,Q3BpO7B,E2BqO/B2f,EAA6C,IAAzBrB,EAActe,SAAiByf,EACnDG,EAAcxB,EAAgBuB,EAAoBD,EAClDG,EAAkC1Q,EAAhBiP,EAAkB,gCAAqC,cAC/E,OACE,uCACGqB,GAAa,eAAC,MAAD,IACbG,GAAe,eAAC,MAAD,UAAOC,KACrBzB,GAAiB9B,EAAoBtc,O3B5ON,G2B6O/B,eAAC,MAAD,UAAOmP,EAAE,+BAkGR2Q,GACD,eAAC9E,GAAD,CACEkE,QAAS,WACPzC,EAAeD,EAAc,IAE/BjC,KAAM+D,EAActe,QAAUwc,EAC9BuC,IAAK7C,EALP,SAOG/M,EAAE,iBAGL,eAAC2L,GAAD,IACA,gBAACD,GAAD,WACE,eAAC,MAAD,CAAMsE,MAAI,EAAClF,MAAM,YAAYgF,GAAG,MAAhC,oBAGErD,IAASC,GACT,eAAC,MAAD,CAAMuD,UAAU,MAAMC,SAAS,OAA/B,SACGlQ,EAAE,iBAGLyM,IAASC,GACT,eAAC,MAAD,CAAMuD,UAAU,MAAMC,SAAS,OAA/B,SACGlQ,EAAE,gBAGLyM,IAASC,GACT,eAAC,MAAD,CAAMuD,UAAU,MAAMC,SAAS,OAA/B,SACGlQ,EAAE,kBAIRsP,EAAYve,MAAM,EAAGwc,GAAYxb,KAAI,SAACuI,EAAGgI,GACxC,OAEE,cADA,CACCwJ,GAAD,CAAciE,QAAS,kBAAMnB,EAAgB,cAAD,OAAetU,EAAEjC,WAA7D,SACE,gBAACqT,GAAD,WACE,gBAAC,KAAD,WACE,eAAC,GAAD,CAAoBjC,SAAUnP,EAAEhE,OAAO+B,QAASqR,SAAUpP,EAAE7D,OAAO4B,UACnE,eAAC,MAAD,CAAM8X,GAAG,OAAOhC,MAAO,CAAEyC,WAAY,UAArC,SACE,eAAC,MAAD,oBAAUtW,EAAEhE,OAAOC,OAAnB,cAA+B+D,EAAE7D,OAAOF,YAE1C,eAAC,GAAD,CACEN,GAAG,iBACHkY,MAAO,CAAEiC,WAAY,QACrB1F,KAAMgE,EAAWvV,SAASmB,EAAEjC,SAC5B0X,QAAS,SAACrC,GACRA,EAAE2C,kBACF1B,EAAarU,EAAEjC,gBAInBoU,IAASC,GAAQ,gBAAC,MAAD,CAAMuD,UAAU,MAAhB,cAAwBtG,GAAarP,EAAE5K,eACxD+c,IAASC,GAAQ,gBAAC,MAAD,CAAMuD,UAAU,MAAhB,cAAwBtG,GAAarP,EAAE3K,mBACxD8c,IAASC,GAAQ,gBAAC,MAAD,CAAMuD,UAAU,MAAhB,cAAwBtG,GAAarP,EAAE1K,qBAnBgB0S,MA/H7D,WAC3B,IAAMgO,EAAYrB,EAAgBD,EAAuB9G,EACnD2I,EACmB,IAAvBvB,EAAYze,SAAiBqX,GAAgBiF,EAAoBtc,Q3BtP9B,E2BuP/BigB,EAA0C,IAAvBxB,EAAYze,SAAiByf,EAChDG,EAAcxB,EAAgB6B,EAAmBD,EACjDE,EAAiC/Q,EAAhBiP,EAAkB,gCAAqC,cAC9E,OACE,uCACGqB,GAAa,eAAC,MAAD,IACbG,GAAe,eAAC,MAAD,UAAOM,KACrB9B,GAAiB9B,EAAoBtc,O3B9PN,G2B+P/B,eAAC,MAAD,UAAOmP,EAAE,+BA2IRgR,GACD,eAACnF,GAAD,CACEkE,QAAS,WACPvC,EAAcD,EAAa,IAE7BnC,KAAMkE,EAAYze,QAAU0c,EAC5BqC,IAAK7C,EALP,SAOG/M,EAAE,2BC3YTiR,GAAarI,aAAOsI,KAAPtI,CAAH,gNACA,qBAAGE,MAAkBC,OAAOoI,UAAUC,cAKlD,qBAAGtI,MAAkBwC,aAAaC,MAuCvB8F,GAjCC,WACd,IAAQrR,EAAM2M,eAAN3M,EAGJsR,EAAc,EAOlB,OATgBC,YAAc,CAAC,cAAe,aAAc,iBAI1DD,EAAc,GAHCC,YAAc,CAAC,eAAgB,kBAM9CD,EAAc,GAGd,gBAACL,GAAD,WACE,eAAC,KAAD,UACE,gBAAC,KAAD,CAAYK,YAAaA,EAAaE,MAAM,KAAKC,QAAQ,UAAzD,UACE,eAAC,KAAD,CAAgBC,GAAIC,KAAMxb,GAAG,QAA7B,SACG6J,EAAE,cAEL,eAAC,KAAD,CAAgB0R,GAAIC,KAAMxb,GAAG,cAA7B,SACG6J,EAAE,WAEL,eAAC,KAAD,CAAgB0R,GAAIC,KAAMxb,GAAG,eAA7B,SACG6J,EAAE,iBAIT,eAAC,KAAD,CAAK4R,MAAO,CAAC,OAAQ,OAAQ,SAA7B,SACE,eAAC,GAAD,U,kGCaOC,GAxDgC,SAACC,GAC9C,OACE,gBAAC,MAAD,yBAAKF,MAAM,OAAOG,OAAO,OAAOC,oBAAoB,OAAOC,QAAQ,cAAiBH,GAApF,cACE,uBACEI,EAAE,wdACFtH,OAAO,UACPuH,YAAY,MACZC,gBAAgB,MAChBC,iBAAiB,MACjB3H,KAAK,cACL4H,QAAQ,MACR/N,OAAO,aART,SAUE,0BACEtO,GAAG,YACHsc,cAAc,oBACdC,IAAI,KACJjb,KAAK,MACLpB,GAAG,OACHsc,MAAM,4BAGV,uBACEP,EAAE,wdACFtH,OAAO,UACPuH,YAAY,MACZC,gBAAgB,MAChBC,iBAAiB,MACjB3H,KAAK,cACL4H,QAAQ,MACR/N,OAAO,aART,SAUE,0BACEtO,GAAG,aACHsc,cAAc,oBACdC,IAAI,KACJjb,KAAK,MACLpB,GAAG,OACHsc,MAAM,+BAGV,gCACE,0BAAQxc,GAAG,OAAX,UACE,iCAAgByc,UAAU,OAAOzhB,OAAO,cAAc0hB,aAAa,MACnE,qCACE,8BAAaC,GAAG,gBAChB,8BAAaA,GAAG,gBAChB,8BAAaA,GAAG,gBAChB,8BAAaA,GAAG,+BCmIbC,GAnL+B,SAACf,GAC7C,OACE,gBAAC,MAAD,yBAAKF,MAAM,OAAOG,OAAO,OAAOE,QAAQ,YAAYD,oBAAoB,OAAOM,QAAQ,OAAUR,GAAjG,cACE,wBAAMF,MAAM,KAAKlH,KAAK,UAAtB,UACE,0BACE6H,cAAc,SACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,aACZN,MAAM,UAER,0BACEF,cAAc,IACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,aACZN,MAAM,aAGV,wBAAMO,EAAE,UAAUpB,MAAM,KAAKlH,KAAK,UAAlC,UACE,0BACE6H,cAAc,SACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,aACZN,MAAM,UAER,0BACEF,cAAc,IACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,aACZN,MAAM,aAGV,wBAAMO,EAAE,UAAUpB,MAAM,KAAKlH,KAAK,UAAlC,UACE,0BACE6H,cAAc,SACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,aACZN,MAAM,UAER,0BACEF,cAAc,IACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,aACZN,MAAM,aAGV,wBAAMO,EAAE,UAAUpB,MAAM,KAAKlH,KAAK,UAAlC,UACE,0BACE6H,cAAc,SACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,aACZN,MAAM,UAER,0BACEF,cAAc,IACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,aACZN,MAAM,aAGV,wBAAMO,EAAE,UAAUpB,MAAM,KAAKlH,KAAK,UAAlC,UACE,0BACE6H,cAAc,SACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,aACZN,MAAM,UAER,0BACEF,cAAc,IACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,aACZN,MAAM,aAGV,wBAAMO,EAAE,SAASpB,MAAM,KAAKlH,KAAK,UAAjC,UACE,0BACE6H,cAAc,SACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,aACZN,MAAM,UAER,0BACEF,cAAc,IACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,aACZN,MAAM,aAGV,wBAAMO,EAAE,UAAUpB,MAAM,KAAKlH,KAAK,UAAlC,UACE,0BACE6H,cAAc,SACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,aACZN,MAAM,UAER,0BACEF,cAAc,IACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,aACZN,MAAM,aAGV,wBAAMO,EAAE,UAAUpB,MAAM,KAAKlH,KAAK,UAAlC,UACE,0BACE6H,cAAc,SACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,aACZN,MAAM,UAER,0BACEF,cAAc,IACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,aACZN,MAAM,aAGV,wBAAMO,EAAE,UAAUpB,MAAM,KAAKlH,KAAK,UAAlC,UACE,0BACE6H,cAAc,SACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,aACZN,MAAM,UAER,0BACEF,cAAc,IACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,aACZN,MAAM,aAGV,wBAAMO,EAAE,UAAUpB,MAAM,KAAKlH,KAAK,UAAlC,UACE,0BACE6H,cAAc,SACdC,IAAI,OACJnZ,OAAO,gBACPyZ,SAAS,aACTC,YAAY,eAEd,0BAASR,cAAc,IAAIC,IAAI,OAAOnZ,OAAO,gBAAgByZ,SAAS,aAAaC,YAAY,uBChBxFE,GA7JkC,SAACnB,GAChD,OACE,gBAAC,MAAD,yBAAKF,MAAM,OAAOG,OAAO,OAAOE,QAAQ,aAAaK,QAAQ,OAAUR,GAAvE,cACE,wBAAMF,MAAM,KAAKlH,KAAK,UAAtB,UACE,0BACE6H,cAAc,SACdC,IAAI,KACJnZ,OAAO,yBACPyZ,SAAS,0BACTC,YAAY,eAEd,0BACER,cAAc,IACdC,IAAI,KACJjb,KAAK,MACLpB,GAAG,MACHkD,OAAO,0BACPyZ,SAAS,0BACTC,YAAY,eAEd,0BACER,cAAc,KACdC,IAAI,KACJnZ,OAAO,sBACPyZ,SAAS,mBACTC,YAAY,eAEd,0BACER,cAAc,IACdC,IAAI,KACJnZ,OAAO,8BACPyZ,SAAS,iBACTC,YAAY,eAEd,0BACER,cAAc,UACdC,IAAI,KACJnZ,OAAO,cACPyZ,SAAS,kBACTC,YAAY,kBAGhB,wBAAMnB,MAAM,KAAKlH,KAAK,UAAtB,UACE,0BACE6H,cAAc,SACdC,IAAI,KACJnZ,OAAO,6BACPyZ,SAAS,gCACTC,YAAY,eAEd,0BACER,cAAc,IACdC,IAAI,KACJnZ,OAAO,6BACPyZ,SAAS,gCACTC,YAAY,eAEd,0BACER,cAAc,KACdC,IAAI,KACJnZ,OAAO,sBACPyZ,SAAS,mBACTC,YAAY,eAEd,0BACER,cAAc,IACdC,IAAI,KACJnZ,OAAO,8BACPyZ,SAAS,iBACTC,YAAY,eAEd,0BACER,cAAc,UACdC,IAAI,KACJnZ,OAAO,cACPyZ,SAAS,kBACTC,YAAY,kBAGhB,wBAAMnB,MAAM,KAAKlH,KAAK,UAAtB,UACE,0BACE6H,cAAc,SACdC,IAAI,KACJnZ,OAAO,6BACPyZ,SAAS,gCACTC,YAAY,eAEd,0BACER,cAAc,IACdC,IAAI,KACJnZ,OAAO,+BACPyZ,SAAS,gCACTC,YAAY,eAEd,0BACER,cAAc,KACdC,IAAI,KACJnZ,OAAO,sBACPyZ,SAAS,mBACTC,YAAY,eAEd,0BACER,cAAc,IACdC,IAAI,KACJnZ,OAAO,8BACPyZ,SAAS,iBACTC,YAAY,eAEd,0BACER,cAAc,UACdC,IAAI,KACJnZ,OAAO,cACPyZ,SAAS,kBACTC,YAAY,kBAGhB,wBAAMnB,MAAM,KAAKlH,KAAK,UAAtB,UACE,0BACE6H,cAAc,SACdC,IAAI,KACJnZ,OAAO,6BACPyZ,SAAS,+BACTC,YAAY,eAEd,0BACER,cAAc,IACdC,IAAI,KACJnZ,OAAO,6BACPyZ,SAAS,+BACTC,YAAY,eAEd,0BACER,cAAc,KACdC,IAAI,KACJnZ,OAAO,sBACPyZ,SAAS,mBACTC,YAAY,eAEd,0BACER,cAAc,IACdC,IAAI,KACJnZ,OAAO,8BACPyZ,SAAS,iBACTC,YAAY,eAEd,0BACER,cAAc,UACdC,IAAI,KACJnZ,OAAO,cACPyZ,SAAS,kBACTC,YAAY,uBCjJhBG,GAActK,aAAOuK,KAAPvK,CAAH,+JAUXwK,GAAmBxK,aAAOuK,KAAPvK,CAAH,sEAKTyK,GAA2B,WACtC,IAAQrT,EAAM2M,eAAN3M,EACR,OACE,gBAACoT,GAAD,WACE,eAAC,GAAD,IACA,eAACF,GAAD,UACE,eAAC,MAAD,CAAMpI,MAAM,aAAaoF,SAAS,OAAlC,SACGlQ,EAAE,iCAOAsT,GAA4B,WACvC,IAAQtT,EAAM2M,eAAN3M,EACR,OACE,gBAACoT,GAAD,WACE,eAAC,GAAD,IACA,eAACF,GAAD,UACE,eAAC,MAAD,CAAMpI,MAAM,aAAaoF,SAAS,OAAlC,SACGlQ,EAAE,iCAOAuT,GAA8B,WACzC,IAAQvT,EAAM2M,eAAN3M,EACR,OACE,gBAACoT,GAAD,WACE,eAAC,GAAD,IACA,eAACF,GAAD,UACE,eAAC,MAAD,CAAMpI,MAAM,aAAaoF,SAAS,OAAlC,SACGlQ,EAAE,iCC3CPwT,GAAe,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aAM9C,OALAxgB,qBAAU,WACRugB,EAAcD,EAAQrH,OACtBuH,EAAavJ,mBAAOqJ,EAAQ3R,KAAM,kBACjC,CAAC2R,EAAQrH,MAAOqH,EAAQ3R,KAAM4R,EAAeC,IAEzC,MAiEMC,GA3DG,SAAC,GAA2D,IAAzDngB,EAAwD,EAAxDA,KAAMigB,EAAkD,EAAlDA,cAAeC,EAAmC,EAAnCA,aAChC7K,EAAU6B,eAAV7B,MACR,OAAKrV,GAAwB,IAAhBA,EAAK5C,OAIhB,eAACgjB,GAAA,EAAD,UACE,gBAACC,GAAA,EAAD,CACErgB,KAAMA,EACNme,MAAO,IACPG,OAAQ,IACRgC,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,GAEVC,aAAc,WACRT,GAAcA,OAAalf,GAC3Bif,GAAeA,OAAcjf,IAZrC,UAeE,eAAC4f,GAAA,EAAD,CACEC,QAAQ,OACRC,UAAU,EACVC,UAAU,EACVC,cAAe,SAAC3S,GAAD,OAAUsI,mBAAOtI,EAAM,OACtC4S,WAAY,KAEd,eAACC,GAAA,EAAD,CACEL,QAAQ,QACRM,UAAW,EACXpD,MAAM,SACN+C,UAAU,EACVC,UAAU,EACVtE,SAAS,OACTuE,cAAe,SAACI,GAAD,iBAAalL,GAAakL,KACzCC,YAAY,QACZC,KAAM,CAAEC,GAAI,GAAItK,KAAM5B,EAAMC,OAAOkM,cAErC,eAACC,GAAA,EAAD,CACEC,OAAQ,CAAEvK,OAAQ9B,EAAMC,OAAOkD,SAC/BmJ,aAAc,CAAEC,QAAS,QACzBC,UAAW,SAACC,EAAc9X,EAAMqU,GAArB,OACT,eAAC,GAAD,CAAc2B,QAAS3B,EAAM2B,QAASC,cAAeA,EAAeC,aAAcA,OAGtF,eAAC6B,GAAA,EAAD,CACElB,QAAQ,QACRxe,KAAK,WACL8U,OAAQ9B,EAAMC,OAAOkD,QACrBvB,KAAM5B,EAAMC,OAAO0M,UACnBtD,YAAa,SAjDZ,eAAC,GAAD,K,aCRIuD,GAfyB,SAAC,GAAwB,IAAtBtJ,EAAqB,EAArBA,MAAU7D,EAAW,mBAC9D,IAAK6D,GAASuJ,OAAOC,MAAMxJ,GACzB,OAAO,eAAC,MAAD,2BAAU7D,GAAV,oBAGT,IAAMsN,EAAazJ,EAAQ,EAE3B,OACE,gBAAC,MAAD,2BAAU7D,GAAV,IAAgBuC,MAAO+K,EAAa,UAAY,UAAhD,UACGA,EAAa,SAAM,SACnBC,KAAKC,IAAI3J,GAAOtT,QAAQ,GAF3B,SCZSkd,GAAwBpN,aAAOqN,MAAPrN,CAAH,kDAIrBsN,GAAetN,aAAOsI,KAAPtI,CAAH,6NAKH,qBAAGE,MAAkBoD,KAAKlD,cAC7B,qBAAGF,MAAkBqN,MAAMjK,QAIjCkK,GAAcxN,KAAOW,IAAV,mKASX8M,GAAQzN,KAAOW,IAAV,wGACP,qBAAGT,MAAkBC,OAAOkD,WAO1BN,GAAQ/C,KAAOW,IAAV,wFAEI,qBAAGT,MAAkBC,OAAO6C,cCjB5CF,GAAiB9C,KAAOW,IAAV,wpBAkCd+M,GAAc1N,aAAO+I,KAAP/I,CAAH,kHAQX2N,GAAiB3N,aAAOM,GAAPN,CAAH,kHAOd4N,GAAwB,WAC5B,IAAMC,EACJ,gBAAC,GAAD,WACE,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,OAGJ,OACE,uCACGA,EACAA,EACAA,MAKDC,GAA6D,SAAC,GAA0B,IAAxBnY,EAAuB,EAAvBA,UAAWoY,EAAY,EAAZA,MAC/E,EAAuBnK,gBAAfC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KACd,OACE,eAAC4J,GAAD,CAAangB,GAAE,sBAAiBoI,EAAUlG,SAA1C,SACE,gBAAC,GAAD,WACE,eAAC,KAAD,UACE,eAAC,MAAD,UAAOse,EAAQ,MAEjB,gBAAC,KAAD,CAAMC,WAAW,SAAjB,UACE,eAACL,GAAD,CAAgBle,QAASkG,EAAUlG,WACjCoU,GAAQC,IAAS,eAAC,MAAD,CAAMyD,GAAG,MAAT,SAAgB5R,EAAUhI,UAC3CkW,IAASC,GACT,gBAAC,KAAD,CAAM0D,WAAW,OAAjB,UACE,eAAC,MAAD,UAAO7R,EAAUd,OACjB,gBAAC,MAAD,CAAM0S,GAAG,MAAT,cAAiB5R,EAAUhI,OAA3B,aAIN,gBAAC,MAAD,CAAMsgB,WAAY,IAAlB,cAAyBlN,GAAapL,EAAUiB,SAAU,CAAEsK,SAAU,gBACtE,eAAC,MAAD,CAAM+M,WAAY,IAAlB,SACE,eAAC,GAAD,CAASzK,MAAO7N,EAAUoB,eAAgBkX,WAAY,QAExD,gBAAC,MAAD,CAAMA,WAAY,IAAlB,cAAyBlN,GAAapL,EAAU7O,cAChD,gBAAC,MAAD,CAAMmnB,WAAY,IAAlB,cAAyBlN,GAAapL,EAAU3O,uBAMlDknB,GACE,OADFA,GAEO,YAFPA,GAGI,SAHJA,GAIM,WAJNA,GAKY,iBA6JHC,GApJV,SAAC,GAA0C,IAAxC3Q,EAAuC,EAAvCA,WAAuC,IAA3B4Q,gBAA2B,MAL7B,GAK6B,EAC7C,EAAkChkB,mBAAS8jB,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0ClkB,oBAAkB,GAA5D,mBAAOZ,EAAP,KAAsB+kB,EAAtB,KAEQnX,EAAM2M,eAAN3M,EAER,EAAwBhN,mBAAS,GAAjC,mBAAOokB,EAAP,KAAaC,EAAb,KACA,EAA8BrkB,mBAAS,GAAvC,mBAAOskB,EAAP,KAAgBC,EAAhB,KACApkB,qBAAU,WACR,IAAIqkB,EAAa,EACbpR,IACEA,EAAWvV,OAASmmB,IAAa,IACnCQ,EAAa,GAEfD,EAAWzB,KAAK2B,MAAMrR,EAAWvV,OAASmmB,GAAYQ,MAEvD,CAACR,EAAU5Q,IAEd,IAAMsR,EAAe3S,mBAAQ,WAC3B,OAAOqB,EACHA,EACGtT,MAAK,SAACvC,EAAGgC,GACR,OAAIhC,GAAKgC,EACAhC,EAAE0mB,GAAgC1kB,EAAE0kB,GACZ,GAA1B7kB,GAAiB,EAAI,IACM,GAA3BA,GAAiB,EAAI,IAEpB,KAETrB,MAAMimB,GAAYI,EAAO,GAAIA,EAAOJ,GACvC,KACH,CAAC5Q,EAAY4Q,EAAUI,EAAMhlB,EAAe6kB,IAEzCU,EAAapU,uBACjB,SAACqU,GACCV,EAAaU,GACbT,EAAiBF,IAAcW,IAAmBxlB,KAEpD,CAACA,EAAe6kB,IAGZY,EAAQtU,uBACZ,SAACuU,GAEC,OAAOb,IAAca,EADG1lB,EAAsB,SAAN,SACM,KAEhD,CAACA,EAAe6kB,IAGlB,OAAK7Q,EAKH,gBAAC8P,GAAD,WACE,gBAAC,GAAD,WACE,eAAC,MAAD,CAAMpL,MAAM,UAAUoF,SAAS,OAAOF,MAAI,EAA1C,eAGA,gBAACgG,GAAD,CACElL,MAAM,UACNoF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAM4H,EAAWb,KAC1BiB,cAAc,YALhB,UAOG/X,EAAE,QAPL,IAOe6X,EAAMf,OAErB,gBAACd,GAAD,CACElL,MAAM,UACNoF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAM4H,EAAWb,KAC1BiB,cAAc,YALhB,UAOG/X,EAAE,SAPL,IAOgB6X,EAAMf,OAEtB,gBAACd,GAAD,CACElL,MAAM,UACNoF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAM4H,EAAWb,KAC1BiB,cAAc,YALhB,UAOG/X,EAAE,gBAPL,IAOuB6X,EAAMf,OAE7B,gBAACd,GAAD,CACElL,MAAM,UACNoF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAM4H,EAAWb,KAC1BiB,cAAc,YALhB,UAOG/X,EAAE,cAPL,IAOqB6X,EAAMf,OAE3B,gBAACd,GAAD,CACElL,MAAM,UACNoF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAM4H,EAAWb,KAC1BiB,cAAc,YALhB,UAOG/X,EAAE,aAPL,IAOoB6X,EAAMf,UAI5B,eAAC,GAAD,IACCY,EAAa7mB,OAAS,EACrB,uCACG6mB,EAAa3lB,KAAI,SAAC0B,EAAM6O,GACvB,OAAI7O,EAEA,gBAAC,IAAMukB,SAAP,WACE,eAAC,GAAD,CAASrB,MAtHT,IAsHiBS,EAAO,GAAiB9U,EAAG/D,UAAW9K,IACvD,eAAC,GAAD,MAFmBA,EAAK4E,SAMvB,QAET,gBAAC+d,GAAD,WACE,eAACC,GAAD,CACEtG,QAAS,WACPsH,EAAiB,IAATD,EAAaA,EAAOA,EAAO,IAFvC,SAKE,eAAC,KAAD,CAAetM,MAAgB,IAATsM,EAAa,eAAiB,cAEtD,eAAC,MAAD,UAAOpX,EAAE,2BAA4B,CAAEoX,OAAME,cAC7C,eAACjB,GAAD,CACEtG,QAAS,WACPsH,EAAQD,IAASE,EAAUF,EAAOA,EAAO,IAF7C,SAKE,eAAC,KAAD,CAAkBtM,MAAOsM,IAASE,EAAU,eAAiB,oBAKnE,uCACE,eAAC,GAAD,IACA,eAAC,KAAD,UA3FC,eAAC,MAAD,KCnKL5L,GAAiB9C,KAAOW,IAAV,usBA+Bd+M,GAAc1N,aAAO+I,KAAP/I,CAAH,kHAQXkO,GACO,YADPA,GAEI,SAFJA,GAGW,gBAHXA,GAIO,YAJPA,GAKK,UAGLmB,GAAuB,kBAC3B,gBAAC,GAAD,WACE,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,QAIEzB,GAAwB,kBAC5B,uCACE,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,QAIEE,GAAU,SAAC,GAAgE,IAA9Dhb,EAA6D,EAA7DA,SAAUib,EAAmD,EAAnDA,MAC3B,OACE,eAAC,GAAD,CAAaxgB,GAAE,qBAAgBuF,EAASrD,SAAxC,SACE,gBAAC,GAAD,WACE,eAAC,MAAD,UAAOse,EAAQ,IACf,gBAAC,KAAD,WACE,eAAC,GAAD,CAAoBlN,SAAU/N,EAASpF,OAAO+B,QAASqR,SAAUhO,EAASjF,OAAO4B,UACjF,gBAAC,MAAD,CAAM8X,GAAG,MAAT,UACGzU,EAASpF,OAAOC,OADnB,IAC4BmF,EAASjF,OAAOF,aAG9C,gBAAC,MAAD,eAAQoT,GAAajO,EAAShM,cAC9B,gBAAC,MAAD,eAAQia,GAAajO,EAAS/L,kBAC9B,gBAAC,MAAD,eAAQga,GAAajO,EAAS1L,cAC9B,gBAAC,MAAD,WAAO2Z,GAAajO,EAAS7L,SAA7B,OACA,gBAAC,MAAD,eAAQ8Z,GAAajO,EAAS9L,uBAgKvBsoB,GArJ6B,SAAC,GAA4B,IAA1BrS,EAAyB,EAAzBA,UAAWoB,EAAc,EAAdA,QAExD,EAAkCjU,mBAAS8jB,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0ClkB,oBAAkB,GAA5D,mBAAOZ,EAAP,KAAsB+kB,EAAtB,KACQnX,EAAM2M,eAAN3M,EAGR,EAAwBhN,mBAAS,GAAjC,mBAAOokB,EAAP,KAAaC,EAAb,KACA,EAA8BrkB,mBAAS,GAAvC,mBAAOskB,EAAP,KAAgBC,EAAhB,KACApkB,qBAAU,WACR,IAAIqkB,EAAa,EACb3R,EAAUhV,OAAS/B,IAA8B,IACnD0oB,EAAa,GAEfD,EAAWzB,KAAK2B,MAAM5R,EAAUhV,OAAS/B,GAA6B0oB,KACrE,CAAC3R,IAEJ,IAAMsS,EAAcpT,mBAAQ,WAC1B,OAAOc,EACHA,EACG/S,MAAK,SAACvC,EAAGgC,GACR,OAAIhC,GAAKgC,EACAhC,EAAE0mB,GAA+B1kB,EAAE0kB,GACX,GAA1B7kB,GAAiB,EAAI,IACM,GAA3BA,GAAiB,EAAI,IAEpB,KAETrB,MAAMjC,GAA6BsoB,EAAO,GAAIA,EAAOtoB,GACxD,KACH,CAACsoB,EAAMvR,EAAWzT,EAAe6kB,IAE9BU,EAAapU,uBACjB,SAACqU,GACCV,EAAaU,GACbT,EAAiBF,IAAcW,IAAmBxlB,KAEpD,CAACA,EAAe6kB,IAGZY,EAAQtU,uBACZ,SAACuU,GAEC,OAAOb,IAAca,EADG1lB,EAAsB,SAAN,SACM,KAEhD,CAACA,EAAe6kB,IAGlB,OACE,gBAACf,GAAD,WACE,gBAAC,GAAD,WACE,eAAC,MAAD,CAAMpL,MAAM,UAAUoF,SAAS,OAAOF,MAAI,EAA1C,eAGA,eAAC,MAAD,CAAMlF,MAAM,UAAUoF,SAAS,OAAOF,MAAI,EAAC+H,cAAc,YAAzD,SACG/X,EAAE,UAEL,gBAACgW,GAAD,CACElL,MAAM,UACNoF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAM4H,EAAWb,KAC1BiB,cAAc,YALhB,UAOG/X,EAAE,cAPL,IAOqB6X,EAAMf,OAE3B,gBAACd,GAAD,CACElL,MAAM,UACNoF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAM4H,EAAWb,KAC1BiB,cAAc,YALhB,UAOG/X,EAAE,aAPL,IAOoB6X,EAAMf,OAE1B,gBAACd,GAAD,CACElL,MAAM,UACNoF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAM4H,EAAWb,KAC1BiB,cAAc,YALhB,UAOG/X,EAAE,sBAPL,IAO6B6X,EAAMf,OAEnC,gBAACd,GAAD,CACElL,MAAM,UACNoF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAM4H,EAAWb,KAC1BiB,cAAc,YALhB,UAOG/X,EAAE,iBAPL,IAOwB6X,EAAMf,OAE9B,gBAACd,GAAD,CACElL,MAAM,UACNoF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAM4H,EAAWb,KAC1BiB,cAAc,YALhB,UAOG/X,EAAE,aAPL,IAOoB6X,EAAMf,UAG5B,eAAC,GAAD,IACCqB,EAAYtnB,OAAS,EACpB,uCACGsnB,EAAYpmB,KAAI,SAAC2J,EAAU4G,GAC1B,OAAI5G,EAEA,gBAAC,IAAMsc,SAAP,WACE,eAAC,GAAD,CAASrB,OAAQS,EAAO,GAAKtoB,EAA4BwT,EAAG5G,SAAUA,IACtE,eAAC,GAAD,MAFmBA,EAASrD,SAM3B,QAER4O,GAAW,eAAC,GAAD,IACZ,gBAACmP,GAAD,WACE,eAACC,GAAD,CACEtG,QAAS,WACPsH,EAAiB,IAATD,EAAaA,EAAOA,EAAO,IAFvC,SAKE,eAAC,KAAD,CAAetM,MAAgB,IAATsM,EAAa,eAAiB,cAGtD,eAAC,MAAD,UAAOpX,EAAE,2BAA4B,CAAEoX,OAAME,cAE7C,eAACjB,GAAD,CACEtG,QAAS,WACPsH,EAAQD,IAASE,EAAUF,EAAOA,EAAO,IAF7C,SAKE,eAAC,KAAD,CAAkBtM,MAAOsM,IAASE,EAAU,eAAiB,oBAKnE,uCACE,eAAC,GAAD,IAEA,eAAC,KAAD,W,sBC9OJc,GAAY,SAAC,GAYZ,IAXLpF,EAWI,EAXJA,EACAqF,EAUI,EAVJA,EACAzG,EASI,EATJA,MACAG,EAQI,EARJA,OACArH,EAOI,EAPJA,KAQA,OACE,6BACE,uBAAMsI,EAAGA,EAAGqF,EAAGA,EAAG3N,KAAMA,EAAMkH,MAAOA,EAAOG,OAAQA,EAAQuG,GAAG,SAO/D9E,GAAe,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aAM9C,OALAxgB,qBAAU,WACRugB,EAAcD,EAAQrH,OACtBuH,EAAavJ,mBAAOqJ,EAAQ3R,KAAM,kBACjC,CAAC2R,EAAQrH,MAAOqH,EAAQ3R,KAAM4R,EAAeC,IAEzC,MA6DM4E,GA1DD,SAAC,GAA2D,IAAzD9kB,EAAwD,EAAxDA,KAAMigB,EAAkD,EAAlDA,cAAeC,EAAmC,EAAnCA,aAC5B7K,EAAU6B,eAAV7B,MACR,OAAKrV,GAAwB,IAAhBA,EAAK5C,OAIhB,eAACgjB,GAAA,EAAD,CAAqBjC,MAAM,OAAOG,OAAO,OAAzC,SACE,gBAACyG,GAAA,EAAD,CACE/kB,KAAMA,EACNsgB,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,GAEVC,aAAc,WACZT,OAAalf,GACbif,OAAcjf,IAVlB,UAaE,eAAC4f,GAAA,EAAD,CACEC,QAAQ,OACRC,UAAU,EACVC,UAAU,EACVC,cAAe,SAAC3S,GAAD,OAAUsI,mBAAOtI,EAAM,OACtC4S,WAAY,KAEd,eAACC,GAAA,EAAD,CACEL,QAAQ,QACRM,UAAW,EACXpD,MAAM,SACN+C,UAAU,EACVC,UAAU,EACV1J,MAAOhC,EAAMC,OAAOkM,WACpB/E,SAAS,OACTuE,cAAe,SAACI,GAAD,iBAAalL,GAAakL,KACzCC,YAAY,QACZC,KAAM,CAAEC,GAAI,GAAItK,KAAM5B,EAAMC,OAAOkM,cAErC,eAACC,GAAA,EAAD,CACEC,OAAQ,CAAEzK,KAAM5B,EAAMC,OAAO0P,oBAC7BrD,aAAc,CAAEC,QAAS,QACzBC,UAAW,SAACC,EAAc9X,EAAMqU,GAArB,OACT,eAAC,GAAD,CAAc2B,QAAS3B,EAAM2B,QAASC,cAAeA,EAAeC,aAAcA,OAGtF,eAAC+E,GAAA,EAAD,CACEpE,QAAQ,QACR5J,KAAM5B,EAAMC,OAAOkD,QACnB0M,MAAO,SAAC7G,GAAD,OACL,eAAC,GAAD,CAAWC,OAAQD,EAAMC,OAAQH,MAAOE,EAAMF,MAAOoB,EAAGlB,EAAMkB,EAAGqF,EAAGvG,EAAMuG,EAAG3N,KAAM5B,EAAMC,OAAOkD,kBA/CjG,eAAC,GAAD,K,qBCnCL2M,GAAUhQ,KAAOW,IAAV,8CAIPmC,GAAiB9C,KAAOW,IAAV,42BAyCdsP,GAAajQ,aAAOsI,KAAPtI,CAAH,qHAOVkO,GACO,YADPA,GAEO,YAFPA,GAGI,SAHJA,GAIU,eAJVA,GAKU,eAGVN,GAAwB,WAC5B,IAAMC,EACJ,gBAAC,GAAD,WACE,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,IACA,eAAC,MAAD,OAGJ,OACE,uCACGA,EACAA,EACAA,MAKDC,GAAkD,SAAC,GAAqB,IAAnBoC,EAAkB,EAAlBA,YACjD9Y,EAAM2M,eAAN3M,EACF+Y,EAAOjD,KAAKC,IAAI+C,EAAYjiB,cAC5BmiB,EAAOlD,KAAKC,IAAI+C,EAAY/hB,cAC5BkiB,EAAoBH,EAAYjiB,aAAe,EAAIiiB,EAAY1iB,aAAe0iB,EAAYtiB,aAC1F0iB,EAAmBJ,EAAY/hB,aAAe,EAAI+hB,EAAY1iB,aAAe0iB,EAAYtiB,aAE/F,OACE,gBAAC,GAAD,WACE,eAAC,KAAD,CAAc2iB,KAAMC,aAAgBN,EAAY9iB,KAAM,eAAtD,SACE,eAAC,MAAD,UACG8iB,EAAYhjB,OAASrH,EAAgBsH,KAClCiK,EAAE,4BAA6B,CAAE1J,OAAQwiB,EAAY1iB,aAAcK,OAAQqiB,EAAYtiB,eACvFsiB,EAAYhjB,OAASrH,EAAgB6I,KACrC0I,EAAE,6BAA8B,CAAE1J,OAAQ4iB,EAAkBziB,OAAQwiB,IACpEjZ,EAAE,+BAAgC,CAAE1J,OAAQwiB,EAAY1iB,aAAcK,OAAQqiB,EAAYtiB,mBAGlG,gBAAC,MAAD,eAAQmT,GAAamP,EAAYliB,cACjC,eAAC,MAAD,UACE,eAAC,MAAD,oBAAU+S,GAAaoP,GAAvB,YAAgCD,EAAY1iB,kBAE9C,eAAC,MAAD,UACE,eAAC,MAAD,oBAAUuT,GAAaqP,GAAvB,YAAgCF,EAAYtiB,kBAE9C,eAAC,KAAD,CAAc2iB,KAAMC,aAAgBN,EAAY5iB,OAAQ,WAAxD,SACE,eAAC,MAAD,UAAOmjB,aAAaP,EAAY5iB,YAElC,eAAC,MAAD,UAAOojB,aAAgE,IAAtCzmB,SAASimB,EAAY9mB,UAAW,WAuNxDunB,GAhNV,SAAC,GAAsB,IAApB1V,EAAmB,EAAnBA,aACN,EAAkC7Q,mBAAS8jB,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0ClkB,oBAAkB,GAA5D,mBAAOZ,EAAP,KAAsB+kB,EAAtB,KAEQnX,EAAM2M,eAAN3M,EAER,EAAwBhN,mBAAS,GAAjC,mBAAOokB,EAAP,KAAaC,EAAb,KACA,EAA8BrkB,mBAAS,GAAvC,mBAAOskB,EAAP,KAAgBC,EAAhB,KAEA,EAAgCvkB,wBAAsCyB,GAAtE,mBAAO+kB,EAAP,KAAiBC,EAAjB,KAEMC,EAAqB3U,mBAAQ,WACjC,OAAOlB,EACHA,EACG9S,QACA+B,MAAK,SAACvC,EAAGgC,GACR,OAAIhC,GAAKgC,EACAhC,EAAE0mB,GAAkC1kB,EAAE0kB,GACd,GAA1B7kB,GAAiB,EAAI,IACM,GAA3BA,GAAiB,EAAI,IAEpB,KAETmS,QAAO,SAACyO,GACP,YAAoBve,IAAb+kB,GAA0BxG,EAAEld,OAAS0jB,KAE7CzoB,MAAMjC,GAA6BsoB,EAAO,GAAIA,EAAOtoB,GACxD,KACH,CAAC+U,EAAcuT,EAAMH,EAAW7kB,EAAeonB,IAGlDrmB,qBAAU,WACR,GAAI0Q,EAAc,CAChB,IAAM8V,EAAuB9V,EAAaU,QAAO,SAACqV,GAChD,YAAoBnlB,IAAb+kB,GAA0BI,EAAG9jB,OAAS0jB,KAE3CG,EAAqB9oB,OAAS/B,IAA8B,EAC9DyoB,EAAWzB,KAAK2B,MAAMkC,EAAqB9oB,OAAS/B,IAEpDyoB,EAAWzB,KAAK2B,MAAMkC,EAAqB9oB,OAAS/B,GAA6B,MAGpF,CAAC+U,EAAc2V,IAElB,IAAMK,EAAetW,uBACnB,SAACuW,GACKA,IAAcN,IAChBC,EAAYK,GACZzC,EAAQ,MAGZ,CAACmC,IAGG7B,EAAapU,uBACjB,SAACqU,GACCV,EAAaU,GACbT,EAAiBF,IAAcW,IAAmBxlB,KAEpD,CAACA,EAAe6kB,IAGZY,EAAQtU,uBACZ,SAACuU,GAEC,OAAOb,IAAca,EADG1lB,EAAsB,SAAN,SACM,KAEhD,CAACA,EAAe6kB,IAGlB,OACE,gBAAC2B,GAAD,WACE,gBAAC,KAAD,CAAM9I,GAAG,OAAT,UACE,gBAAC,KAAD,CAAMiK,cAAe,CAAC,SAAU,OAAhC,UACE,gBAAClB,GAAD,CAAY9I,QAAS,kBAAM8J,OAAaplB,IAAxC,UACE,eAAC,MAAD,CAAOib,SAAU,kBAAM,MAAM8B,MAAM,KAAKwI,aAAsBvlB,IAAb+kB,IACjD,eAAC,MAAD,CAAMtJ,SAAS,OAAOC,GAAG,MAAzB,SACGnQ,EAAE,YAIP,gBAAC6Y,GAAD,CAAY9I,QAAS,kBAAM8J,EAAaprB,EAAgB6I,OAAxD,UACE,eAAC,MAAD,CAAOoY,SAAU,kBAAM,MAAM8B,MAAM,KAAKwI,QAASR,IAAa/qB,EAAgB6I,OAC9E,eAAC,MAAD,CAAM4Y,SAAS,OAAOC,GAAG,MAAzB,SACGnQ,EAAE,iBAKT,gBAAC,KAAD,CAAM+Z,cAAe,CAAC,SAAU,OAAhC,UACE,gBAAClB,GAAD,CAAY9I,QAAS,kBAAM8J,EAAaprB,EAAgBsH,OAAxD,UACE,eAAC,MAAD,CAAO2Z,SAAU,kBAAM,MAAM8B,MAAM,KAAKwI,QAASR,IAAa/qB,EAAgBsH,OAC9E,eAAC,MAAD,CAAMma,SAAS,OAAOC,GAAG,MAAzB,SACGnQ,EAAE,aAIP,gBAAC6Y,GAAD,CAAY9I,QAAS,kBAAM8J,EAAaprB,EAAgB0I,OAAxD,UACE,eAAC,MAAD,CAAOuY,SAAU,kBAAM,MAAM8B,MAAM,KAAKwI,QAASR,IAAa/qB,EAAgB0I,OAC9E,eAAC,MAAD,CAAM+Y,SAAS,OAAOC,GAAG,MAAzB,SACGnQ,EAAE,sBAKX,gBAACkW,GAAD,WACE,gBAAC,GAAD,WACE,eAAC,MAAD,CAAMpL,MAAM,UAAUoF,SAAS,OAAOF,MAAI,EAAC+H,cAAc,YAAzD,SACG/X,EAAE,YAEL,gBAACgW,GAAD,CACElL,MAAM,UACNoF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAM4H,EAAWb,KAC1BiB,cAAc,YALhB,UAOG/X,EAAE,eAPL,IAOsB6X,EAAMf,OAE5B,gBAACd,GAAD,CACElL,MAAM,UACNoF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAM4H,EAAWb,KAC1BiB,cAAc,YALhB,UAOG/X,EAAE,gBAPL,IAOuB6X,EAAMf,OAE7B,gBAACd,GAAD,CACElL,MAAM,UACNoF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAM4H,EAAWb,KAC1BiB,cAAc,YALhB,UAOG/X,EAAE,gBAPL,IAOuB6X,EAAMf,OAE7B,gBAACd,GAAD,CACElL,MAAM,UACNoF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAM4H,EAAWb,KAC1BiB,cAAc,YALhB,UAOG/X,EAAE,WAPL,IAOkB6X,EAAMf,OAExB,gBAACd,GAAD,CACElL,MAAM,UACNoF,SAAS,OACTF,MAAI,EACJD,QAAS,kBAAM4H,EAAWb,KAC1BiB,cAAc,YALhB,UAOG/X,EAAE,QAPL,IAOe6X,EAAMf,UAGvB,eAAC,GAAD,IAECjT,EACC,uCACG6V,EAAmB3nB,KAAI,SAAC+mB,EAAanC,GACpC,OAAImC,EAGA,eADA,CACC,IAAMd,SAAP,WACE,eAAC,GAAD,CAASc,YAAaA,IACtB,eAAC,GAAD,MAFmBnC,GAMlB,QAEsB,IAA9B+C,EAAmB7oB,OAClB,eAAC,KAAD,CAAMopB,eAAe,SAArB,SACE,eAAC,MAAD,UAAOja,EAAE,4BAETvL,EACJ,gBAAC2hB,GAAD,WACE,eAACC,GAAD,CACEtG,QAAS,WACPsH,EAAiB,IAATD,EAAaA,EAAOA,EAAO,IAFvC,SAKE,eAAC,KAAD,CAAetM,MAAgB,IAATsM,EAAa,eAAiB,cAGtD,eAAC,MAAD,UAAOpX,EAAE,2BAA4B,CAAEoX,OAAME,cAC7C,eAACjB,GAAD,CACEtG,QAAS,WACPsH,EAAQD,IAASE,EAAUF,EAAOA,EAAO,IAF7C,SAKE,eAAC,KAAD,CAAkBtM,MAAOsM,IAASE,EAAU,eAAiB,oBAKnE,uCACE,eAAC,GAAD,IAEA,eAAC,KAAD,cCrTC4C,GAAsBtR,aAAOsI,KAAPtI,CAAH,wPAW5B,qBAAGE,MAAkBwC,aAAaE,MAIlC,qBAAG1C,MAAkBwC,aAAa6O,MAwIvBC,GAnIY,WACzB,IAAQpa,EAAM2M,eAAN3M,EACR,EAA4ChN,qBAA5C,mBAAOqnB,EAAP,KAAuBC,EAAvB,KACA,EAAoDtnB,qBAApD,mBAAOunB,EAAP,KAA2BC,EAA3B,KACA,EAAsCxnB,qBAAtC,mBAAOynB,EAAP,KAAoBC,EAApB,KACA,EAA8C1nB,qBAA9C,mBAAO2nB,EAAP,KAAwBC,EAAxB,KAEA,EAAuB7X,KAAhBrN,EAAP,oBACA,EAAoB+N,KAAbC,EAAP,oBACA,EAAuBE,KAAhBC,EAAP,oBAEMgX,EAAczQ,mBAAO,IAAI3Y,KAAQ,eAGvC0B,qBAAU,WACW,MAAfsnB,GAAuB/kB,GACzBglB,EAAehlB,EAAahG,aAE7B,CAACgG,EAAc+kB,IAClBtnB,qBAAU,WACc,MAAlBknB,GAA0B3kB,GAC5B4kB,EAAkB5kB,EAAa9F,gBAEhC,CAACyqB,EAAgB3kB,IAEpB,IAAMolB,EAAyB/V,mBAAQ,WACrC,OAAIrB,EACKA,EAAU3R,KAAI,SAACgpB,GACpB,MAAO,CACLjZ,KAAMkZ,aAAaD,EAAIjjB,MACvBsU,MAAO2O,EAAInrB,iBAIV,KACN,CAAC8T,IAEEuX,EAAsBlW,mBAAQ,WAClC,OAAIrB,EACKA,EAAU3R,KAAI,SAACgpB,GACpB,MAAO,CACLjZ,KAAMkZ,aAAaD,EAAIjjB,MACvBsU,MAAO2O,EAAIrrB,cAIV,KACN,CAACgU,IAEEwX,EAAYzW,KAEZ0W,EAAkBpW,mBAAQ,WAC9B,OAAO7T,OAAOmI,OAAO6hB,GAClBnpB,KAAI,SAACiT,GAAD,OAAWA,EAAMvR,QACrB8Q,QAAO,SAACS,GAAD,OAAWA,OACpB,CAACkW,IAEE9W,EAAcJ,KACd6B,EAAYd,mBAAQ,WACxB,OAAO7T,OAAOmI,OAAO+K,GAClBrS,KAAI,SAACyS,GAAD,OAAUA,EAAK/Q,QACnB8Q,QAAO,SAACC,GAAD,OAAUA,OACnB,CAACJ,IAEEgX,EAAsBrW,mBAAQ,WAClC,OAAO7T,OAAOmI,OAAO+K,GAAaiX,MAAK,SAAC7W,GAAD,OAAWA,EAAK/Q,UACtD,CAAC2Q,IAEJ,OACE,gBAACkX,GAAA,EAAD,WACE,eAAC,KAAD,CAAS9J,MAAM,KAAK1B,GAAG,OAAO7Z,GAAG,sBAAjC,SACG+J,EAAE,0BAEL,gBAACka,GAAD,WACE,eAAC,KAAD,UACE,gBAAC,KAAD,CAAK5f,EAAG,CAAC,OAAQ,OAAQ,QAAzB,UACE,eAAC,MAAD,CAAM0V,MAAI,EAAClF,MAAM,QAAjB,SACG9K,EAAE,eAEJqa,EAAiB,EAChB,gBAAC,MAAD,CAAMrK,MAAI,EAACE,SAAS,OAApB,cACIvG,GAAa0Q,MAGjB,eAAC,MAAD,CAAUzI,MAAM,QAAQG,OAAO,SAEjC,eAAC,MAAD,CAAMjH,MAAM,WAAZ,gBAAwByP,QAAxB,IAAwBA,IAAsBM,IAC9C,eAAC,KAAD,CAAK9I,OAAO,QAAZ,SACE,eAAC,GAAD,CACEte,KAAMqnB,EACNpH,cAAe4G,EACf3G,aAAc6G,WAKtB,eAAC,KAAD,UACE,gBAAC,KAAD,CAAKlgB,EAAG,CAAC,OAAQ,OAAQ,QAAzB,UACE,eAAC,MAAD,CAAM0V,MAAI,EAAClF,MAAM,QAAjB,SACG9K,EAAE,gBAEJya,EAAc,EACb,gBAAC,MAAD,CAAMzK,MAAI,EAACE,SAAS,OAApB,cACIvG,GAAa8Q,MAGjB,eAAC,MAAD,CAAU7I,MAAM,QAAQG,OAAO,SAEjC,eAAC,MAAD,CAAMjH,MAAM,WAAZ,gBAAwB6P,QAAxB,IAAwBA,IAAmBE,IAC3C,eAAC,KAAD,CAAK9I,OAAO,QAAZ,SACE,eAAC,GAAD,CAAUte,KAAMwnB,EAAqBvH,cAAegH,EAAgB/G,aAAciH,cAK1F,eAAC,KAAD,CAASpJ,MAAM,KAAK+J,GAAG,OAAOzL,GAAG,OAAjC,SACG9P,EAAE,gBAEL,eAAC,GAAD,CAAYoG,WAAY+U,IACxB,eAAC,KAAD,CAAS3J,MAAM,KAAK+J,GAAG,OAAOzL,GAAG,OAAjC,SACG9P,EAAE,eAEL,eAAC,GAAD,CAAW6F,UAAWA,EAAWoB,QAASmU,IAC1C,eAAC,KAAD,CAAS5J,MAAM,KAAK+J,GAAG,OAAOzL,GAAG,OAAjC,SACG9P,EAAE,kBAEL,eAAC,GAAD,CAAkB6D,aAAcA,Q,SClKzB2X,GAAgB5S,aAAOsI,KAAPtI,CAAH,4KACV,qBAAGE,MAAkBC,OAAO0S,cACzB,qBAAG3S,MAAkBqN,MAAMjK,QACnC,qBAAGpD,MAAkBC,OAAOE,OAMnCyS,MCgCWC,GApCiB,WAC9B,IAAQ3b,EAAM2M,eAAN3M,EAGFoE,EAAcJ,KACd6B,EAAYd,mBAAQ,WACxB,OAAO7T,OAAOmI,OAAO+K,GAClBrS,KAAI,SAACyS,GAAD,OAAUA,EAAK/Q,QACnB8Q,QAAO,SAACC,GAAD,OAAUA,OACnB,CAACJ,IAEJ,EAAqBqK,eAAdC,EAAP,oBACMkN,EAAiB7f,GAAa2S,GAEpC,OACE,gBAAC4M,GAAA,EAAD,WACE,eAAC,KAAD,CAAS9J,MAAM,KAAK1B,GAAG,OAAvB,SACG9P,EAAE,oBAEL,eAACwb,GAAD,CAAevB,eAAe,SAA9B,SACG2B,EAAe/qB,OAAS,EACvB,eAAC,GAAD,CAAWgV,UAAW+V,IAEtB,eAAC,MAAD,CAAMC,GAAG,OAAOC,GAAG,OAAO9L,MAAI,EAA9B,SACGhQ,EAAE,oCAIT,eAAC,KAAD,CAASwR,MAAM,KAAK+J,GAAG,OAAOzL,GAAG,OAAO7Z,GAAG,mBAA3C,SACG+J,EAAE,eAEL,eAAC,GAAD,CAAW6F,UAAWA,Q,uDCwGbkW,GAlIK,SAAC,GAA2D,IAAzDtoB,EAAwD,EAAxDA,KAAMyZ,EAAkD,EAAlDA,SAAU8O,EAAwC,EAAxCA,SAAazT,EAA2B,mBACrEO,EAAU6B,eAAV7B,MACFmT,EAAWpP,iBAAuB,MACxC,EAAiC7Z,qBAAjC,mBAAOkpB,EAAP,KAAqBC,EAArB,KAEMC,EAAe7Y,uBAAY,WAAO,IAAD,EACjC2Y,IAAY,OAAID,QAAJ,IAAIA,GAAJ,UAAIA,EAAUhf,eAAd,aAAI,EAAmBof,iBACrCH,EAAaI,OAAOL,EAAShf,QAAQof,cAAcE,YAAc,GAf3C,KAgBtBL,EAAaM,YAAYC,aACzBP,EAAaM,YAAYE,iBAAiB,GAAG,MAE9C,CAACR,EAAcD,IAGZU,EAA6B,kBAAXC,OA4GxB,OA3GAzpB,qBAAU,WACR,OAAKwpB,GAGLC,OAAO3O,iBAAiB,SAAUmO,GAC3B,kBAAMQ,OAAOvO,oBAAoB,SAAU+N,KAHzC,OAIR,CAACO,EAAUV,EAAUG,IAGxBjpB,qBAAU,WAAO,IAAD,EACd,IAAK+oB,GAAgBzoB,IAAS,OAACwoB,QAAD,IAACA,GAAD,UAACA,EAAUhf,eAAX,aAAC,EAAmBof,eAAe,CAC/D,IAAMQ,EAAQC,aAAYb,EAAShf,QAAS,CAC1C8U,OAnCoB,IAoCpBH,MAAOqK,EAAShf,QAAQof,cAAcE,YAAc,GACpDQ,OAAQ,CACNC,gBAAiB,cACjBC,UAAWnU,EAAMC,OAAOkM,WACxBiI,WAAY,sBACZhN,SAAU,IAEZiN,gBAAiB,CACfC,aAAc,CACZpJ,IAAK,GACLG,OAAQ,IAEVkJ,eAAe,GAEjBb,UAAW,CACTa,eAAe,EACfC,gBAAgB,EAChBC,kBAAmB,SAACC,GAClB,OAAOpT,mBAAkB,IAAXoT,EAAiB,kBAGnCC,UAAW,CACTC,SAAS,GAEXC,KAAM,CACJC,UAAW,CACTF,SAAS,GAEXG,UAAW,CACTH,SAAS,IAGbI,UAAW,CACTC,SAAU,CACRL,SAAS,EACTM,cAAc,GAEhBC,KAAM,EACNC,SAAU,CACRR,SAAS,EACTM,cAAc,EACd7P,MAAO,EACPyD,MAAO,EACP9G,MAAOhC,EAAMC,OAAOkM,WACpBkJ,qBAAsBrV,EAAMC,OAAOkD,YAKzC4Q,EAAML,YAAYC,aAClBN,EAASU,MAEV,CAACX,EAAczoB,EAAMyZ,EAAUpE,IAElC3V,qBAAU,WACR,GAAI+oB,GAAgBzoB,EAAM,CACxB,IAAM2qB,EAASlC,EAAamC,qBAAqB,CAC/CC,QAASxV,EAAMC,OAAOwV,QACtBC,UAAW1V,EAAMC,OAAO0V,QACxBC,gBAAiB5V,EAAMC,OAAO0V,QAC9BE,cAAe7V,EAAMC,OAAOwV,QAC5BK,cAAe9V,EAAMC,OAAO0V,QAC5BI,YAAa/V,EAAMC,OAAOwV,UAG5BH,EAAOU,QAAQrrB,GAGfyoB,EAAa6C,wBAAuB,SAACC,GACnC,IACU,OAAR/C,QAAQ,IAARA,OAAA,EAAAA,EAAUhf,gBACCxI,IAAVuqB,QACgBvqB,IAAfuqB,EAAMld,MACLkd,GAASA,EAAMC,OAASD,EAAMC,MAAMjM,EAAI,GACxCgM,GAASA,EAAMC,OAASD,EAAMC,MAAMjM,EAAIiJ,EAAShf,QAAQsf,aACzDyC,GAASA,EAAMC,OAASD,EAAMC,MAAM5G,EAAI,GACxC2G,GAASA,EAAMC,OAASD,EAAMC,MAAM5G,EAhHrB,KAmHdnL,GAAUA,OAASzY,GACnBunB,GAAUA,OAASvnB,QAClB,GAAI2pB,GAAUY,EAAO,CAC1B,IAAMhtB,EAAYgtB,EAAMld,KAClBvF,EAAM,IAAI9K,KAAiB,IAAZO,GACfktB,EAAM,IAAIztB,KAAK8K,EAAI4iB,UAAsC,IAA1B5iB,EAAI6iB,qBACnCtd,EAAI,UAAMsI,mBAAO8U,EAAK,sBAAlB,UACJjgB,EAAS+f,EAAMK,aAAaC,IAAIlB,GAClClR,GAAUA,EAAQ,OAACjO,QAAD,IAACA,OAAD,EAACA,EAAQsD,MAC3ByZ,GAAUA,EAASla,UAI5B,CAACoa,EAAczoB,EAAMyZ,EAAU8O,EAAUlT,IAG1C,wCACIoT,GAAgB,eAAC,GAAD,IAClB,kCAAKtM,IAAKqM,EAAUhmB,GAAG,gBAAmBsS,QCvI1CqQ,GAAUhQ,aAAOsI,KAAPtI,CAAH,+LAUP2W,GAAQ3W,aAAOsI,KAAPtI,CAAH,2GAEW,qBAAGE,MAAkBC,OAAOyW,SASrCC,GAAY7W,KAAO8W,OAAV,mSAYX,gBAAG5W,EAAH,EAAGA,MAAH,SAAU6W,SAA2B7W,EAAMC,OAAOE,KAAOH,EAAMC,OAAOkM,cAC3D,gBAAGnM,EAAH,EAAGA,MAAH,SAAU6W,SAA2B7W,EAAMoD,KAAKlD,WAAaF,EAAMC,OAAOyW,SAOnFI,GAAgD,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC9D,OACE,eAAC,GAAD,CAASvlB,EAAG,CAAC,QAAS,UAAtB,SACE,eAACilB,GAAD,UAAQM,Q,StCrCTlqB,O,yBAAAA,I,mBAAAA,I,kBAAAA,Q,KAaL,I,wBAwFemqB,GAxF6B,SAAC,GAAuD,IAArDrO,EAAoD,EAApDA,QAAS/N,EAA2C,EAA3CA,UAAWnF,EAAgC,EAAhCA,UAAWwhB,EAAqB,EAArBA,eAC5E,EAAwB/sB,mBAAS2C,GAAUqqB,QAA3C,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAoCltB,qBAApC,mBAAOmtB,EAAP,KAAmBzM,EAAnB,KACA,EAAkC1gB,qBAAlC,mBAAOotB,EAAP,KAAkBzM,EAAlB,KACQ3T,EAAM2M,eAAN3M,EAEF6a,EAAczQ,mBAAO,IAAI3Y,KAAQ,eAEjC4uB,EAAmBtb,mBAAQ,WAC/B,OAAIrB,EACKA,EAAU3R,KAAI,SAACgpB,GACpB,MAAO,CACLjZ,KAAMkZ,aAAaD,EAAIjjB,MACvBsU,MAAO2O,EAAInrB,iBAIV,KACN,CAAC8T,IACEuX,EAAsBlW,mBAAQ,WAClC,OAAIrB,EACKA,EAAU3R,KAAI,SAACgpB,GACpB,MAAO,CACLjZ,KAAMkZ,aAAaD,EAAIjjB,MACvBsU,MAAO2O,EAAIrrB,cAIV,KACN,CAACgU,IAuBJ,OACE,gBAAC,KAAD,WACE,gBAAC,GAAD,WACE,eAAC+b,GAAD,CAAWE,SAAUM,IAAStqB,GAAUqqB,OAAQjQ,QAAS,kBAAMmQ,EAAQvqB,GAAUqqB,SAAjF,SACE,eAAC,MAAD,UAAOhgB,EAAE,cAEX,eAACyf,GAAD,CAAWE,SAAUM,IAAStqB,GAAU2qB,UAAWvQ,QAAS,kBAAMmQ,EAAQvqB,GAAU2qB,YAApF,SACE,eAAC,MAAD,UAAOtgB,EAAE,iBAEE,UAAZyR,GACC,eAACgO,GAAD,CAAWE,SAAUM,IAAStqB,GAAU4qB,MAAOxQ,QAAS,kBAAMmQ,EAAQvqB,GAAU4qB,QAAhF,SACE,eAAC,MAAD,UAAOvgB,EAAE,gBAKf,gBAAC,KAAD,CAAM+Z,cAAc,SAAS8B,GAAG,OAAO2E,GAAG,OAA1C,UArC0B,WAC5B,IAAIC,EAAiB,KACrB,GAAIN,EACFM,EAAiB9W,GAAawW,QACzB,GAAIF,IAAStqB,GAAUqqB,QAAU/E,EAAoBpqB,OAAS,EAAG,CAAC,IAAD,EACtE4vB,EAAiB9W,GAAY,UAACsR,EAAoBA,EAAoBpqB,OAAS,UAAlD,aAAC,EAAqDub,YAC9E,GAAI6T,IAAStqB,GAAU2qB,WAAaD,EAAiBxvB,OAAS,EAAG,CAAC,IAAD,EACtE4vB,EAAiB9W,GAAY,UAAC0W,EAAiBA,EAAiBxvB,OAAS,UAA5C,aAAC,EAA+Cub,YACpE6T,IAAStqB,GAAU4qB,QAAnB,OAA4BhiB,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAWiB,YAChDihB,EAAiB9W,GAAapL,EAAUiB,WAG1C,OAAOihB,EACL,gBAAC,MAAD,CAAMvQ,SAAS,OAAOF,MAAI,EAA1B,cACIyQ,KAGJ,eAAC,MAAD,CAAU1O,OAAO,OAAOH,MAAM,UAqB3B8O,GACD,eAAC,MAAD,CAAMC,OAAK,EAAC7V,MAAM,YAAlB,SACGsV,GAAavF,OAIlB,eAAC,KAAD,CAAKgB,GAAG,OAAO9J,OAAoB,UAAZN,EAAsB,QAAU,QAAvD,SACGwO,IAAStqB,GAAU2qB,UAClB,eAAC,GAAD,CAAW7sB,KAAM4sB,EAAkB3M,cAAeA,EAAeC,aAAcA,IAC7EsM,IAAStqB,GAAUqqB,OACrB,eAAC,GAAD,CAAUvsB,KAAMwnB,EAAqBvH,cAAeA,EAAeC,aAAcA,IAC/EsM,IAAStqB,GAAU4qB,MACrB,eAAC,GAAD,CAAa9sB,KAAMssB,EAAgB7S,SAAUwG,EAAesI,SAAUrI,IACpE,WuC1ENiN,GAAgBhY,KAAOW,IAAV,8OAWbsX,GAAcjY,aAAOsI,KAAPtI,CAAH,oIASXkY,GAAwBlY,aAAOsI,KAAPtI,CAAH,6MACL,qBAAGE,MAAkBC,OAAO6C,cAC5B,qBAAG9C,MAAkBC,OAAOC,cAqNnC+X,GA5MsD,SAAC,GAI/D,IAFgBC,EAEjB,EAHJ9W,MACE+W,OAAU5oB,QAGZ,EAAuBmU,gBAAfC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KACN1M,EAAM2M,eAAN3M,EACR,EAA4ChN,mBAAS,GAArD,mBAAOkuB,EAAP,KAAuBC,EAAvB,KACA,EAA+CC,cAC7CphB,EAAE,4EACF,IAFMqhB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,eAAgBC,EAAjC,EAAiCA,UAMjCpuB,qBAAU,WACRypB,OAAO4E,SAAS,EAAG,KAClB,IAGH,IAAMnpB,EAAU2oB,EAAaxZ,cAEvB9L,EAAWK,GAAa,CAAC1D,IAAU,GACnCqL,EzBsBwB,SAACrL,GAC/B,IAAMgL,EAAWC,eACXkB,EAAOxB,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAKpI,MAAMmJ,UAAU5L,MACnEqL,EAAS,OAAGc,QAAH,IAAGA,OAAH,EAAGA,EAAMd,UACxB,EAA0B1Q,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc6B,EAAd,KAiBA,OAfAC,qBAAU,WACR,IAAMqB,EAAK,uCAAG,gCAAAjE,EAAA,sEAC8B8P,GAAmBhI,GADjD,gBACGE,EADH,EACJlH,MAAmBoC,EADf,EACeA,MACtB8E,GAAc9E,GACjB4P,EAASoe,aAAoB,CAAEC,YAAarpB,EAASqL,UAAWjQ,KAE9D8E,GACFrF,EAASqF,GANC,2CAAH,qDASNmL,GAAcrS,GACjBmD,MAED,CAAC6D,EAASgL,EAAUhS,EAAOqS,IAEvBA,EyB3CWie,CAAiBtpB,GAC7BwL,EzB6C2B,SAACxL,GAClC,IAAMgL,EAAWC,eACXkB,EAAOxB,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAKpI,MAAMmJ,UAAU5L,MACnEwL,EAAY,OAAGW,QAAH,IAAGA,OAAH,EAAGA,EAAMX,aAC3B,EAA0B7Q,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc6B,EAAd,KAgBA,OAdAC,qBAAU,WACR,IAAMqB,EAAK,uCAAG,gCAAAjE,EAAA,sEAC8BgQ,GAAsBlI,GADpD,gBACGE,EADH,EACJlH,MAAmBoC,EADf,EACeA,KACvB8E,EACFrF,GAAS,GAETmQ,EAASue,aAAuB,CAAEF,YAAarpB,EAASwL,aAAcpQ,KAL5D,2CAAH,qDAQNoQ,GAAiBxS,GACpBmD,MAED,CAAC6D,EAASgL,EAAUhS,EAAOwS,IAEvBA,EyBjEcge,CAAoBxpB,GAEzC,EAA6CoW,eAA7C,mBAAOmN,EAAP,KAAuBkG,EAAvB,KAEA,OACE,eAACxG,GAAA,EAAD,CAAM/kB,OAAQmF,EAAQ,iBAAMA,QAAN,IAAMA,OAAN,EAAMA,EAAUpF,OAAOC,OAAvB,qBAAmCmF,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAUjF,OAAOF,QAAW,KAArF,SACGmF,EACC,uCACE,gBAAC,KAAD,CAAMue,eAAe,gBAAgBnK,GAAG,OAAOiK,cAAe,CAAC,SAAU,SAAU,OAAnF,UACE,gBAAC,KAAD,CAAajK,GAAG,OAAhB,UACE,eAAC,KAAD,CAAM3Z,GAAG,QAAT,SACE,eAAC,MAAD,CAAM2U,MAAM,UAAZ,SAAuB9K,EAAE,YAE3B,eAAC,KAAD,CAAM7J,GAAG,cAAT,SACE,eAAC,MAAD,CAAM2U,MAAM,UAAZ,SAAuB9K,EAAE,aAE3B,eAAC,KAAD,UACE,eAAC,MAAD,CAAM+hB,GAAG,MAAT,mBAAmBrmB,EAASpF,OAAOC,OAAnC,cAA+CmF,EAASjF,OAAOF,eAGnE,gBAAC,KAAD,CAAM0jB,eAAgB,CAAC,KAAM,KAAM,YAAasB,GAAI,CAAC,MAAO,MAAO,GAAnE,UACE,eAAC,KAAD,CAAcwG,GAAG,MAAM5I,KAAMC,aAAgB/gB,EAAS,WAAtD,SACG2H,EAAE,6BAEL,eAAC,GAAD,CAAU0K,KAAMkR,EAAeziB,SAASd,GAAU0X,QAAS,kBAAM+R,EAAmBzpB,YAGxF,gBAAC,KAAD,CAAM0hB,cAAc,SAApB,UACE,gBAAC,KAAD,CAAMnD,WAAW,SAAS9G,GAAI,CAAC,MAAO,MAAtC,UACE,eAAC,GAAD,CAAoBrG,SAAU/N,EAASpF,OAAO+B,QAASqR,SAAUhO,EAASjF,OAAO4B,QAASwQ,KAAM,KAChG,eAAC,MAAD,CACEsH,GAAG,OACHH,MAAI,EACJE,SAAUzD,GAAQC,EAAO,OAAS,OAClCzW,GAAG,uBAJL,mBAKKyF,EAASpF,OAAOC,OALrB,cAKiCmF,EAASjF,OAAOF,aAEnD,gBAAC,KAAD,CAAM0jB,eAAe,gBAAgBF,cAAe,CAAC,SAAU,SAAU,SAAU,OAAnF,UACE,gBAAC,KAAD,CAAMA,cAAe,CAAC,SAAU,SAAU,OAAQjK,GAAI,CAAC,MAAO,MAAO,MAArE,UACE,eAAC,KAAD,CAAM3Z,GAAE,sBAAiBuF,EAASpF,OAAO+B,SAAzC,SACE,gBAACwoB,GAAD,WACE,eAAC,GAAD,CAAcxoB,QAASqD,EAASpF,OAAO+B,QAASwQ,KAAK,SACrD,eAAC,MAAD,CAAMqH,SAAS,OAAOC,GAAG,MAAMhC,MAAO,CAAEyC,WAAY,UAAYgB,MAAM,cAAtE,qBACQlW,EAASpF,OAAOC,OADxB,eACqCmF,EAASG,YAAY/C,QAAQ,GADlE,YACwE4C,EAASjF,OAAOF,eAI5F,eAAC,KAAD,CAAMJ,GAAE,sBAAiBuF,EAASjF,OAAO4B,SAAzC,SACE,gBAACwoB,GAAD,CAAa1Q,GAAI,CAAC,KAAM,KAAM,QAA9B,UACE,eAAC,GAAD,CAAc9X,QAASqD,EAASjF,OAAO4B,QAASwQ,KAAK,SACrD,eAAC,MAAD,CAAMqH,SAAS,OAAOC,GAAG,MAAMhC,MAAO,CAAEyC,WAAY,UAAYgB,MAAM,cAAtE,qBACQlW,EAASjF,OAAOF,OADxB,eACqCmF,EAASI,YAAYhD,QAAQ,GADlE,YACwE4C,EAASpF,OAAOC,kBAK9F,gBAAC,KAAD,WACE,eAAC,KAAD,CAAMJ,GAAE,eAAUuF,EAASpF,OAAO+B,QAA1B,YAAqCqD,EAASjF,OAAO4B,SAA7D,SACE,eAAC,KAAD,CAAQ0pB,GAAG,MAAMtQ,QAAQ,YAAzB,SACGzR,EAAE,qBAGP,eAAC,KAAD,CAAM7J,GAAE,8BAAyBuF,EAASpF,OAAO+B,QAAzC,2BAAmEqD,EAASjF,OAAO4B,SAA3F,SACE,eAAC,KAAD,UAAS2H,EAAE,sBAKnB,gBAAC4gB,GAAD,WACE,gBAAC,KAAD,WACE,eAAC,KAAD,UACE,gBAAC,KAAD,CAAKtmB,EAAE,OAAP,UACE,gBAAC,KAAD,CAAM2f,eAAe,gBAArB,UACE,gBAAC,KAAD,CAAM+H,KAAK,IAAIjI,cAAc,SAA7B,UACE,eAAC,MAAD,CAAMjP,MAAM,YAAYkF,MAAI,EAACE,SAAS,OAAO6H,cAAc,YAA3D,SACG/X,EAAE,eAEL,gBAAC,MAAD,CAAMkQ,SAAS,OAAOF,MAAI,EAA1B,cACIrG,GAAajO,EAAS9L,iBAE1B,eAAC,GAAD,CAASwc,MAAO1Q,EAASnG,wBAE3B,gBAAC,KAAD,CAAMysB,KAAK,IAAIjI,cAAc,SAA7B,UACE,eAAC,MAAD,CAAMjP,MAAM,YAAYkF,MAAI,EAACE,SAAS,OAAO6H,cAAc,YAA3D,SACG/X,EAAE,mBAEL,gBAAC,MAAD,CAAMkQ,SAAS,OAAOF,MAAI,EAA1B,UACGrG,GAAajO,EAAS7L,SADzB,OAGA,gBAAC,KAAD,CAAM+mB,WAAW,SAAjB,UACE,uBAAMhH,IAAK2R,EAAX,SACE,eAAC,KAAD,CAAUzW,MAAM,iBAElB,eAAC,MAAD,CAAMqF,GAAG,MAAMD,SAAS,OAAOpF,MAAM,aAArC,SACG9K,EAAE,oBAEJshB,GAAkBD,WAIzB,eAAC,MAAD,CAAMvW,MAAM,YAAYkF,MAAI,EAACuL,GAAG,OAAOrL,SAAS,OAAO6H,cAAc,YAArE,SACG/X,EAAE,yBAEL,gBAAC8gB,GAAD,WACE,gBAAC,KAAD,CAAM7G,eAAe,gBAArB,UACE,gBAAC,KAAD,WACE,eAAC,GAAD,CAAc5hB,QAASqD,EAASpF,OAAO+B,QAASwQ,KAAK,SACrD,eAAC,MAAD,CAAM8X,OAAK,EAAC7V,MAAM,aAAaqF,GAAG,MAAlC,SACGzU,EAASpF,OAAOC,YAGrB,eAAC,MAAD,CAAMoqB,OAAK,EAAX,SAAahX,GAAajO,EAAS6B,sBAErC,gBAAC,KAAD,CAAM0c,eAAe,gBAArB,UACE,gBAAC,KAAD,WACE,eAAC,GAAD,CAAc5hB,QAASqD,EAASjF,OAAO4B,QAASwQ,KAAK,SACrD,eAAC,MAAD,CAAM8X,OAAK,EAAC7V,MAAM,aAAaqF,GAAG,MAAlC,SACGzU,EAASjF,OAAOF,YAGrB,eAAC,MAAD,CAAMoqB,OAAK,EAAX,SAAahX,GAAajO,EAAS8B,8BAK3C,eAAC,KAAD,CAAM+d,GAAG,OAAT,SACE,gBAAC,KAAD,CAAMxB,cAAc,SAASzf,EAAE,OAA/B,UACE,gBAAC,KAAD,CACEgX,YAAa4P,EACbe,YAAa,SAACtL,GAAD,OAAWwK,EAAkBxK,IAC1CnF,MAAM,KACNC,QAAQ,SAJV,UAME,eAAC,KAAD,CAAgBG,MAAM,OAAtB,SAA8B5R,EAAE,SAChC,eAAC,KAAD,CAAgB4R,MAAM,OAAtB,SAA8B5R,EAAE,WAElC,gBAAC,KAAD,CAAMub,GAAG,OAAT,UACE,gBAAC,KAAD,CAAMyG,KAAK,IAAIjI,cAAc,SAA7B,UACE,eAAC,MAAD,CAAMjP,MAAM,YAAYoF,SAAS,OAAOF,MAAI,EAAC+H,cAAc,YAA3D,SACoB/X,EAAjBkhB,EAAmB,YAAiB,gBAEvC,gBAAC,MAAD,CAAMhR,SAAS,OAAOF,MAAI,EAA1B,cACqBrG,GAAjBuX,EAA8BxlB,EAAS/L,cAA8B+L,EAAShM,cAElF,eAAC,GAAD,CAAS0c,MAAO8U,EAAiBxlB,EAAS4B,oBAAsB5B,EAASpG,qBAE3E,gBAAC,KAAD,CAAM0sB,KAAK,IAAIjI,cAAc,SAA7B,UACE,eAAC,MAAD,CAAMjP,MAAM,YAAYoF,SAAS,OAAOF,MAAI,EAAC+H,cAAc,YAA3D,SACoB/X,EAAjBkhB,EAAmB,oBAAyB,wBAE/C,gBAAC,MAAD,CAAMhR,SAAS,OAAOF,MAAI,EAA1B,cACqBrG,GAAjBuX,EAA8BxlB,EAASzL,SAAyByL,EAAS1L,cAE7E,eAAC,MAAD,CAAM8a,MAAM,aAAaoF,SAAS,OAAlC,SACGlQ,EAAE,iCAAkC,CACnCkiB,UACIvY,GADOuX,EACMxlB,EAAS3L,YACT2L,EAAS5L,gCAQxC,eAAC,GAAD,CAAW2hB,QAAQ,OAAO/N,UAAWA,OAEvC,eAAC,KAAD,CAASoM,GAAG,OAAOyL,GAAG,OAAO/J,MAAM,KAAnC,SACGxR,EAAE,kBAEL,eAAC,GAAD,CAAkB6D,aAAcA,OAGlC,eAAC,KAAD,CAAM0X,GAAG,OAAOtB,eAAe,SAA/B,SACE,eAACkI,GAAA,EAAD,SCzPJC,GAAcxZ,aAAO+I,KAAP/I,CAAH,kLAWXyZ,GAAezZ,aAAOuK,KAAPvK,CAAH,iGACI,qBAAGE,MAAkBoD,KAAKlD,cAC7B,qBAAGF,MAAkBqN,MAAMjK,QAIjCoW,GAAgB1Z,KAAOW,IAAV,iKAUpBgZ,GAAW,SAAC,GAA6C,IAA3ChkB,EAA0C,EAA1CA,UAClB,OACE,eAAC6jB,GAAD,CAAajsB,GAAE,sBAAiBoI,EAAUlG,SAA1C,SACE,eAACgqB,GAAD,UACE,gBAAC,KAAD,WACE,eAAC,KAAD,UACE,gBAAC,KAAD,CAAMpI,eAAe,gBAAgBrD,WAAW,SAAhD,UACE,gBAAC,KAAD,CAAKzG,GAAG,OAAR,UACE,eAAC,MAAD,CAAMD,SAAS,OAAf,SAAuB3R,EAAUhI,SACjC,gBAAC,MAAD,CAAM2Z,SAAS,OAAO6R,GAAG,MAAMS,WAAW,OAAOxS,MAAI,EAArD,cACIrG,GAAapL,EAAUiB,gBAG7B,eAAC,KAAD,CAAMoS,MAAM,OAAOmQ,GAAG,OAAtB,SAEE,eAAC,GAAD,CAAc1pB,QAASkG,EAAUlG,QAASwQ,KAAK,gBAIrD,eAAC,KAAD,UACE,eAAC,KAAD,CAAKsH,GAAG,OAAR,SACE,eAAC,GAAD,CAASD,SAAS,OAAO9D,MAAO7N,EAAUoB,6BAiEzC8iB,GAxDkB,WAC/B,IAAMvH,EAAYzW,KACVzE,EAAM2M,eAAN3M,EAEF0iB,EAAmB3d,mBAAQ,WAC/B,OAAO7T,OAAOmI,OAAO6hB,GAClBpoB,MAAK,cAA+B,IAAtBvC,EAAqB,EAA3BkD,KAAmBlB,EAAQ,EAAdkB,KAEpB,OAAOlD,GAAKgC,EAAKujB,KAAKC,IAAL,OAASxlB,QAAT,IAASA,OAAT,EAASA,EAAGoP,gBAAkBmW,KAAKC,IAAL,OAASxjB,QAAT,IAASA,OAAT,EAASA,EAAGoN,iBAAmB,EAAI,GAAM,KAEzF5O,MAAM,EAAG+kB,KAAK6M,IAAI,GAAIzxB,OAAOmI,OAAO6hB,GAAWrqB,WACjD,CAACqqB,IAEE0H,EAAc/V,iBAAuB,MACrCgW,EAAchW,kBAAgB,GAwBpC,OApBA1Z,qBAAU,WACR,IAAM2vB,EAAiBC,aAAY,WAC7BH,EAAY3lB,UACV2lB,EAAY3lB,QAAQ+lB,aAAeJ,EAAY3lB,QAAQgmB,YAAcL,EAAY3lB,QAAQsf,YAC3FsG,EAAY5lB,SAAU,EACsB,IAAnC2lB,EAAY3lB,QAAQ+lB,aAC7BH,EAAY5lB,SAAU,GAExB2lB,EAAY3lB,QAAQukB,SAClBqB,EAAY5lB,QAAU2lB,EAAY3lB,QAAQ+lB,WAAa,EAAIJ,EAAY3lB,QAAQ+lB,WAAa,EAC5F,MAGH,IAEH,OAAO,WACLE,cAAcJ,MAEf,IAE6B,IAA5BJ,EAAiB7xB,QAAiB6xB,EAAiBrH,MAAK,SAAC8H,GAAD,OAAWA,EAAM1vB,QAK3E,uCACE,eAAC,KAAD,CAAS+d,MAAM,KAAK1B,GAAG,OAAOyL,GAAG,OAAjC,SACGvb,EAAE,gBAEL,eAACsiB,GAAD,CAAe1S,IAAKgT,EAApB,SACGF,EAAiB3wB,KAAI,SAACoxB,GAAD,aACpBA,EAAM1vB,KAAO,eAAC,GAAD,CAAwD8K,UAAW4kB,EAAM1vB,MAAzE,mCAAiC0vB,EAAM1vB,YAAvC,aAAiC,EAAY4E,UAAuC,aAVhG,MCzDI+qB,GAxCkB,WAC/B,IAAQpjB,EAAM2M,eAAN3M,EACR7M,qBAAU,WACRypB,OAAO4E,SAAS,EAAG,KAClB,IAEH,IAAMtG,EAAYzW,KAEZ0W,EAAkBpW,mBAAQ,WAC9B,OAAO7T,OAAOmI,OAAO6hB,GAClBnpB,KAAI,SAACiT,GAAD,OAAWA,EAAMvR,QACrB8Q,QAAO,SAACS,GAAD,OAAWA,OACpB,CAACkW,IAEJ,EAAsB5M,eAAfC,EAAP,oBACM8U,EAAkBze,GAAc2J,GAEtC,OACE,gBAAC+M,GAAA,EAAD,WACE,eAAC,KAAD,CAAS9J,MAAM,KAAK1B,GAAG,OAAvB,SACG9P,EAAE,oBAEJuO,EAAY1d,OAAS,EACpB,eAAC,GAAD,CAAYuV,WAAYid,IAExB,eAAC7H,GAAD,CAAevB,eAAe,SAA9B,SACE,eAAC,MAAD,CAAM6B,GAAG,OAAOD,GAAG,OAAO7L,MAAI,EAA9B,SACGhQ,EAAE,qCAIT,eAAC,GAAD,IACA,eAAC,KAAD,CAASwR,MAAM,KAAK+J,GAAG,OAAOzL,GAAG,OAAO7Z,GAAG,oBAA3C,SACG+J,EAAE,gBAEL,eAAC,GAAD,CAAYoG,WAAY+U,Q,SCbfmI,GArBI,SAACjrB,GAClB,MAAoCrF,wBAA6ByB,GAAjE,mBAAO8uB,EAAP,KAAmBC,EAAnB,KAiBA,OAfArwB,qBAAU,WACR,IAAMswB,EAAS,uCAAG,4BAAAlzB,EAAA,sEACKiE,MAAM,GAAD,OAZX,+EAYW,OAAmB6D,IAD7B,OAGM,OAFhBpH,EADU,QAGLyyB,QACTzyB,EAAO0yB,OAAOC,MAAK,YAAe,IAAZnwB,EAAW,EAAXA,KACpB+vB,EAAc/vB,EAAKowB,QALP,2CAAH,qDASXxrB,GACForB,MAED,CAACprB,IAEGkrB,GCaH3C,GAAgBhY,KAAOW,IAAV,8OAWbua,GAAgBlb,aAAOmb,KAAPnb,CAAH,6HASbob,GAAgC,CAAEC,MAAO,GAgMhCC,GA9LuD,SAAC,GAIhE,IAFgBlD,EAEjB,EAHJ9W,MACE+W,OAAU5oB,QAGZ,EAAuBmU,gBAAfC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KACN1M,EAAM2M,eAAN3M,EAGR7M,qBAAU,WACRypB,OAAO4E,SAAS,EAAG,KAClB,IAGH,IAAMnpB,EAAU2oB,EAAaxZ,cAEvB2c,EAAUb,GAAWjrB,GAErBkG,E7BwHoB,SAAClG,GAAwD,IAAD,EAC5EwM,EAAeJ,KACfK,EAAkBJ,KAExB,GAAKrM,GAAY+Q,aAAU/Q,GAS3B,OAJKwM,EAAaxM,IAChByM,EAAgB,CAACzM,IAGnB,UAAOwM,EAAaxM,UAApB,aAAO,EAAuB5E,K6BrIZ2wB,CAAa/rB,GACzBgsB,E7BuIwB,SAAChsB,GAC/B,IAAMgL,EAAWC,eAEX+gB,EADQrhB,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAK/E,OAAO8F,UAAU5L,MAC/CkD,cAC5B,EAA0BvI,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc6B,EAAd,KAiBA,OAfAC,qBAAU,WACR,IAAMqB,EAAK,uCAAG,gCAAAjE,EAAA,sEACmCqS,GAAmBvK,GADtD,gBACGE,EADH,EACJlH,MAAmBuJ,EADf,EACeA,WACtBrC,GAAcqC,GACjByI,EAASihB,aAAsB,CAAE7iB,aAAcpJ,EAASkD,cAAeX,KAErErC,GACFrF,EAASqF,GANC,2CAAH,qDASN8rB,GAAkBhzB,GACrBmD,MAED,CAAC6D,EAASgL,EAAUhS,EAAOgzB,IAEvBA,E6B5JeE,CAAiBlsB,GACjCwN,EAAY9J,GAAY,OAACsoB,QAAD,IAACA,IAAiB,IAC1CxgB,E7B6N4B,SAACxL,GACnC,IAAMgL,EAAWC,eAETO,EADMb,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAK/E,OAAO8F,UAAU5L,MACnEwL,aACR,EAA0B7Q,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc6B,EAAd,KAgBA,OAdAC,qBAAU,WACR,IAAMqB,EAAK,uCAAG,gCAAAjE,EAAA,sEAC8BoQ,GAAuBtI,GADrD,gBACGE,EADH,EACJlH,MAAmBoC,EADf,EACeA,KACvB8E,EACFrF,GAAS,GACAO,GACT4P,EAASmhB,aAAwB,CAAE/iB,aAAcpJ,EAASwL,aAAcpQ,KAL9D,2CAAH,qDAQNoQ,GAAiBxS,GACpBmD,MAED,CAAC6D,EAASgL,EAAUhS,EAAOwS,IAEvBA,E6BjPc4gB,CAAqBpsB,GACpCqL,E7B4JyB,SAACrL,GAChC,IAAMgL,EAAWC,eAETI,EADMV,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAK/E,OAAO8F,UAAU5L,MACnEqL,UACR,EAA0B1Q,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc6B,EAAd,KAiBA,OAfAC,qBAAU,WACR,IAAMqB,EAAK,uCAAG,gCAAAjE,EAAA,sEAC8BkQ,GAAoBpI,GADlD,gBACGE,EADH,EACJlH,MAAmBoC,EADf,EACeA,MACtB8E,GAAc9E,GACjB4P,EAASqhB,aAAqB,CAAEjjB,aAAcpJ,EAASqL,UAAWjQ,KAEhE8E,GACFrF,EAASqF,GANC,2CAAH,qDASNmL,GAAcrS,GACjBmD,MAED,CAAC6D,EAASgL,EAAUhS,EAAOqS,IAEvBA,E6BjLWihB,CAAkBtsB,GAG9BusB,E7BiLyB,SAC/BvsB,EACAuJ,EACAijB,GAEA,IAAMxhB,EAAWC,eACX0B,EAAQhC,cAAY,SAACC,GAAD,OAAqBA,EAAMC,KAAK/E,OAAO8F,UAAU5L,MACrEusB,EAAY5f,EAAM4f,UAAUhjB,GAClC,EAA0B5O,oBAAS,GAAnC,mBAAO3B,EAAP,KAAc6B,EAAd,KAGM4xB,EAAyB9f,EAAM4f,UAAUG,uBACzCxzB,EAA2C,IAA1BC,YAAY,IAAIC,MACjCoQ,EAAiBrQ,YAAYwzB,aAAYC,aAAI1zB,EAAgBszB,KAwBnE,OAtBA1xB,qBAAU,WACR,IAAMqB,EAAK,uCAAG,gCAAAjE,EAAA,sEACiCoR,GAAoBtJ,EAASuJ,EAAUC,GADxE,gBACJpO,EADI,EACJA,KAAayxB,EADT,EACE7zB,MACVoC,GACF4P,EACE8hB,aAAqB,CACnB1jB,aAAcpJ,EACd+sB,gBAAiBxjB,EACjBgjB,UAAWnxB,EACXsxB,uBAAwBljB,KAI1BqjB,GACFhyB,GAAS,GAbC,2CAAH,qDAgBN0xB,GAAcvzB,GACjBmD,MAED,CAAC6D,EAASgL,EAAUhS,EAAOuQ,EAAUkjB,EAAwBF,EAAW/iB,EAAgBgjB,IAEpFD,E6BtNWS,CAAkBhtB,EjD3EN,KiD2EiC2rB,IACzDsB,EAAoBvgB,mBAAQ,WAEhC,GAAI6f,GAAarmB,GAAaqmB,EAAU/zB,OAAS,EAC/C,MAAM,GAAN,oBACK+zB,GADL,CAEE,CACE9iB,MAAM,IAAIrQ,MAAO0tB,UAAY,IAC7B5c,KAAMqiB,EAAUA,EAAU/zB,OAAS,GAAG2R,MACtCA,MAAK,OAAEjE,QAAF,IAAEA,OAAF,EAAEA,EAAWiB,SAClBiD,KAAI,OAAElE,QAAF,IAAEA,OAAF,EAAEA,EAAWiB,SACjBkD,IAAKkiB,EAAUA,EAAU/zB,OAAS,GAAG2R,WAK1C,CAACoiB,EAAWrmB,IAEf,EAA6C+P,eAA7C,mBAAOiX,EAAP,KAAwBC,EAAxB,KAEA,OACE,eAAClK,GAAA,EAAD,CAAM/kB,OAAM,OAAEgI,QAAF,IAAEA,OAAF,EAAEA,EAAWhI,OAAzB,SACGgI,EACEA,EAAUsB,OAYT,uCAEE,gBAAC,KAAD,CAAMoa,eAAe,gBAAgBnK,GAAG,OAAOiK,cAAe,CAAC,SAAU,SAAU,OAAnF,UACE,gBAAC,KAAD,CAAajK,GAAG,OAAhB,UACE,eAAC,KAAD,CAAM3Z,GAAG,QAAT,SACE,eAAC,MAAD,CAAM2U,MAAM,UAAZ,SAAuB9K,EAAE,YAE3B,eAAC,KAAD,CAAM7J,GAAG,eAAT,SACE,eAAC,MAAD,CAAM2U,MAAM,UAAZ,SAAuB9K,EAAE,cAE3B,gBAAC,KAAD,WACE,eAAC,MAAD,CAAM+hB,GAAG,MAAT,SAAgBxjB,EAAUhI,SAC1B,eAAC,MAAD,qBAAW8iB,aAAahhB,GAAxB,aAGJ,gBAAC,KAAD,CAAM4hB,eAAgB,CAAC,KAAM,KAAM,YAAasB,GAAI,CAAC,MAAO,MAAO,GAAnE,UACE,eAAC,KAAD,CAAcwG,GAAG,MAAMjX,MAAM,UAAUqO,KAAMC,aAAgB/gB,EAAS,WAAtE,SACG2H,EAAE,6BAEJmkB,GACC,eAACL,GAAD,CAAe3K,KAAMgL,EAASsB,IAAI,+BAA+B5X,OAAO,SAAxE,SACE,eAAC,KAAD,CAAOxF,IAAI,uBAAuB0J,OAAQ,GAAIH,MAAO,GAAItJ,IAAKtI,EAAE,mCAGpE,eAAC,GAAD,CAAU0K,KAAM6a,EAAgBpsB,SAASd,GAAU0X,QAAS,kBAAMyV,EAAkBntB,YAGxF,gBAAC,KAAD,CAAM4hB,eAAe,gBAAgBF,cAAe,CAAC,SAAU,SAAU,SAAU,OAAnF,UACE,gBAAC,KAAD,CAAMA,cAAc,SAASjK,GAAI,CAAC,MAAO,MAAzC,UACE,gBAAC,KAAD,CAAM8G,WAAW,SAAjB,UACE,eAAC,GAAD,CAAc/N,KAAK,OAAOxQ,QAASA,IACnC,eAAC,MAAD,CACE8X,GAAG,OACHH,MAAI,EACJwS,WAAW,MACXtS,SAAUzD,GAAQC,EAAO,OAAS,OAClCzW,GAAG,wBALL,SAOGsI,EAAUd,OAEb,gBAAC,MAAD,CAAM0S,GAAG,OAAOqS,WAAW,IAAI1X,MAAM,aAAaoF,SAAUzD,GAAQC,EAAO,OAAS,OAApF,cACInO,EAAUhI,OADd,UAIF,gBAAC,KAAD,CAAMglB,GAAG,MAAMpL,GAAG,OAAOyG,WAAW,SAApC,UACE,gBAAC,MAAD,CAAMmL,GAAG,OAAO/R,MAAI,EAACE,SAAS,OAA9B,cACIvG,GAAapL,EAAUiB,SAAU,CAAEsK,SAAU,gBAEjD,eAAC,GAAD,CAASsC,MAAO7N,EAAUoB,eAAgBkX,WAAY,YAG1D,gBAAC,KAAD,WACE,eAAC,KAAD,CAAM1gB,GAAE,eAAUkC,GAAlB,SACE,eAAC,KAAD,CAAQ0pB,GAAG,MAAMtQ,QAAQ,YAAzB,SACGzR,EAAE,qBAGP,eAAC,KAAD,CAAM7J,GAAE,8BAAyBkC,GAAjC,SACE,eAAC,KAAD,UAAS2H,EAAE,mBAMjB,gBAAC,GAAD,WACE,eAAC,KAAD,UACE,gBAAC,KAAD,CAAK1F,EAAE,OAAP,UACE,eAAC,MAAD,CAAM0V,MAAI,EAAC2Q,OAAK,EAAC7V,MAAM,YAAYoF,SAAS,OAAO6H,cAAc,YAAjE,SACG/X,EAAE,eAEL,gBAAC,MAAD,CAAMgQ,MAAI,EAACE,SAAS,OAApB,cACIvG,GAAapL,EAAU3O,iBAE3B,eAAC,GAAD,CAASwc,MAAO7N,EAAUhJ,qBAE1B,eAAC,MAAD,CAAMgmB,GAAG,OAAOvL,MAAI,EAAClF,MAAM,YAAYoF,SAAS,OAAO6H,cAAc,YAArE,SACG/X,EAAE,gBAEL,gBAAC,MAAD,CAAMgQ,MAAI,EAACE,SAAS,OAAO6H,cAAc,YAAzC,cACIpO,GAAapL,EAAU7O,cAE3B,eAAC,GAAD,CAAS0c,MAAO7N,EAAUjJ,kBAE1B,eAAC,MAAD,CAAMimB,GAAG,OAAOvL,MAAI,EAAClF,MAAM,YAAYoF,SAAS,OAAO6H,cAAc,YAArE,SACG/X,EAAE,eAEL,gBAAC,MAAD,CAAMgQ,MAAI,EAACE,SAAS,OAApB,cACIvG,GAAapL,EAAU5O,kBAG3B,eAAC,MAAD,CAAM4rB,GAAG,OAAOvL,MAAI,EAAClF,MAAM,YAAYoF,SAAS,OAAO6H,cAAc,YAArE,SACG/X,EAAE,sBAEL,eAAC,MAAD,CAAMgQ,MAAI,EAACE,SAAS,OAApB,SACGvG,GAAapL,EAAU/I,QAAS,CAAEyU,WAAW,WAKpD,eAAC,GAAD,CACEwH,QAAQ,QACR/N,UAAWA,EACXnF,UAAWA,EACXwhB,eAAgBuF,OAKpB,eAAC,KAAD,CAAS9T,MAAM,KAAK1B,GAAG,OAAOyL,GAAG,OAAjC,mBAIA,eAAC,GAAD,CAAW1V,UAAWA,IAEtB,eAAC,KAAD,CAAS2L,MAAM,KAAK1B,GAAG,OAAOyL,GAAG,OAAjC,SACGvb,EAAE,kBAGL,eAAC,GAAD,CAAkB6D,aAAcA,OAjIlC,eAAC,KAAD,UACE,eAAC,KAAD,CAAKvJ,EAAE,OAAP,SACE,gBAAC,MAAD,WACG0F,EAAE,4DACH,eAAC,KAAD,CAAMmO,MAAO,CAAEkH,QAAS,SAAUjF,WAAY,OAASja,GAAE,eAAUkC,GAAnE,SACG2H,EAAE,kBAgIb,eAAC,KAAD,CAAMub,GAAG,OAAOtB,eAAe,SAA/B,SACE,eAACkI,GAAA,EAAD,SCpOKuD,GAdc,SAAC5T,GAC5B,IAEczZ,EAEVyZ,EAHF5H,MACE+W,OAAU5oB,QAKd,OAAK+Q,qBAAU/Q,EAAQmP,eAGhB,eAAC,GAAD,eAAesK,IAFb,eAAC,IAAD,CAAU3b,GAAG,OCoBTwvB,UAvBQ,WACrB,OACE,uBAAKxX,MAAO,CAAEiC,WAAY,SAA1B,UACE,eAACwV,GAAA,EAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,GAAD,IACA,eAAC,IAAD,CAAOC,KAAK,QAAQC,OAAK,EAAzB,SACE,eAAC,GAAD,MAEF,eAAC,IAAD,CAAOD,KAAK,cAAcC,OAAK,EAA/B,SACE,eAACC,GAAD,MAEF,eAAC,IAAD,CAAOF,KAAK,eAAeC,OAAK,EAAhC,SACE,eAACE,GAAD,MAEF,eAAC,IAAD,CAAOF,OAAK,EAACD,KAAM,CAAC,wBAAyB,wBAAyBI,UAAWP,KACjF,eAAC,IAAD,CAAOI,OAAK,EAACD,KAAM,CAAC,uBAAwB,sBAAuB,uBAAwBI,UAAWlF","file":"static/js/9.c254298f.chunk.js","sourcesContent":["export interface Block {\r\n  number: number\r\n  timestamp: string\r\n}\r\n\r\nexport interface ChartEntry {\r\n  date: number\r\n  volumeUSD: number\r\n  liquidityUSD: number\r\n}\r\n\r\n/**\r\n * Formatted type for Candlestick charts\r\n */\r\nexport interface PriceChartEntry {\r\n  time: number\r\n  open: number\r\n  close: number\r\n  high: number\r\n  low: number\r\n}\r\n\r\nexport enum TransactionType {\r\n  SWAP,\r\n  MINT,\r\n  BURN,\r\n}\r\n\r\nexport type Transaction = {\r\n  type: TransactionType\r\n  hash: string\r\n  timestamp: string\r\n  sender: string\r\n  token0Symbol: string\r\n  token1Symbol: string\r\n  token0Address: string\r\n  token1Address: string\r\n  amountUSD: number\r\n  amountToken0: number\r\n  amountToken1: number\r\n}\r\n\r\nexport interface ProtocolData {\r\n  volumeUSD: number\r\n  volumeUSDChange: number // in 24h, as percentage\r\n\r\n  liquidityUSD: number\r\n  liquidityUSDChange: number // in 24h, as percentage\r\n\r\n  txCount: number\r\n  txCountChange: number\r\n}\r\n\r\nexport interface ProtocolState {\r\n  readonly overview?: ProtocolData\r\n\r\n  readonly chartData?: ChartEntry[]\r\n\r\n  readonly transactions?: Transaction[]\r\n}\r\n\r\n// POOLS\r\n\r\nexport interface PoolData {\r\n  address: string\r\n\r\n  token0: {\r\n    name: string\r\n    symbol: string\r\n    address: string\r\n  }\r\n\r\n  token1: {\r\n    name: string\r\n    symbol: string\r\n    address: string\r\n  }\r\n\r\n  volumeUSD: number\r\n  volumeUSDChange: number\r\n  volumeUSDWeek: number\r\n  volumeUSDChangeWeek: number\r\n\r\n  totalFees24h: number\r\n  totalFees7d: number\r\n  lpFees24h: number\r\n  lpFees7d: number\r\n  lpApr7d: number\r\n\r\n  liquidityUSD: number\r\n  liquidityUSDChange: number\r\n\r\n  token0Price: number\r\n  token1Price: number\r\n\r\n  liquidityToken0: number\r\n  liquidityToken1: number\r\n}\r\n\r\nexport interface PoolsState {\r\n  byAddress: {\r\n    [address: string]: {\r\n      data?: PoolData\r\n      chartData?: ChartEntry[]\r\n      transactions?: Transaction[]\r\n    }\r\n  }\r\n}\r\n\r\n// TOKENS\r\n\r\nexport type TokenData = {\r\n  exists: boolean\r\n\r\n  name: string\r\n  symbol: string\r\n  address: string\r\n\r\n  volumeUSD: number\r\n  volumeUSDChange: number\r\n  volumeUSDWeek: number\r\n  txCount: number\r\n\r\n  liquidityToken: number\r\n  liquidityUSD: number\r\n  liquidityUSDChange: number\r\n\r\n  priceUSD: number\r\n  priceUSDChange: number\r\n  priceUSDChangeWeek: number\r\n}\r\n\r\nexport interface TokensState {\r\n  byAddress: {\r\n    [address: string]: {\r\n      data?: TokenData\r\n      poolAddresses?: string[]\r\n      chartData?: ChartEntry[]\r\n      priceData: {\r\n        oldestFetchedTimestamp?: number\r\n        [secondsInterval: number]: PriceChartEntry[] | undefined\r\n      }\r\n      transactions?: Transaction[]\r\n    }\r\n  }\r\n}\r\n\r\n// Info redux state\r\nexport interface InfoState {\r\n  protocol: ProtocolState\r\n  pools: PoolsState\r\n  tokens: TokensState\r\n}\r\n","export const MINIMUM_SEARCH_CHARACTERS = 2\r\n\r\nexport const WEEKS_IN_YEAR = 52.1429\r\n\r\nexport const TOTAL_FEE = 0.0025\r\nexport const LP_HOLDERS_FEE = 0.0017\r\nexport const TREASURY_FEE = 0.0003\r\nexport const BUYBACK_FEE = 0.0005\r\n\r\nexport const BASE_URL = 'https://uranus.finance'\r\n// export const BASE_EXPLORER_URL = 'https://cronos.crypto.org/explorer'\r\n\r\nexport const TAN_FINANCE_START = 1643046369 // FIXME start time\r\nexport const ONE_DAY_UNIX = 86400 // 24h * 60m * 60s\r\nexport const ONE_HOUR_SECONDS = 3600\r\n\r\nexport const ITEMS_PER_INFO_TABLE_PAGE = 10\r\n\r\n// These tokens are either incorrectly priced or have some other issues that spoil the query data\r\n// None of them present any interest as they have almost 0 daily trade volume\r\nexport const TOKEN_BLACKLIST = [\r\n  // These ones are copied from v1 info\r\n  '0x495c7f3a713870f68f8b418b355c085dfdc412c3',\r\n  '0xc3761eb917cd790b30dad99f6cc5b4ff93c4f9ea',\r\n  '0xe31debd7abff90b06bca21010dd860d8701fd901',\r\n  '0xfc989fbb6b3024de5ca0144dc23c18a063942ac1',\r\n  '0xe40fc6ff5f2895b44268fd2e1a421e07f567e007',\r\n  '0xfd158609228b43aa380140b46fff3cdf9ad315de',\r\n  '0xc00af6212fcf0e6fd3143e692ccd4191dc308bea',\r\n  '0x205969b3ad459f7eba0dee07231a6357183d3fb6',\r\n  '0x0bd67d358636fd7b0597724aa4f20beedbf3073a',\r\n  '0xedf5d2a561e8a3cb5a846fbce24d2ccd88f50075',\r\n  '0x702b0789a3d4dade1688a0c8b7d944e5ba80fc30',\r\n  '0x041929a760d7049edaef0db246fa76ec975e90cc',\r\n  '0xba098df8c6409669f5e6ec971ac02cd5982ac108',\r\n  '0x1bbed115afe9e8d6e9255f18ef10d43ce6608d94',\r\n  '0xe99512305bf42745fae78003428dcaf662afb35d',\r\n  '0xbE609EAcbFca10F6E5504D39E3B113F808389056',\r\n  '0x847daf9dfdc22d5c61c4a857ec8733ef5950e82e',\r\n  '0xdbf8913dfe14536c0dae5dd06805afb2731f7e7b',\r\n  // These ones are newly found\r\n  '0xF1D50dB2C40b63D2c598e2A808d1871a40b1E653',\r\n  '0x4269e4090ff9dfc99d8846eb0d42e67f01c3ac8b',\r\n]\r\n","import { TOTAL_FEE, LP_HOLDERS_FEE, WEEKS_IN_YEAR } from 'config/constants/info'\r\n\r\n/**\r\n * Get increase/decrease of value compared to the previous value (e.g. 24h volume compared to 24h volume the day before )\r\n * @param valueNow - more recent value\r\n * @param valueBefore - value to compare with\r\n */\r\nexport const getAmountChange = (valueNow?: number, valueBefore?: number) => {\r\n  if (valueNow && valueBefore) {\r\n    return valueNow - valueBefore\r\n  }\r\n  if (valueNow) {\r\n    return valueNow\r\n  }\r\n  return 0\r\n}\r\n\r\n/**\r\n * Get increase/decrease of value compared to the previous value as a percentage\r\n * @param valueNow - more recent value\r\n * @param valueBefore - value to compare with\r\n */\r\nexport const getPercentChange = (valueNow?: number, valueBefore?: number): number => {\r\n  if (valueNow && valueBefore) {\r\n    return ((valueNow - valueBefore) / valueBefore) * 100\r\n  }\r\n  return 0\r\n}\r\n\r\n/**\r\n * Given current value and value 1 and 2 periods (e.g. 1day + 2days, 1week - 2weeks) returns the amount change for latest period\r\n * and percentage change compared to the previous period.\r\n * @param valueNow - current value\r\n * @param valueOnePeriodAgo - value 1 period ago (e.g. 1 day or 1 week ago), period unit must be same as valueTwoPeriodsAgo\r\n * @param valueTwoPeriodsAgo - value 2 periods ago (e.g. 2 days or 2 weeks ago), period unit must be same as valueOnePeriodAgo\r\n * @returns amount change for the latest period and percetage change compared to previous period\r\n */\r\nexport const getChangeForPeriod = (\r\n  valueNow?: number,\r\n  valueOnePeriodAgo?: number,\r\n  valueTwoPeriodsAgo?: number,\r\n): [number, number] => {\r\n  const currentPeriodAmount = getAmountChange(valueNow, valueOnePeriodAgo)\r\n  const previousPeriodAmount = getAmountChange(valueOnePeriodAgo, valueTwoPeriodsAgo)\r\n  const percentageChange = getPercentChange(currentPeriodAmount, previousPeriodAmount)\r\n  return [currentPeriodAmount, percentageChange]\r\n}\r\n\r\nexport const getLpFeesAndApr = (volumeUSD: number, volumeUSDWeek: number, liquidityUSD: number) => {\r\n  const totalFees24h = volumeUSD * TOTAL_FEE\r\n  const totalFees7d = volumeUSDWeek * TOTAL_FEE\r\n  const lpFees24h = volumeUSD * LP_HOLDERS_FEE\r\n  const lpFees7d = volumeUSDWeek * LP_HOLDERS_FEE\r\n\r\n  const lpApr7d = liquidityUSD > 0 ? (volumeUSDWeek * LP_HOLDERS_FEE * WEEKS_IN_YEAR * 100) / liquidityUSD : 0\r\n  return {\r\n    totalFees24h,\r\n    totalFees7d,\r\n    lpFees24h,\r\n    lpFees7d,\r\n    lpApr7d: lpApr7d !== Infinity ? lpApr7d : 0,\r\n  }\r\n}\r\n","import { getUnixTime, subDays, subWeeks, startOfMinute } from 'date-fns'\r\nimport { request } from 'graphql-request'\r\n\r\n/**\r\n * Helper function to get large amount GrqphQL subqueries\r\n * @param queryConstructor constructor function that combines subqueries\r\n * @param subqueries individual queries\r\n * @param endpoint GraphQL endpoint\r\n * @param skipCount how many subqueries to fire at a time\r\n * @returns\r\n */\r\nexport const multiQuery = async (\r\n  queryConstructor: (subqueries: string[]) => string,\r\n  subqueries: string[],\r\n  endpoint: string,\r\n  skipCount = 1000,\r\n) => {\r\n  let fetchedData = {}\r\n  let allFound = false\r\n  let skip = 0\r\n  try {\r\n    while (!allFound) {\r\n      let end = subqueries.length\r\n      if (skip + skipCount < subqueries.length) {\r\n        end = skip + skipCount\r\n      }\r\n      const subqueriesSlice = subqueries.slice(skip, end)\r\n      // eslint-disable-next-line no-await-in-loop\r\n      const result = await request(endpoint, queryConstructor(subqueriesSlice))\r\n      fetchedData = {\r\n        ...fetchedData,\r\n        ...result,\r\n      }\r\n      allFound = Object.keys(result).length < skipCount || skip + skipCount > subqueries.length\r\n      skip += skipCount\r\n    }\r\n    return fetchedData\r\n  } catch (error) {\r\n    console.error('Failed to fetch info data', error)\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Returns UTC timestamps for 24h ago, 48h ago, 7d ago and 14d ago relative to current date and time\r\n */\r\nexport const getDeltaTimestamps = (): [number, number, number, number] => {\r\n  const utcCurrentTime = getUnixTime(new Date()) * 1000\r\n  const t24h = getUnixTime(startOfMinute(subDays(utcCurrentTime, 1)))\r\n  const t48h = getUnixTime(startOfMinute(subDays(utcCurrentTime, 2)))\r\n  const t7d = getUnixTime(startOfMinute(subWeeks(utcCurrentTime, 1)))\r\n  const t14d = getUnixTime(startOfMinute(subWeeks(utcCurrentTime, 2)))\r\n  return [t24h, t48h, t7d, t14d]\r\n}\r\n","import { gql } from 'graphql-request'\r\nimport { useState, useEffect } from 'react'\r\nimport { multiQuery } from 'views/Info/utils/infoQueryHelpers'\r\nimport { BLOCKS_CLIENT } from 'config/constants/endpoints'\r\nimport { Block } from 'state/info/types'\r\n\r\nconst getBlockSubqueries = (timestamps: number[]) =>\r\n  timestamps.map((timestamp) => {\r\n    return `t${timestamp}:blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: ${timestamp}, timestamp_lt: ${\r\n      timestamp + 600\r\n    } }) {\r\n      number\r\n    }`\r\n  })\r\n\r\nconst blocksQueryConstructor = (subqueries: string[]) => {\r\n  return gql`query blocks {\r\n    ${subqueries}\r\n  }`\r\n}\r\n\r\n/**\r\n * @notice Fetches block objects for an array of timestamps.\r\n * @param {Array} timestamps\r\n */\r\nexport const getBlocksFromTimestamps = async (\r\n  timestamps: number[],\r\n  sortDirection: 'asc' | 'desc' = 'desc',\r\n  skipCount = 500,\r\n): Promise<Block[]> => {\r\n  if (timestamps?.length === 0) {\r\n    return []\r\n  }\r\n\r\n  const fetchedData: any = await multiQuery(\r\n    blocksQueryConstructor,\r\n    getBlockSubqueries(timestamps),\r\n    BLOCKS_CLIENT,\r\n    skipCount,\r\n  )\r\n\r\n  const sortingFunction =\r\n    sortDirection === 'desc' ? (a: Block, b: Block) => b.number - a.number : (a: Block, b: Block) => a.number - b.number\r\n\r\n  const blocks: Block[] = []\r\n  if (fetchedData) {\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const key of Object.keys(fetchedData)) {\r\n      if (fetchedData[key].length > 0) {\r\n        blocks.push({\r\n          timestamp: key.split('t')[1],\r\n          number: parseInt(fetchedData[key][0].number, 10),\r\n        })\r\n      }\r\n    }\r\n    // graphql-request does not guarantee same ordering of batched requests subqueries, hence manual sorting\r\n    blocks.sort(sortingFunction)\r\n  }\r\n  return blocks\r\n}\r\n\r\n/**\r\n * for a given array of timestamps, returns block entities\r\n * @param timestamps\r\n */\r\nexport const useBlocksFromTimestamps = (\r\n  timestamps: number[],\r\n  sortDirection: 'asc' | 'desc' = 'desc',\r\n  skipCount = 1000,\r\n): {\r\n  blocks?: Block[]\r\n  error: boolean\r\n} => {\r\n  const [blocks, setBlocks] = useState<Block[]>()\r\n  const [error, setError] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await getBlocksFromTimestamps(timestamps, sortDirection, skipCount)\r\n      if (result.length === 0) {\r\n        setError(true)\r\n      } else {\r\n        setBlocks(result)\r\n      }\r\n    }\r\n    if (!blocks && !error) {\r\n      fetchData()\r\n    }\r\n  }) // TODO: dep array?\r\n\r\n  return {\r\n    blocks,\r\n    error,\r\n  }\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { getChangeForPeriod, getPercentChange } from 'views/Info/utils/infoDataHelpers'\r\nimport { ProtocolData } from 'state/info/types'\r\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\r\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\r\n\r\ninterface TanFactory {\r\n  totalTransactions: string\r\n  totalVolumeUSD: string\r\n  totalLiquidityUSD: string\r\n}\r\n\r\ninterface OverviewResponse {\r\n  TanFactories: TanFactory[]\r\n}\r\n\r\n/**\r\n * Latest Liquidity, Volume and Transaction count\r\n */\r\nconst getOverviewData = async (block?: number): Promise<{ data?: OverviewResponse; error: boolean }> => {\r\n  try {\r\n    const query = gql`query overview {\r\n      TanFactories(\r\n        ${block ? `block: { number: ${block}}` : ``} \r\n        first: 1) {\r\n        totalTransactions\r\n        totalVolumeUSD\r\n        totalLiquidityUSD\r\n      }\r\n    }`\r\n    const data = await request<OverviewResponse>(INFO_CLIENT, query)\r\n    return { data, error: false }\r\n  } catch (error) {\r\n    console.error('Failed to fetch info overview', error)\r\n    return { data: null, error: true }\r\n  }\r\n}\r\n\r\nconst formatTanFactoryResponse = (rawTanFactory?: TanFactory) => {\r\n  if (rawTanFactory) {\r\n    return {\r\n      totalTransactions: parseFloat(rawTanFactory.totalTransactions),\r\n      totalVolumeUSD: parseFloat(rawTanFactory.totalVolumeUSD),\r\n      totalLiquidityUSD: parseFloat(rawTanFactory.totalLiquidityUSD),\r\n    }\r\n  }\r\n  return null\r\n}\r\n\r\ninterface ProtocolFetchState {\r\n  error: boolean\r\n  data?: ProtocolData\r\n}\r\n\r\nconst useFetchProtocolData = (): ProtocolFetchState => {\r\n  const [fetchState, setFetchState] = useState<ProtocolFetchState>({\r\n    error: false,\r\n  })\r\n  const [t24, t48] = getDeltaTimestamps()\r\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24, t48])\r\n  const [block24, block48] = blocks ?? []\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { error, data } = await getOverviewData()\r\n      const { error: error24, data: data24 } = await getOverviewData(block24?.number ?? undefined)\r\n      const { error: error48, data: data48 } = await getOverviewData(block48?.number ?? undefined)\r\n      const anyError = error || error24 || error48\r\n      const overviewData = formatTanFactoryResponse(data?.TanFactories?.[0])\r\n\r\n      // When TAN is first launched, both 24 and 48 hr will be null\r\n      const overviewData24Formatted = formatTanFactoryResponse(data24?.TanFactories?.[0])\r\n      const overviewData24 = overviewData24Formatted || overviewData\r\n      const overviewData48Formatted = formatTanFactoryResponse(data48?.TanFactories?.[0]) // FIXME hard code no data for 48h\r\n      const overviewData48 = overviewData48Formatted || overviewData24 || overviewData\r\n\r\n      const allDataAvailable = overviewData && overviewData24 && overviewData48\r\n      if (anyError || !allDataAvailable) {\r\n        setFetchState({\r\n          error: true,\r\n        })\r\n      } else {\r\n        const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\r\n          overviewData.totalVolumeUSD,\r\n          overviewData24.totalVolumeUSD,\r\n          overviewData48.totalVolumeUSD,\r\n        )\r\n        const liquidityUSDChange = getPercentChange(overviewData.totalLiquidityUSD, overviewData24.totalLiquidityUSD)\r\n        // 24H transactions\r\n        const [txCount, txCountChange] = getChangeForPeriod(\r\n          overviewData.totalTransactions,\r\n          overviewData24.totalTransactions,\r\n          overviewData48.totalTransactions,\r\n        )\r\n        const protocolData: ProtocolData = {\r\n          volumeUSD,\r\n          volumeUSDChange: typeof volumeUSDChange === 'number' ? volumeUSDChange : 0,\r\n          liquidityUSD: overviewData.totalLiquidityUSD,\r\n          liquidityUSDChange,\r\n          txCount,\r\n          txCountChange,\r\n        }\r\n        setFetchState({\r\n          error: false,\r\n          data: protocolData,\r\n        })\r\n      }\r\n    }\r\n    const allBlocksAvailable = block24?.number && block48?.number\r\n    if (allBlocksAvailable && !blockError && !fetchState.data) {\r\n      fetch()\r\n    }\r\n  }, [block24, block48, blockError, fetchState])\r\n\r\n  return fetchState\r\n}\r\n\r\nexport default useFetchProtocolData\r\n","import { ONE_DAY_UNIX, TAN_FINANCE_START } from 'config/constants/info'\r\nimport { getUnixTime } from 'date-fns'\r\nimport { TransactionType } from 'state/info/types'\r\nimport { ChartEntry } from '../types'\r\nimport { MintResponse, SwapResponse, BurnResponse, TokenDayData, PairDayData, TanDayData } from './types'\r\n\r\nexport const mapMints = (mint: MintResponse) => {\r\n  return {\r\n    type: TransactionType.MINT,\r\n    hash: mint.id.split('-')[0],\r\n    timestamp: mint.timestamp,\r\n    sender: mint.to,\r\n    token0Symbol: mint.pair.token0.symbol,\r\n    token1Symbol: mint.pair.token1.symbol,\r\n    token0Address: mint.pair.token0.id,\r\n    token1Address: mint.pair.token1.id,\r\n    amountUSD: parseFloat(mint.amountUSD),\r\n    amountToken0: parseFloat(mint.amount0),\r\n    amountToken1: parseFloat(mint.amount1),\r\n  }\r\n}\r\n\r\nexport const mapBurns = (burn: BurnResponse) => {\r\n  return {\r\n    type: TransactionType.BURN,\r\n    hash: burn.id.split('-')[0],\r\n    timestamp: burn.timestamp,\r\n    sender: burn.sender,\r\n    token0Symbol: burn.pair.token0.symbol,\r\n    token1Symbol: burn.pair.token1.symbol,\r\n    token0Address: burn.pair.token0.id,\r\n    token1Address: burn.pair.token1.id,\r\n    amountUSD: parseFloat(burn.amountUSD),\r\n    amountToken0: parseFloat(burn.amount0),\r\n    amountToken1: parseFloat(burn.amount1),\r\n  }\r\n}\r\n\r\nexport const mapSwaps = (swap: SwapResponse) => {\r\n  return {\r\n    type: TransactionType.SWAP,\r\n    hash: swap.id.split('-')[0],\r\n    timestamp: swap.timestamp,\r\n    sender: swap.from,\r\n    token0Symbol: swap.pair.token0.symbol,\r\n    token1Symbol: swap.pair.token1.symbol,\r\n    token0Address: swap.pair.token0.id,\r\n    token1Address: swap.pair.token1.id,\r\n    amountUSD: parseFloat(swap.amountUSD),\r\n    amountToken0: parseFloat(swap.amount0In) - parseFloat(swap.amount0Out),\r\n    amountToken1: parseFloat(swap.amount1In) - parseFloat(swap.amount1Out),\r\n  }\r\n}\r\n\r\nexport const mapDayData = (tokenDayData: TokenDayData | TanDayData): ChartEntry => ({\r\n  date: tokenDayData.date,\r\n  volumeUSD: parseFloat(tokenDayData.dailyVolumeUSD),\r\n  liquidityUSD: parseFloat(tokenDayData.totalLiquidityUSD),\r\n})\r\n\r\nexport const mapPairDayData = (pairDayData: PairDayData): ChartEntry => ({\r\n  date: pairDayData.date,\r\n  volumeUSD: parseFloat(pairDayData.dailyVolumeUSD),\r\n  liquidityUSD: parseFloat(pairDayData.reserveUSD),\r\n})\r\n\r\ntype PoolOrTokenFetchFn = (skip: number, address: string) => Promise<{ data?: ChartEntry[]; error: boolean }>\r\ntype OverviewFetchFn = (skip: number) => Promise<{ data?: ChartEntry[]; error: boolean }>\r\n\r\n// Common helper function to retrieve chart data\r\n// Used for both Pool and Token charts\r\nexport const fetchChartData = async (\r\n  getEntityDayDatas: PoolOrTokenFetchFn | OverviewFetchFn,\r\n  address?: string,\r\n): Promise<{ data?: ChartEntry[]; error: boolean }> => {\r\n  let chartEntries: ChartEntry[] = []\r\n  let error = false\r\n  let skip = 0\r\n  let allFound = false\r\n\r\n  while (!allFound) {\r\n    // eslint-disable-next-line no-await-in-loop\r\n    const { data, error: fetchError } = await getEntityDayDatas(skip, address)\r\n    skip += 1000\r\n    allFound = (data)?data.length < 1000:false; // remove false for mainnet\r\n    error = fetchError\r\n    if (data) {\r\n      chartEntries = chartEntries.concat(data)\r\n    }\r\n  }\r\n\r\n  if (error || chartEntries.length === 0) {\r\n    return {\r\n      error: true,\r\n    }\r\n  }\r\n\r\n  const formattedDayDatas = chartEntries.reduce((accum: { [date: number]: ChartEntry }, dayData) => {\r\n    // At this stage we track unix day ordinal for each data point to check for empty days later\r\n    const dayOrdinal = parseInt((dayData.date / ONE_DAY_UNIX).toFixed(0))\r\n    return {\r\n      [dayOrdinal]: dayData,\r\n      ...accum,\r\n    }\r\n  }, {})\r\n\r\n  const availableDays = Object.keys(formattedDayDatas).map((dayOrdinal) => parseInt(dayOrdinal, 10))\r\n\r\n  const firstAvailableDayData = formattedDayDatas[availableDays[0]]\r\n  // fill in empty days ( there will be no day datas if no trades made that day )\r\n  let timestamp = firstAvailableDayData?.date ?? TAN_FINANCE_START\r\n  let latestLiquidityUSD = firstAvailableDayData?.liquidityUSD ?? 0\r\n  const endTimestamp = getUnixTime(new Date())\r\n  while (timestamp < endTimestamp - ONE_DAY_UNIX) {\r\n    timestamp += ONE_DAY_UNIX\r\n    const dayOrdinal = parseInt((timestamp / ONE_DAY_UNIX).toFixed(0), 10)\r\n    if (!Object.keys(formattedDayDatas).includes(dayOrdinal.toString())) {\r\n      formattedDayDatas[dayOrdinal] = {\r\n        date: timestamp,\r\n        volumeUSD: 0,\r\n        liquidityUSD: latestLiquidityUSD,\r\n      }\r\n    } else {\r\n      latestLiquidityUSD = formattedDayDatas[dayOrdinal].liquidityUSD\r\n    }\r\n  }\r\n\r\n  return {\r\n    data: Object.values(formattedDayDatas),\r\n    error: false,\r\n  }\r\n}\r\n","import React, { useMemo, useState } from 'react'\r\nimport { Text, Box, Card, Flex, Skeleton } from 'uranus-uikit'\r\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\r\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\r\nimport CandleChart from 'views/Info/components/InfoCharts/CandleChart'\r\nimport { TabToggleGroup, TabToggle } from 'components/TabToggle'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport { ChartEntry, TokenData, PriceChartEntry } from 'state/info/types'\r\nimport { format, fromUnixTime } from 'date-fns'\r\n\r\nenum ChartView {\r\n  LIQUIDITY,\r\n  VOLUME,\r\n  PRICE,\r\n}\r\n\r\ninterface ChartCardProps {\r\n  variant: 'pool' | 'token'\r\n  chartData: ChartEntry[]\r\n  tokenData?: TokenData\r\n  tokenPriceData?: PriceChartEntry[]\r\n}\r\n\r\nconst ChartCard: React.FC<ChartCardProps> = ({ variant, chartData, tokenData, tokenPriceData }) => {\r\n  const [view, setView] = useState(ChartView.VOLUME)\r\n  const [hoverValue, setHoverValue] = useState<number | undefined>()\r\n  const [hoverDate, setHoverDate] = useState<string | undefined>()\r\n  const { t } = useTranslation()\r\n\r\n  const currentDate = format(new Date(), 'MMM d, yyyy')\r\n\r\n  const formattedTvlData = useMemo(() => {\r\n    if (chartData) {\r\n      return chartData.map((day) => {\r\n        return {\r\n          time: fromUnixTime(day.date),\r\n          value: day.liquidityUSD,\r\n        }\r\n      })\r\n    }\r\n    return []\r\n  }, [chartData])\r\n  const formattedVolumeData = useMemo(() => {\r\n    if (chartData) {\r\n      return chartData.map((day) => {\r\n        return {\r\n          time: fromUnixTime(day.date),\r\n          value: day.volumeUSD,\r\n        }\r\n      })\r\n    }\r\n    return []\r\n  }, [chartData])\r\n\r\n  const getLatestValueDisplay = () => {\r\n    let valueToDisplay = null\r\n    if (hoverValue) {\r\n      valueToDisplay = formatAmount(hoverValue)\r\n    } else if (view === ChartView.VOLUME && formattedVolumeData.length > 0) {\r\n      valueToDisplay = formatAmount(formattedVolumeData[formattedVolumeData.length - 1]?.value)\r\n    } else if (view === ChartView.LIQUIDITY && formattedTvlData.length > 0) {\r\n      valueToDisplay = formatAmount(formattedTvlData[formattedTvlData.length - 1]?.value)\r\n    } else if (view === ChartView.PRICE && tokenData?.priceUSD) {\r\n      valueToDisplay = formatAmount(tokenData.priceUSD)\r\n    }\r\n\r\n    return valueToDisplay ? (\r\n      <Text fontSize=\"24px\" bold>\r\n        ${valueToDisplay}\r\n      </Text>\r\n    ) : (\r\n      <Skeleton height=\"36px\" width=\"128px\" />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <TabToggleGroup>\r\n        <TabToggle isActive={view === ChartView.VOLUME} onClick={() => setView(ChartView.VOLUME)}>\r\n          <Text>{t('Volume')}</Text>\r\n        </TabToggle>\r\n        <TabToggle isActive={view === ChartView.LIQUIDITY} onClick={() => setView(ChartView.LIQUIDITY)}>\r\n          <Text>{t('Liquidity')}</Text>\r\n        </TabToggle>\r\n        {variant === 'token' && (\r\n          <TabToggle isActive={view === ChartView.PRICE} onClick={() => setView(ChartView.PRICE)}>\r\n            <Text>{t('Price')}</Text>\r\n          </TabToggle>\r\n        )}\r\n      </TabToggleGroup>\r\n\r\n      <Flex flexDirection=\"column\" px=\"24px\" pt=\"24px\">\r\n        {getLatestValueDisplay()}\r\n        <Text small color=\"secondary\">\r\n          {hoverDate || currentDate}\r\n        </Text>\r\n      </Flex>\r\n\r\n      <Box px=\"24px\" height={variant === 'token' ? '250px' : '335px'}>\r\n        {view === ChartView.LIQUIDITY ? (\r\n          <LineChart data={formattedTvlData} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\r\n        ) : view === ChartView.VOLUME ? (\r\n          <BarChart data={formattedVolumeData} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\r\n        ) : view === ChartView.PRICE ? (\r\n          <CandleChart data={tokenPriceData} setValue={setHoverValue} setLabel={setHoverDate} />\r\n        ) : null}\r\n      </Box>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ChartCard\r\n","/* eslint-disable no-await-in-loop */\r\nimport { useState, useEffect } from 'react'\r\nimport { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { TAN_FINANCE_START } from 'config/constants/info'\r\nimport { ChartEntry } from 'state/info/types'\r\nimport { TanDayDatasResponse } from '../types'\r\nimport { fetchChartData, mapDayData } from '../helpers'\r\n\r\n/**\r\n * Data for displaying Liquidity and Volume charts on Overview page\r\n */\r\nconst TAN_DAY_DATAS = gql`\r\n  query overviewCharts($startTime: Int!, $skip: Int!) {\r\n    TanDayDatas(first: 1000, skip: $skip, where: { date_gt: $startTime }, orderBy: date, orderDirection: asc) {\r\n      date\r\n      dailyVolumeUSD\r\n      totalLiquidityUSD\r\n    }\r\n  }\r\n`\r\n\r\nconst getOverviewChartData = async (skip: number): Promise<{ data?: ChartEntry[]; error: boolean }> => {\r\n  try {\r\n    const { TanDayDatas } = await request<TanDayDatasResponse>(INFO_CLIENT, TAN_DAY_DATAS, {\r\n      startTime: TAN_FINANCE_START,\r\n      skip,\r\n    })\r\n    const data = TanDayDatas.map(mapDayData)\r\n    return { data, error: false }\r\n  } catch (error) {\r\n    console.error('Failed to fetch overview chart data', error)\r\n    return { error: true }\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch historic chart data\r\n */\r\nconst useFetchGlobalChartData = (): {\r\n  error: boolean\r\n  data: ChartEntry[] | undefined\r\n} => {\r\n  const [overviewChartData, setOverviewChartData] = useState<ChartEntry[] | undefined>()\r\n  const [error, setError] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { data } = await fetchChartData(getOverviewChartData)\r\n      if (data) {\r\n        setOverviewChartData(data)\r\n      } else {\r\n        setError(true)\r\n      }\r\n    }\r\n    if (!overviewChartData && !error) {\r\n      fetch()\r\n    }\r\n  }, [overviewChartData, error])\r\n\r\n  return {\r\n    error,\r\n    data: overviewChartData,\r\n  }\r\n}\r\n\r\nexport default useFetchGlobalChartData\r\n","import { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { Transaction } from 'state/info/types'\r\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\r\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\r\n\r\n/**\r\n * Transactions for Transaction table on the Home page\r\n */\r\nconst GLOBAL_TRANSACTIONS = gql`\r\n  query overviewTransactions {\r\n    mints: mints(first: 33, orderBy: timestamp, orderDirection: desc) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      to\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n    swaps: swaps(first: 33, orderBy: timestamp, orderDirection: desc) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      from\r\n      amount0In\r\n      amount1In\r\n      amount0Out\r\n      amount1Out\r\n      amountUSD\r\n    }\r\n    burns: burns(first: 33, orderBy: timestamp, orderDirection: desc) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      sender\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n  }\r\n`\r\ninterface TransactionResults {\r\n  mints: MintResponse[]\r\n  swaps: SwapResponse[]\r\n  burns: BurnResponse[]\r\n}\r\n\r\nconst fetchTopTransactions = async (): Promise<Transaction[] | undefined> => {\r\n  try {\r\n    const data = await request<TransactionResults>(INFO_CLIENT, GLOBAL_TRANSACTIONS)\r\n\r\n    if (!data) {\r\n      return undefined\r\n    }\r\n\r\n    const mints = data.mints.map(mapMints)\r\n    const burns = data.burns.map(mapBurns)\r\n    const swaps = data.swaps.map(mapSwaps)\r\n\r\n    return [...mints, ...burns, ...swaps].sort((a, b) => {\r\n      return parseInt(b.timestamp, 10) - parseInt(a.timestamp, 10)\r\n    })\r\n  } catch {\r\n    return undefined\r\n  }\r\n}\r\n\r\nexport default fetchTopTransactions\r\n","import { useState, useEffect } from 'react'\r\nimport { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\r\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\r\n\r\ninterface TopPoolsResponse {\r\n  pairDayDatas: {\r\n    id: string\r\n  }[]\r\n}\r\n\r\n/**\r\n * Initial pools to display on the home page\r\n */\r\nconst fetchTopPools = async (timestamp24hAgo: number): Promise<string[]> => {\r\n  try {\r\n    const query = gql`\r\n      query topPools($blacklist: [String!], $timestamp24hAgo: Int) {\r\n        pairDayDatas(\r\n          first: 30\r\n          where: { dailyTxns_gt: 0, token0_not_in: $blacklist, token1_not_in: $blacklist, date_gt: $timestamp24hAgo }\r\n          orderBy: dailyVolumeUSD\r\n          orderDirection: desc\r\n        ) {\r\n          id\r\n        }\r\n      }\r\n    `\r\n    const data = await request<TopPoolsResponse>(INFO_CLIENT, query, { blacklist: TOKEN_BLACKLIST, timestamp24hAgo })\r\n    // pairDayDatas id has compound id \"0xPOOLADDRESS-NUMBERS\", extracting pool address with .split('-')\r\n    return data.pairDayDatas.map((p) => p.id.split('-')[0])\r\n  } catch (error) {\r\n    console.error('Failed to fetch top pools', error)\r\n    return []\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch top addresses by volume\r\n */\r\nconst useTopPoolAddresses = (): string[] => {\r\n  const [topPoolAddresses, setTopPoolAddresse] = useState([])\r\n  const [timestamp24hAgo] = getDeltaTimestamps()\r\n  const [fetched, setFetched] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const addresses = await fetchTopPools(timestamp24hAgo)\r\n      setTopPoolAddresse(addresses)\r\n      setFetched(true)\r\n    }\r\n    if (!fetched) {\r\n      fetch()\r\n    }\r\n  }, [topPoolAddresses, timestamp24hAgo, fetched])\r\n\r\n  return topPoolAddresses\r\n}\r\n\r\nexport default useTopPoolAddresses\r\n","/* eslint-disable no-param-reassign */\r\nimport _ from 'lodash'\r\nimport { useEffect, useState } from 'react'\r\nimport { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\r\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\r\nimport { PoolData } from 'state/info/types'\r\nimport { getChangeForPeriod, getLpFeesAndApr, getPercentChange } from 'views/Info/utils/infoDataHelpers'\r\n\r\ninterface PoolFields {\r\n  id: string\r\n  reserve0: string\r\n  reserve1: string\r\n  reserveUSD: string\r\n  volumeUSD: string\r\n  token0Price: string\r\n  token1Price: string\r\n  token0: {\r\n    id: string\r\n    symbol: string\r\n    name: string\r\n  }\r\n  token1: {\r\n    id: string\r\n    symbol: string\r\n    name: string\r\n  }\r\n}\r\n\r\ninterface FormattedPoolFields\r\n  extends Omit<PoolFields, 'volumeUSD' | 'reserveUSD' | 'reserve0' | 'reserve1' | 'token0Price' | 'token1Price'> {\r\n  volumeUSD: number\r\n  reserveUSD: number\r\n  reserve0: number\r\n  reserve1: number\r\n  token0Price: number\r\n  token1Price: number\r\n}\r\n\r\ninterface PoolsQueryResponse {\r\n  now: PoolFields[]\r\n  oneDayAgo: PoolFields[]\r\n  twoDaysAgo: PoolFields[]\r\n  oneWeekAgo: PoolFields[]\r\n  twoWeeksAgo: PoolFields[]\r\n}\r\n\r\n/**\r\n * Data for displaying pool tables (on multiple pages, used throughout the site)\r\n * Note: Don't try to refactor it to use variables, server throws error if blocks passed as undefined variable\r\n * only works if its hard-coded into query string\r\n */\r\nconst POOL_AT_BLOCK = (block: number | null, pools: string[]) => {\r\n  const blockString = block ? `block: {number: ${block}}` : ``\r\n  const addressesString = `[\"${pools.join('\",\"')}\"]`\r\n  return `pairs(\r\n    where: { id_in: ${addressesString} }\r\n    ${blockString}\r\n    orderBy: trackedReserveCRO\r\n    orderDirection: desc\r\n  ) {\r\n    id\r\n    reserve0\r\n    reserve1\r\n    reserveUSD\r\n    volumeUSD\r\n    token0Price\r\n    token1Price\r\n    token0 {\r\n      id\r\n      symbol\r\n      name\r\n    }\r\n    token1 {\r\n      id\r\n      symbol\r\n      name\r\n    }\r\n  }`\r\n}\r\n\r\nconst fetchPoolData = async (\r\n  block24h: number,\r\n  block48h: number,\r\n  block7d: number,\r\n  block14d: number,\r\n  poolAddresses: string[],\r\n) => {\r\n  try {\r\n    const query = gql`\r\n      query pools {\r\n        now: ${POOL_AT_BLOCK(null, poolAddresses)}\r\n        oneDayAgo: ${POOL_AT_BLOCK(block24h, poolAddresses)}\r\n        twoDaysAgo: ${POOL_AT_BLOCK(block48h, poolAddresses)}\r\n        oneWeekAgo: ${POOL_AT_BLOCK(block7d, poolAddresses)}\r\n        twoWeeksAgo: ${POOL_AT_BLOCK(block14d, poolAddresses)}\r\n      }\r\n    `\r\n    const data = await request<PoolsQueryResponse>(INFO_CLIENT, query)\r\n    return { data, error: false }\r\n  } catch (error) {\r\n    console.error('Failed to fetch pool data', error)\r\n    return { error: true }\r\n  }\r\n}\r\n\r\n// Transforms pools into \"0xADDRESS: { ...PoolFields }\" format and cast strigns to numbers\r\nconst parsePoolData = (pairs?: PoolFields[]) => {\r\n  if (!pairs) {\r\n    return {}\r\n  }\r\n  return pairs.reduce((accum: { [address: string]: FormattedPoolFields }, poolData) => {\r\n    const { volumeUSD, reserveUSD, reserve0, reserve1, token0Price, token1Price } = poolData\r\n    accum[poolData.id] = {\r\n      ...poolData,\r\n      volumeUSD: parseFloat(volumeUSD),\r\n      reserveUSD: parseFloat(reserveUSD),\r\n      reserve0: parseFloat(reserve0),\r\n      reserve1: parseFloat(reserve1),\r\n      token0Price: parseFloat(token0Price),\r\n      token1Price: parseFloat(token1Price),\r\n    }\r\n    return accum\r\n  }, {})\r\n}\r\n\r\ninterface PoolDatas {\r\n  error: boolean\r\n  data?: {\r\n    [address: string]: PoolData\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch top pools by liquidity\r\n */\r\nconst usePoolDatas = (poolAddresses: string[]): PoolDatas => {\r\n  const [fetchState, setFetchState] = useState<PoolDatas>({ error: false })\r\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\r\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d])\r\n  // const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t48h, t48h]) // FIXME hard code no data on t7d t14d\r\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      // const { error, data } = await fetchPoolData(\r\n      //   block24h.number,\r\n      //   block48h.number,\r\n      //   block7d.number,\r\n      //   block14d.number,\r\n      //   poolAddresses,\r\n      // )\r\n      // FIXME hard code no data on 48h\r\n      const { error, data } = await fetchPoolData(\r\n        block24h.number,\r\n        _.find([block48h, block24h], block => block !== undefined).number,\r\n        _.find([block7d, block48h, block24h], block => block !== undefined).number,\r\n        _.find([block14d, block7d, block48h, block24h], block => block !== undefined).number,\r\n        poolAddresses,\r\n      )\r\n      if (error) {\r\n        setFetchState({ error: true })\r\n      } else {\r\n        const formattedPoolData = parsePoolData(data?.now)\r\n        const formattedPoolData24h = parsePoolData(data?.oneDayAgo)\r\n        const formattedPoolData48h = parsePoolData(data?.twoDaysAgo)\r\n        const formattedPoolData7d = parsePoolData(data?.oneWeekAgo)\r\n        const formattedPoolData14d = parsePoolData(data?.twoWeeksAgo)\r\n\r\n        // Calculate data and format\r\n        const formatted = poolAddresses.reduce((accum: { [address: string]: PoolData }, address) => {\r\n          // Undefined data is possible if pool is brand new and didn't exist one day ago or week ago.\r\n          const current: FormattedPoolFields | undefined = formattedPoolData[address]\r\n          const oneDay: FormattedPoolFields | undefined = formattedPoolData24h[address]\r\n          const twoDays: FormattedPoolFields | undefined = formattedPoolData48h[address]\r\n          const week: FormattedPoolFields | undefined = formattedPoolData7d[address]\r\n          const twoWeeks: FormattedPoolFields | undefined = formattedPoolData14d[address]\r\n\r\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\r\n            current?.volumeUSD,\r\n            oneDay?.volumeUSD,\r\n            twoDays?.volumeUSD,\r\n          )\r\n          const [volumeUSDWeek, volumeUSDChangeWeek] = getChangeForPeriod(\r\n            current?.volumeUSD,\r\n            week?.volumeUSD,\r\n            twoWeeks?.volumeUSD,\r\n          )\r\n\r\n          const liquidityUSD = current ? current.reserveUSD : 0\r\n\r\n          const liquidityUSDChange = getPercentChange(current?.reserveUSD, oneDay?.reserveUSD)\r\n\r\n          const liquidityToken0 = current ? current.reserve0 : 0\r\n          const liquidityToken1 = current ? current.reserve1 : 0\r\n\r\n          const { totalFees24h, totalFees7d, lpFees24h, lpFees7d, lpApr7d } = getLpFeesAndApr(\r\n            volumeUSD,\r\n            volumeUSDWeek,\r\n            liquidityUSD,\r\n          )\r\n\r\n          if (current) {\r\n            accum[address] = {\r\n              address,\r\n              token0: {\r\n                address: current.token0.id,\r\n                name: current.token0.name,\r\n                symbol: current.token0.symbol,\r\n              },\r\n              token1: {\r\n                address: current.token1.id,\r\n                name: current.token1.name,\r\n                symbol: current.token1.symbol,\r\n              },\r\n              token0Price: current.token0Price,\r\n              token1Price: current.token1Price,\r\n              volumeUSD,\r\n              volumeUSDChange,\r\n              volumeUSDWeek,\r\n              volumeUSDChangeWeek,\r\n              totalFees24h,\r\n              totalFees7d,\r\n              lpFees24h,\r\n              lpFees7d,\r\n              lpApr7d,\r\n              liquidityUSD,\r\n              liquidityUSDChange,\r\n              liquidityToken0,\r\n              liquidityToken1,\r\n            }\r\n          }\r\n\r\n          return accum\r\n        }, {})\r\n        setFetchState({ data: formatted, error: false })\r\n      }\r\n    }\r\n\r\n    // const allBlocksAvailable = block24h?.number && block48h?.number && block7d?.number && block14d?.number\r\n    const allBlocksAvailable = block24h?.number // FIXME hard code no data in 48h\r\n    if (poolAddresses.length > 0 && allBlocksAvailable && !blockError) {\r\n      fetch()\r\n    }\r\n  }, [poolAddresses, block24h, block48h, block7d, block14d, blockError])\r\n\r\n  return fetchState\r\n}\r\n\r\nexport default usePoolDatas\r\n","import { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\r\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\r\nimport { useState, useEffect } from 'react'\r\nimport { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\n\r\nexport interface CroPrices {\r\n  current: number\r\n  oneDay: number\r\n  twoDay: number\r\n  week: number\r\n}\r\n\r\nconst CRO_PRICES = gql`\r\n  query prices($block24: Int!, $block48: Int!, $blockWeek: Int!) {\r\n    current: bundle(id: \"1\") {\r\n      croPrice\r\n    }\r\n    oneDay: bundle(id: \"1\", block: { number: $block24 }) {\r\n      croPrice\r\n    }\r\n    twoDay: bundle(id: \"1\", block: { number: $block48 }) {\r\n      croPrice\r\n    }\r\n    oneWeek: bundle(id: \"1\", block: { number: $blockWeek }) {\r\n      croPrice\r\n    }\r\n  }\r\n`\r\n\r\ninterface PricesResponse {\r\n  current: {\r\n    croPrice: string\r\n  }\r\n  oneDay: {\r\n    croPrice: string\r\n  }\r\n  twoDay: {\r\n    croPrice: string\r\n  }\r\n  oneWeek: {\r\n    croPrice: string\r\n  }\r\n}\r\n\r\nconst fetchCroPrices = async (\r\n  block24: number,\r\n  block48: number,\r\n  blockWeek: number,\r\n): Promise<{ croPrices: CroPrices | undefined; error: boolean }> => {\r\n  try {\r\n    const data = await request<PricesResponse>(INFO_CLIENT, CRO_PRICES, {\r\n      block24,\r\n      block48,\r\n      blockWeek,\r\n    })\r\n    return {\r\n      error: false,\r\n      croPrices: {\r\n        current: parseFloat(data.current?.croPrice ?? '0'),\r\n        oneDay: parseFloat(data.oneDay?.croPrice ?? '0'),\r\n        twoDay: parseFloat(data.twoDay?.croPrice ?? '0'),\r\n        week: parseFloat(data.oneWeek?.croPrice ?? '0'),\r\n      },\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to fetch CRO prices', error)\r\n    return {\r\n      error: true,\r\n      croPrices: undefined,\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returns CRO prices at current, 24h, 48h, and 7d intervals\r\n */\r\nexport const useCroPrices = (): CroPrices | undefined => {\r\n  const [prices, setPrices] = useState<CroPrices | undefined>()\r\n  const [error, setError] = useState(false)\r\n\r\n  const [t24, t48, tWeek] = getDeltaTimestamps()\r\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24, t48, tWeek])\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const [block24, block48, blockWeek] = blocks\r\n\r\n      // Handle launching analytics on D+3 where blockWeek is undefined\r\n      const { croPrices, error: fetchError } = await fetchCroPrices(\r\n        block24.number,\r\n        block48.number,\r\n        blockWeek ? blockWeek.number : block48.number,\r\n      )\r\n\r\n      if (fetchError) {\r\n        setError(true)\r\n      } else {\r\n        setPrices(croPrices)\r\n      }\r\n    }\r\n    if (!prices && !error && blocks && !blockError) {\r\n      fetch()\r\n    }\r\n  }, [error, prices, blocks, blockError])\r\n\r\n  return prices\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport _ from 'lodash'\r\nimport { useState, useEffect } from 'react'\r\nimport { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\r\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\r\nimport { getPercentChange, getChangeForPeriod, getAmountChange } from 'views/Info/utils/infoDataHelpers'\r\nimport { TokenData } from 'state/info/types'\r\nimport { useCroPrices } from 'views/Info/hooks/useCroPrices'\r\n\r\ninterface TokenFields {\r\n  id: string\r\n  symbol: string\r\n  name: string\r\n  derivedCRO: string // Price in CRO per token\r\n  derivedUSD: string // Price in USD per token\r\n  tradeVolumeUSD: string\r\n  totalTransactions: string\r\n  totalLiquidity: string\r\n}\r\n\r\ninterface FormattedTokenFields\r\n  extends Omit<TokenFields, 'derivedCRO' | 'derivedUSD' | 'tradeVolumeUSD' | 'totalTransactions' | 'totalLiquidity'> {\r\n  derivedCRO: number\r\n  derivedUSD: number\r\n  tradeVolumeUSD: number\r\n  totalTransactions: number\r\n  totalLiquidity: number\r\n}\r\n\r\ninterface TokenQueryResponse {\r\n  now: TokenFields[]\r\n  oneDayAgo: TokenFields[]\r\n  twoDaysAgo: TokenFields[]\r\n  oneWeekAgo: TokenFields[]\r\n  twoWeeksAgo: TokenFields[]\r\n}\r\n\r\n/**\r\n * Main token data to display on Token page\r\n */\r\nconst TOKEN_AT_BLOCK = (block: number | undefined, tokens: string[]) => {\r\n  const addressesString = `[\"${tokens.join('\",\"')}\"]`\r\n  const blockString = block ? `block: {number: ${block}}` : ``\r\n  return `tokens(\r\n      where: {id_in: ${addressesString}}\r\n      ${blockString}\r\n      orderBy: tradeVolumeUSD\r\n      orderDirection: desc\r\n    ) {\r\n      id\r\n      symbol\r\n      name\r\n      derivedCRO\r\n      derivedUSD\r\n      tradeVolumeUSD\r\n      totalTransactions\r\n      totalLiquidity\r\n    }\r\n  `\r\n}\r\n\r\nconst fetchTokenData = async (\r\n  block24h: number,\r\n  block48h: number,\r\n  block7d: number,\r\n  block14d: number,\r\n  tokenAddresses: string[],\r\n) => {\r\n  try {\r\n    const query = gql`\r\n      query tokens {\r\n        now: ${TOKEN_AT_BLOCK(null, tokenAddresses)}\r\n        oneDayAgo: ${TOKEN_AT_BLOCK(block24h, tokenAddresses)}\r\n        twoDaysAgo: ${TOKEN_AT_BLOCK(block48h, tokenAddresses)}\r\n        oneWeekAgo: ${TOKEN_AT_BLOCK(block7d, tokenAddresses)}\r\n        twoWeeksAgo: ${TOKEN_AT_BLOCK(block14d, tokenAddresses)}\r\n      }\r\n    `\r\n    const data = await request<TokenQueryResponse>(INFO_CLIENT, query)\r\n    return { data, error: false }\r\n  } catch (error) {\r\n    console.error('Failed to fetch token data', error)\r\n    return { error: true }\r\n  }\r\n}\r\n\r\n// Transforms tokens into \"0xADDRESS: { ...TokenFields }\" format and cast strigns to numbers\r\nconst parseTokenData = (tokens?: TokenFields[]) => {\r\n  if (!tokens) {\r\n    return {}\r\n  }\r\n  return tokens.reduce((accum: { [address: string]: FormattedTokenFields }, tokenData) => {\r\n    const { derivedCRO, derivedUSD, tradeVolumeUSD, totalTransactions, totalLiquidity } = tokenData\r\n    accum[tokenData.id] = {\r\n      ...tokenData,\r\n      derivedCRO: parseFloat(derivedCRO),\r\n      derivedUSD: parseFloat(derivedUSD),\r\n      tradeVolumeUSD: parseFloat(tradeVolumeUSD),\r\n      totalTransactions: parseFloat(totalTransactions),\r\n      totalLiquidity: parseFloat(totalLiquidity),\r\n    }\r\n    return accum\r\n  }, {})\r\n}\r\n\r\ninterface TokenDatas {\r\n  error: boolean\r\n  data?: {\r\n    [address: string]: TokenData\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch top addresses by volume\r\n */\r\nconst useFetchedTokenDatas = (tokenAddresses: string[]): TokenDatas => {\r\n  const [fetchState, setFetchState] = useState<TokenDatas>({ error: false })\r\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\r\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d])\r\n  // const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t48h, t48h]) // FIXME hard code no data on t7d\r\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\r\n  const croPrices = useCroPrices()\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      // const { error, data } = await fetchTokenData(\r\n      //   block24h.number,\r\n      //   block48h.number,\r\n      //   block7d.number,\r\n      //   block14d.number,\r\n      //   tokenAddresses,\r\n      // )\r\n      // FIXME hard code no data on 48h\r\n      const { error, data } = await fetchTokenData(\r\n        block24h.number,\r\n        _.find([block48h, block24h], block => block !== undefined).number,\r\n        _.find([block7d, block48h, block24h], block => block !== undefined).number,\r\n        _.find([block14d, block7d, block48h, block24h], block => block !== undefined).number,\r\n        tokenAddresses,\r\n      )\r\n      if (error) {\r\n        setFetchState({ error: true })\r\n      } else {\r\n        const parsed = parseTokenData(data?.now)\r\n        const parsed24 = parseTokenData(data?.oneDayAgo)\r\n        const parsed48 = parseTokenData(data?.twoDaysAgo)\r\n        const parsed7d = parseTokenData(data?.oneWeekAgo)\r\n        const parsed14d = parseTokenData(data?.twoWeeksAgo)\r\n\r\n        // Calculate data and format\r\n        const formatted = tokenAddresses.reduce((accum: { [address: string]: TokenData }, address) => {\r\n          const current: FormattedTokenFields | undefined = parsed[address]\r\n          const oneDay: FormattedTokenFields | undefined = parsed24[address]\r\n          const twoDays: FormattedTokenFields | undefined = parsed48[address]\r\n          const week: FormattedTokenFields | undefined = parsed7d[address]\r\n          const twoWeeks: FormattedTokenFields | undefined = parsed14d[address]\r\n\r\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\r\n            current?.tradeVolumeUSD,\r\n            oneDay?.tradeVolumeUSD,\r\n            twoDays?.tradeVolumeUSD,\r\n          )\r\n          const [volumeUSDWeek] = getChangeForPeriod(\r\n            current?.tradeVolumeUSD,\r\n            week?.tradeVolumeUSD,\r\n            twoWeeks?.tradeVolumeUSD,\r\n          )\r\n          const liquidityUSD = current ? current.totalLiquidity * current.derivedUSD : 0\r\n          const liquidityUSDOneDayAgo = oneDay ? oneDay.totalLiquidity * oneDay.derivedUSD : 0\r\n          const liquidityUSDChange = getPercentChange(liquidityUSD, liquidityUSDOneDayAgo)\r\n          const liquidityToken = current ? current.totalLiquidity : 0\r\n          // Prices of tokens for now, 24h ago and 7d ago\r\n          const priceUSD = current ? current.derivedCRO * croPrices.current : 0\r\n          const priceUSDOneDay = oneDay ? oneDay.derivedCRO * croPrices.oneDay : 0\r\n          // const priceUSDWeek = week ? week.derivedCRO * croPrices.week : 0\r\n          const priceUSDWeek = week ? week.derivedCRO * (croPrices.week ?? croPrices.oneDay) : 0 // FIXME hard code no data for 7d\r\n          const priceUSDChange = getPercentChange(priceUSD, priceUSDOneDay)\r\n          const priceUSDChangeWeek = getPercentChange(priceUSD, priceUSDWeek)\r\n          const txCount = getAmountChange(current?.totalTransactions, oneDay?.totalTransactions)\r\n\r\n          accum[address] = {\r\n            exists: !!current,\r\n            address,\r\n            name: current ? current.name : '',\r\n            symbol: current ? current.symbol : '',\r\n            volumeUSD,\r\n            volumeUSDChange,\r\n            volumeUSDWeek,\r\n            txCount,\r\n            liquidityUSD,\r\n            liquidityUSDChange,\r\n            liquidityToken,\r\n            priceUSD,\r\n            priceUSDChange,\r\n            priceUSDChangeWeek,\r\n          }\r\n\r\n          return accum\r\n        }, {})\r\n        setFetchState({ data: formatted, error: false })\r\n      }\r\n    }\r\n    // const allBlocksAvailable = block24h?.number && block48h?.number && block7d?.number && block14d?.number\r\n    const allBlocksAvailable = block24h?.number // FIXME hard code no data in 48h\r\n    if (tokenAddresses.length > 0 && allBlocksAvailable && !blockError && croPrices) {\r\n      fetch()\r\n    }\r\n  }, [tokenAddresses, block24h, block48h, block7d, block14d, blockError, croPrices])\r\n\r\n  return fetchState\r\n}\r\n\r\nexport default useFetchedTokenDatas\r\n","import { useEffect, useState } from 'react'\r\nimport { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\r\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\r\n\r\ninterface TopTokensResponse {\r\n  tokenDayDatas: {\r\n    id: string\r\n  }[]\r\n}\r\n\r\n/**\r\n * Tokens to display on Home page\r\n * The actual data is later requested in tokenData.ts\r\n * Note: dailyTxns_gt: 300 is there to prevent fetching incorrectly priced tokens with high dailyVolumeUSD\r\n */\r\nconst fetchTopTokens = async (timestamp24hAgo: number): Promise<string[]> => {\r\n  try {\r\n    const query = gql`\r\n      query topTokens($blacklist: [String!], $timestamp24hAgo: Int) {\r\n        tokenDayDatas(\r\n          first: 30\r\n          where: { dailyTxns_gt: 0, id_not_in: $blacklist, date_gt: $timestamp24hAgo }\r\n          orderBy: dailyVolumeUSD\r\n          orderDirection: desc\r\n        ) {\r\n          id\r\n        }\r\n      }\r\n    `\r\n    const data = await request<TopTokensResponse>(INFO_CLIENT, query, { blacklist: TOKEN_BLACKLIST, timestamp24hAgo })\r\n    // tokenDayDatas id has compound id \"0xTOKENADDRESS-NUMBERS\", extracting token address with .split('-')\r\n    return data.tokenDayDatas.map((t) => t.id.split('-')[0])\r\n  } catch (error) {\r\n    console.error('Failed to fetch top tokens', error)\r\n    return []\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch top addresses by volume\r\n */\r\nconst useTopTokenAddresses = (): string[] => {\r\n  const [topTokenAddresses, setTopTokenAddresses] = useState([])\r\n  const [timestamp24hAgo] = getDeltaTimestamps()\r\n  const [fetched, setFetched] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const addresses = await fetchTopTokens(timestamp24hAgo)\r\n      setTopTokenAddresses(addresses)\r\n      setFetched(true)\r\n    }\r\n    if (!fetched) {\r\n      fetch()\r\n    }\r\n  }, [topTokenAddresses, timestamp24hAgo, fetched])\r\n\r\n  return topTokenAddresses\r\n}\r\n\r\nexport default useTopTokenAddresses\r\n","import { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { ChartEntry } from 'state/info/types'\r\nimport { TAN_FINANCE_START } from 'config/constants/info'\r\nimport { PairDayDatasResponse } from '../types'\r\nimport { mapPairDayData, fetchChartData } from '../helpers'\r\n\r\nconst getPoolChartData = async (skip: number, address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\r\n  try {\r\n    const query = gql`\r\n      query pairDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\r\n        pairDayDatas(\r\n          first: 1000\r\n          skip: $skip\r\n          where: { pairAddress: $address, date_gt: $startTime }\r\n          orderBy: date\r\n          orderDirection: asc\r\n        ) {\r\n          date\r\n          dailyVolumeUSD\r\n          reserveUSD\r\n        }\r\n      }\r\n    `\r\n    const { pairDayDatas } = await request<PairDayDatasResponse>(INFO_CLIENT, query, {\r\n      startTime: TAN_FINANCE_START,\r\n      skip,\r\n      address,\r\n    })\r\n    const data = pairDayDatas.map(mapPairDayData)\r\n    return { data, error: false }\r\n  } catch (error) {\r\n    console.error('Failed to fetch pool chart data', error)\r\n    return { error: true }\r\n  }\r\n}\r\n\r\nconst fetchPoolChartData = async (address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\r\n  return fetchChartData(getPoolChartData, address)\r\n}\r\n\r\nexport default fetchPoolChartData\r\n","import { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { Transaction } from 'state/info/types'\r\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\r\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\r\n/**\r\n * Transactions of the given pool, used on Pool page\r\n */\r\nconst POOL_TRANSACTIONS = gql`\r\n  query poolTransactions($address: Bytes!) {\r\n    mints(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      to\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n    swaps(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      from\r\n      amount0In\r\n      amount1In\r\n      amount0Out\r\n      amount1Out\r\n      amountUSD\r\n    }\r\n    burns(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      sender\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n  }\r\n`\r\n\r\ninterface TransactionResults {\r\n  mints: MintResponse[]\r\n  swaps: SwapResponse[]\r\n  burns: BurnResponse[]\r\n}\r\n\r\nconst fetchPoolTransactions = async (address: string): Promise<{ data?: Transaction[]; error: boolean }> => {\r\n  try {\r\n    const data = await request<TransactionResults>(INFO_CLIENT, POOL_TRANSACTIONS, {\r\n      address,\r\n    })\r\n    const mints = data.mints.map(mapMints)\r\n    const burns = data.burns.map(mapBurns)\r\n    const swaps = data.swaps.map(mapSwaps)\r\n    return { data: [...mints, ...burns, ...swaps], error: false }\r\n  } catch (error) {\r\n    console.error(`Failed to fetch transactions for pool ${address}`, error)\r\n    return {\r\n      error: true,\r\n    }\r\n  }\r\n}\r\n\r\nexport default fetchPoolTransactions\r\n","import { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { ChartEntry } from 'state/info/types'\r\nimport { TAN_FINANCE_START } from 'config/constants/info'\r\nimport { TokenDayDatasResponse } from '../types'\r\nimport { mapDayData, fetchChartData } from '../helpers'\r\n\r\nconst getTokenChartData = async (skip: number, address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\r\n  try {\r\n    const query = gql`\r\n      query tokenDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\r\n        tokenDayDatas(\r\n          first: 1000\r\n          skip: $skip\r\n          where: { token: $address, date_gt: $startTime }\r\n          orderBy: date\r\n          orderDirection: asc\r\n        ) {\r\n          date\r\n          dailyVolumeUSD\r\n          totalLiquidityUSD\r\n        }\r\n      }\r\n    `\r\n    const { tokenDayDatas } = await request<TokenDayDatasResponse>(INFO_CLIENT, query, {\r\n      startTime: TAN_FINANCE_START,\r\n      skip,\r\n      address,\r\n    })\r\n    const data = tokenDayDatas.map(mapDayData)\r\n    return { data, error: false }\r\n  } catch (error) {\r\n    console.error('Failed to fetch token chart data', error)\r\n    return { error: true }\r\n  }\r\n}\r\n\r\nconst fetchTokenChartData = async (address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\r\n  return fetchChartData(getTokenChartData, address)\r\n}\r\n\r\nexport default fetchTokenChartData\r\n","import { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { Transaction } from 'state/info/types'\r\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\r\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\r\n\r\n/**\r\n * Data to display transaction table on Token page\r\n */\r\nconst TOKEN_TRANSACTIONS = gql`\r\n  query tokenTransactions($address: Bytes!) {\r\n    mintsAs0: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      to\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n    mintsAs1: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      to\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n    swapsAs0: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      from\r\n      amount0In\r\n      amount1In\r\n      amount0Out\r\n      amount1Out\r\n      amountUSD\r\n    }\r\n    swapsAs1: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { token1: $address }) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      from\r\n      amount0In\r\n      amount1In\r\n      amount0Out\r\n      amount1Out\r\n      amountUSD\r\n    }\r\n    burnsAs0: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      sender\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n    burnsAs1: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { token1: $address }) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      sender\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n  }\r\n`\r\n\r\ninterface TransactionResults {\r\n  mintsAs0: MintResponse[]\r\n  mintsAs1: MintResponse[]\r\n  swapsAs0: SwapResponse[]\r\n  swapsAs1: SwapResponse[]\r\n  burnsAs0: BurnResponse[]\r\n  burnsAs1: BurnResponse[]\r\n}\r\n\r\nconst fetchTokenTransactions = async (address: string): Promise<{ data?: Transaction[]; error: boolean }> => {\r\n  try {\r\n    const data = await request<TransactionResults>(INFO_CLIENT, TOKEN_TRANSACTIONS, {\r\n      address,\r\n    })\r\n    const mints0 = data.mintsAs0.map(mapMints)\r\n    const mints1 = data.mintsAs1.map(mapMints)\r\n\r\n    const burns0 = data.burnsAs0.map(mapBurns)\r\n    const burns1 = data.burnsAs1.map(mapBurns)\r\n\r\n    const swaps0 = data.swapsAs0.map(mapSwaps)\r\n    const swaps1 = data.swapsAs1.map(mapSwaps)\r\n\r\n    return { data: [...mints0, ...mints1, ...burns0, ...burns1, ...swaps0, ...swaps1], error: false }\r\n  } catch (error) {\r\n    console.error(`Failed to fetch transactions for token ${address}`, error)\r\n    return {\r\n      error: true,\r\n    }\r\n  }\r\n}\r\n\r\nexport default fetchTokenTransactions\r\n","import { getUnixTime } from 'date-fns'\r\nimport { gql } from 'graphql-request'\r\nimport { getBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\r\nimport { multiQuery } from 'views/Info/utils/infoQueryHelpers'\r\nimport { PriceChartEntry } from 'state/info/types'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\n\r\nconst getPriceSubqueries = (tokenAddress: string, blocks: any) =>\r\n  blocks.map(\r\n    (block: any) => `\r\n      t${block.timestamp}:token(id:\"${tokenAddress}\", block: { number: ${block.number} }) { \r\n        derivedCRO\r\n      }\r\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \r\n        croPrice\r\n      }\r\n    `,\r\n  )\r\n\r\n/**\r\n * Price data for token and bnb based on block number\r\n */\r\nconst priceQueryConstructor = (subqueries: string[]) => {\r\n  return gql`\r\n    query tokenPriceData {\r\n      ${subqueries}\r\n    }\r\n  `\r\n}\r\n\r\nconst fetchTokenPriceData = async (\r\n  address: string,\r\n  interval: number,\r\n  startTimestamp: number,\r\n): Promise<{\r\n  data?: PriceChartEntry[]\r\n  error: boolean\r\n}> => {\r\n  // Construct timestamps to query against\r\n  const endTimestamp = getUnixTime(new Date())\r\n  const timestamps = []\r\n  let time = startTimestamp\r\n  while (time <= endTimestamp) {\r\n    timestamps.push(time)\r\n    time += interval\r\n  }\r\n  try {\r\n    const blocks = await getBlocksFromTimestamps(timestamps, 'asc', 500)\r\n    if (!blocks || blocks.length === 0) {\r\n      console.error('Error fetching blocks for timestamps', timestamps)\r\n      return {\r\n        error: false,\r\n      }\r\n    }\r\n\r\n    const prices: any | undefined = await multiQuery(\r\n      priceQueryConstructor,\r\n      getPriceSubqueries(address, blocks),\r\n      INFO_CLIENT,\r\n      200,\r\n    )\r\n\r\n    if (!prices) {\r\n      console.error('Price data failed to load')\r\n      return {\r\n        error: false,\r\n      }\r\n    }\r\n\r\n    // format token BNB price results\r\n    const tokenPrices: {\r\n      timestamp: string\r\n      derivedCRO: number\r\n      priceUSD: number\r\n    }[] = []\r\n\r\n    // Get Token prices in BNB\r\n    Object.keys(prices).forEach((priceKey) => {\r\n      const timestamp = priceKey.split('t')[1]\r\n      // if its BNB price e.g. `b123` split('t')[1] will be undefined and skip BNB price entry\r\n      if (timestamp) {\r\n        tokenPrices.push({\r\n          timestamp,\r\n          derivedCRO: prices[priceKey]?.derivedCRO ? parseFloat(prices[priceKey].derivedCRO) : 0,\r\n          priceUSD: 0,\r\n        })\r\n      }\r\n    })\r\n\r\n    // Go through BNB USD prices and calculate Token price based on it\r\n    Object.keys(prices).forEach((priceKey) => {\r\n      const timestamp = priceKey.split('b')[1]\r\n      // if its Token price e.g. `t123` split('b')[1] will be undefined and skip Token price entry\r\n      if (timestamp) {\r\n        const tokenPriceIndex = tokenPrices.findIndex((tokenPrice) => tokenPrice.timestamp === timestamp)\r\n        if (tokenPriceIndex >= 0) {\r\n          const { derivedCRO } = tokenPrices[tokenPriceIndex]\r\n          tokenPrices[tokenPriceIndex].priceUSD = parseFloat(prices[priceKey]?.croPrice ?? 0) * derivedCRO\r\n        }\r\n      }\r\n    })\r\n\r\n    // graphql-request does not guarantee same ordering of batched requests subqueries, hence sorting by timestamp from oldest to newest\r\n    tokenPrices.sort((a, b) => parseInt(a.timestamp, 10) - parseInt(b.timestamp, 10))\r\n\r\n    const formattedHistory = []\r\n\r\n    // for each timestamp, construct the open and close price\r\n    for (let i = 0; i < tokenPrices.length - 1; i++) {\r\n      formattedHistory.push({\r\n        time: parseFloat(tokenPrices[i].timestamp),\r\n        open: tokenPrices[i].priceUSD,\r\n        close: tokenPrices[i + 1].priceUSD,\r\n        high: tokenPrices[i + 1].priceUSD,\r\n        low: tokenPrices[i].priceUSD,\r\n      })\r\n    }\r\n\r\n    return { data: formattedHistory, error: false }\r\n  } catch (error) {\r\n    console.error(`Failed to fetch price data for token ${address}`, error)\r\n    return {\r\n      error: true,\r\n    }\r\n  }\r\n}\r\n\r\nexport default fetchTokenPriceData\r\n","import { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\r\n\r\n/**\r\n * Data for showing Pools table on the Token page\r\n */\r\nconst POOLS_FOR_TOKEN = gql`\r\n  query poolsForToken($address: Bytes!, $blacklist: [String!]) {\r\n    asToken0: pairs(\r\n      first: 15\r\n      orderBy: trackedReserveCRO\r\n      orderDirection: desc\r\n      where: { totalTransactions_gt: 100, token0: $address, token1_not_in: $blacklist }\r\n    ) {\r\n      id\r\n    }\r\n    asToken1: pairs(\r\n      first: 15\r\n      orderBy: trackedReserveCRO\r\n      orderDirection: desc\r\n      where: { totalTransactions_gt: 100, token1: $address, token0_not_in: $blacklist }\r\n    ) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\ninterface PoolsForTokenResponse {\r\n  asToken0: {\r\n    id: string\r\n  }[]\r\n  asToken1: {\r\n    id: string\r\n  }[]\r\n}\r\n\r\nconst fetchPoolsForToken = async (\r\n  address: string,\r\n): Promise<{\r\n  error: boolean\r\n  addresses?: string[]\r\n}> => {\r\n  try {\r\n    const data = await request<PoolsForTokenResponse>(INFO_CLIENT, POOLS_FOR_TOKEN, {\r\n      address,\r\n      blacklist: TOKEN_BLACKLIST,\r\n    })\r\n    return {\r\n      error: false,\r\n      addresses: data.asToken0.concat(data.asToken1).map((p) => p.id),\r\n    }\r\n  } catch (error) {\r\n    console.error(`Failed to fetch pools for token ${address}`, error)\r\n    return {\r\n      error: true,\r\n    }\r\n  }\r\n}\r\n\r\nexport default fetchPoolsForToken\r\n","import { useCallback, useEffect, useState, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getUnixTime, startOfHour, Duration, sub } from 'date-fns'\r\nimport { AppState, AppDispatch } from 'state'\r\nimport { isAddress } from 'utils'\r\nimport { Transaction } from 'state/info/types'\r\nimport fetchPoolChartData from 'state/info/queries/pools/chartData'\r\nimport fetchPoolTransactions from 'state/info/queries/pools/transactions'\r\nimport fetchTokenChartData from 'state/info/queries/tokens/chartData'\r\nimport fetchTokenTransactions from 'state/info/queries/tokens/transactions'\r\nimport fetchTokenPriceData from 'state/info/queries/tokens/priceData'\r\nimport fetchPoolsForToken from 'state/info/queries/tokens/poolsForToken'\r\nimport {\r\n  updateProtocolData,\r\n  updateProtocolChartData,\r\n  updateProtocolTransactions,\r\n  updatePoolData,\r\n  addPoolKeys,\r\n  updatePoolChartData,\r\n  updatePoolTransactions,\r\n  updateTokenData,\r\n  addTokenKeys,\r\n  addTokenPoolAddresses,\r\n  updateTokenChartData,\r\n  updateTokenPriceData,\r\n  updateTokenTransactions,\r\n} from './actions'\r\nimport { ProtocolData, PoolData, TokenData, ChartEntry, PriceChartEntry } from './types'\r\n\r\n// Protocol hooks\r\n\r\nexport const useProtocolData = (): [ProtocolData | undefined, (protocolData: ProtocolData) => void] => {\r\n  const protocolData: ProtocolData | undefined = useSelector((state: AppState) => state.info.protocol.overview)\r\n\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const setProtocolData: (protocolData: ProtocolData) => void = useCallback(\r\n    (data: ProtocolData) => dispatch(updateProtocolData({ protocolData: data })),\r\n    [dispatch],\r\n  )\r\n\r\n  return [protocolData, setProtocolData]\r\n}\r\n\r\nexport const useProtocolChartData = (): [ChartEntry[] | undefined, (chartData: ChartEntry[]) => void] => {\r\n  const chartData: ChartEntry[] | undefined = useSelector((state: AppState) => state.info.protocol.chartData)\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const setChartData: (chartData: ChartEntry[]) => void = useCallback(\r\n    (data: ChartEntry[]) => dispatch(updateProtocolChartData({ chartData: data })),\r\n    [dispatch],\r\n  )\r\n  return [chartData, setChartData]\r\n}\r\n\r\nexport const useProtocolTransactions = (): [Transaction[] | undefined, (transactions: Transaction[]) => void] => {\r\n  const transactions: Transaction[] | undefined = useSelector((state: AppState) => state.info.protocol.transactions)\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const setTransactions: (transactions: Transaction[]) => void = useCallback(\r\n    (transactionsData: Transaction[]) => dispatch(updateProtocolTransactions({ transactions: transactionsData })),\r\n    [dispatch],\r\n  )\r\n  return [transactions, setTransactions]\r\n}\r\n\r\n// Pools hooks\r\n\r\nexport const useAllPoolData = (): {\r\n  [address: string]: { data?: PoolData }\r\n} => {\r\n  return useSelector((state: AppState) => state.info.pools.byAddress)\r\n}\r\n\r\nexport const useUpdatePoolData = (): ((pools: PoolData[]) => void) => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  return useCallback((pools: PoolData[]) => dispatch(updatePoolData({ pools })), [dispatch])\r\n}\r\n\r\nexport const useAddPoolKeys = (): ((addresses: string[]) => void) => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  return useCallback((poolAddresses: string[]) => dispatch(addPoolKeys({ poolAddresses })), [dispatch])\r\n}\r\n\r\nexport const usePoolDatas = (poolAddresses: string[]): PoolData[] => {\r\n  const allPoolData = useAllPoolData()\r\n  const addNewPoolKeys = useAddPoolKeys()\r\n\r\n  const untrackedAddresses = poolAddresses.reduce((accum: string[], address) => {\r\n    if (!Object.keys(allPoolData).includes(address)) {\r\n      accum.push(address)\r\n    }\r\n    return accum\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (untrackedAddresses) {\r\n      addNewPoolKeys(untrackedAddresses)\r\n    }\r\n  }, [addNewPoolKeys, untrackedAddresses])\r\n\r\n  const poolsWithData = poolAddresses\r\n    .map((address) => {\r\n      return allPoolData[address]?.data\r\n    })\r\n    .filter((pool) => pool)\r\n\r\n  return poolsWithData\r\n}\r\n\r\nexport const usePoolChartData = (address: string): ChartEntry[] | undefined => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const pool = useSelector((state: AppState) => state.info.pools.byAddress[address])\r\n  const chartData = pool?.chartData\r\n  const [error, setError] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { error: fetchError, data } = await fetchPoolChartData(address)\r\n      if (!fetchError && data) {\r\n        dispatch(updatePoolChartData({ poolAddress: address, chartData: data }))\r\n      }\r\n      if (fetchError) {\r\n        setError(fetchError)\r\n      }\r\n    }\r\n    if (!chartData && !error) {\r\n      fetch()\r\n    }\r\n  }, [address, dispatch, error, chartData])\r\n\r\n  return chartData\r\n}\r\n\r\nexport const usePoolTransactions = (address: string): Transaction[] | undefined => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const pool = useSelector((state: AppState) => state.info.pools.byAddress[address])\r\n  const transactions = pool?.transactions\r\n  const [error, setError] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { error: fetchError, data } = await fetchPoolTransactions(address)\r\n      if (fetchError) {\r\n        setError(true)\r\n      } else {\r\n        dispatch(updatePoolTransactions({ poolAddress: address, transactions: data }))\r\n      }\r\n    }\r\n    if (!transactions && !error) {\r\n      fetch()\r\n    }\r\n  }, [address, dispatch, error, transactions])\r\n\r\n  return transactions\r\n}\r\n\r\n// Tokens hooks\r\n\r\nexport const useAllTokenData = (): {\r\n  [address: string]: { data?: TokenData }\r\n} => {\r\n  return useSelector((state: AppState) => state.info.tokens.byAddress)\r\n}\r\n\r\nexport const useUpdateTokenData = (): ((tokens: TokenData[]) => void) => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  return useCallback(\r\n    (tokens: TokenData[]) => {\r\n      dispatch(updateTokenData({ tokens }))\r\n    },\r\n    [dispatch],\r\n  )\r\n}\r\n\r\nexport const useAddTokenKeys = (): ((addresses: string[]) => void) => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  return useCallback((tokenAddresses: string[]) => dispatch(addTokenKeys({ tokenAddresses })), [dispatch])\r\n}\r\n\r\nexport const useTokenDatas = (addresses?: string[]): TokenData[] | undefined => {\r\n  const allTokenData = useAllTokenData()\r\n  const addNewTokenKeys = useAddTokenKeys()\r\n\r\n  // if token not tracked yet track it\r\n  addresses?.forEach((a) => {\r\n    if (!allTokenData[a]) {\r\n      addNewTokenKeys([a])\r\n    }\r\n  })\r\n\r\n  const tokensWithData = useMemo(() => {\r\n    if (!addresses) {\r\n      return undefined\r\n    }\r\n    return addresses\r\n      .map((a) => {\r\n        return allTokenData[a]?.data\r\n      })\r\n      .filter((token) => token)\r\n  }, [addresses, allTokenData])\r\n\r\n  return tokensWithData\r\n}\r\n\r\nexport const useTokenData = (address: string | undefined): TokenData | undefined => {\r\n  const allTokenData = useAllTokenData()\r\n  const addNewTokenKeys = useAddTokenKeys()\r\n\r\n  if (!address || !isAddress(address)) {\r\n    return undefined\r\n  }\r\n\r\n  // if token not tracked yet track it\r\n  if (!allTokenData[address]) {\r\n    addNewTokenKeys([address])\r\n  }\r\n\r\n  return allTokenData[address]?.data\r\n}\r\n\r\nexport const usePoolsForToken = (address: string): string[] | undefined => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\r\n  const poolsForToken = token.poolAddresses\r\n  const [error, setError] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { error: fetchError, addresses } = await fetchPoolsForToken(address)\r\n      if (!fetchError && addresses) {\r\n        dispatch(addTokenPoolAddresses({ tokenAddress: address, poolAddresses: addresses }))\r\n      }\r\n      if (fetchError) {\r\n        setError(fetchError)\r\n      }\r\n    }\r\n    if (!poolsForToken && !error) {\r\n      fetch()\r\n    }\r\n  }, [address, dispatch, error, poolsForToken])\r\n\r\n  return poolsForToken\r\n}\r\n\r\nexport const useTokenChartData = (address: string): ChartEntry[] | undefined => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\r\n  const { chartData } = token\r\n  const [error, setError] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { error: fetchError, data } = await fetchTokenChartData(address)\r\n      if (!fetchError && data) {\r\n        dispatch(updateTokenChartData({ tokenAddress: address, chartData: data }))\r\n      }\r\n      if (fetchError) {\r\n        setError(fetchError)\r\n      }\r\n    }\r\n    if (!chartData && !error) {\r\n      fetch()\r\n    }\r\n  }, [address, dispatch, error, chartData])\r\n\r\n  return chartData\r\n}\r\n\r\nexport const useTokenPriceData = (\r\n  address: string,\r\n  interval: number,\r\n  timeWindow: Duration,\r\n): PriceChartEntry[] | undefined => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\r\n  const priceData = token.priceData[interval]\r\n  const [error, setError] = useState(false)\r\n\r\n  // construct timestamps and check if we need to fetch more data\r\n  const oldestTimestampFetched = token.priceData.oldestFetchedTimestamp\r\n  const utcCurrentTime = getUnixTime(new Date()) * 1000\r\n  const startTimestamp = getUnixTime(startOfHour(sub(utcCurrentTime, timeWindow)))\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { data, error: fetchingError } = await fetchTokenPriceData(address, interval, startTimestamp)\r\n      if (data) {\r\n        dispatch(\r\n          updateTokenPriceData({\r\n            tokenAddress: address,\r\n            secondsInterval: interval,\r\n            priceData: data,\r\n            oldestFetchedTimestamp: startTimestamp,\r\n          }),\r\n        )\r\n      }\r\n      if (fetchingError) {\r\n        setError(true)\r\n      }\r\n    }\r\n    if (!priceData && !error) {\r\n      fetch()\r\n    }\r\n  }, [address, dispatch, error, interval, oldestTimestampFetched, priceData, startTimestamp, timeWindow])\r\n\r\n  return priceData\r\n}\r\n\r\nexport const useTokenTransactions = (address: string): Transaction[] | undefined => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\r\n  const { transactions } = token\r\n  const [error, setError] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { error: fetchError, data } = await fetchTokenTransactions(address)\r\n      if (fetchError) {\r\n        setError(true)\r\n      } else if (data) {\r\n        dispatch(updateTokenTransactions({ tokenAddress: address, transactions: data }))\r\n      }\r\n    }\r\n    if (!transactions && !error) {\r\n      fetch()\r\n    }\r\n  }, [address, dispatch, error, transactions])\r\n\r\n  return transactions\r\n}\r\n","import React, { useEffect, useMemo } from 'react'\r\nimport useFetchProtocolData from 'state/info/queries/protocol/overview'\r\nimport useFetchGlobalChartData from 'state/info/queries/protocol/chart'\r\nimport fetchTopTransactions from 'state/info/queries/protocol/transactions'\r\nimport useTopPoolAddresses from 'state/info/queries/pools/topPools'\r\nimport usePoolDatas from 'state/info/queries/pools/poolData'\r\nimport useFetchedTokenDatas from 'state/info/queries/tokens/tokenData'\r\nimport useTopTokenAddresses from 'state/info/queries/tokens/topTokens'\r\nimport {\r\n  useProtocolData,\r\n  useProtocolChartData,\r\n  useProtocolTransactions,\r\n  useUpdatePoolData,\r\n  useAllPoolData,\r\n  useAddPoolKeys,\r\n  useAllTokenData,\r\n  useUpdateTokenData,\r\n  useAddTokenKeys,\r\n} from './hooks'\r\n\r\nexport const ProtocolUpdater: React.FC = () => {\r\n  const [protocolData, setProtocolData] = useProtocolData()\r\n  const { data: fetchedProtocolData, error } = useFetchProtocolData()\r\n\r\n  const [chartData, updateChartData] = useProtocolChartData()\r\n  const { data: fetchedChartData, error: chartError } = useFetchGlobalChartData()\r\n\r\n  const [transactions, updateTransactions] = useProtocolTransactions()\r\n\r\n  // update overview data if available and not set\r\n  useEffect(() => {\r\n    if (protocolData === undefined && fetchedProtocolData && !error) {\r\n      setProtocolData(fetchedProtocolData)\r\n    }\r\n  }, [error, fetchedProtocolData, protocolData, setProtocolData])\r\n\r\n  // update global chart data if available and not set\r\n  useEffect(() => {\r\n    if (chartData === undefined && fetchedChartData && !chartError) {\r\n      updateChartData(fetchedChartData)\r\n    }\r\n  }, [chartData, chartError, fetchedChartData, updateChartData])\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const data = await fetchTopTransactions()\r\n      if (data) {\r\n        updateTransactions(data)\r\n      }\r\n    }\r\n    if (!transactions) {\r\n      fetch()\r\n    }\r\n  }, [transactions, updateTransactions])\r\n\r\n  return null\r\n}\r\n\r\nexport const PoolUpdater: React.FC = () => {\r\n  const updatePoolData = useUpdatePoolData()\r\n  const addPoolKeys = useAddPoolKeys()\r\n\r\n  const allPoolData = useAllPoolData()\r\n  const addresses = useTopPoolAddresses()\r\n\r\n  // add top pools on first load\r\n  useEffect(() => {\r\n    if (addresses.length > 0) {\r\n      addPoolKeys(addresses)\r\n    }\r\n  }, [addPoolKeys, addresses])\r\n\r\n  // detect for which addresses we havent loaded pool data yet\r\n  const unfetchedPoolAddresses = useMemo(() => {\r\n    return Object.keys(allPoolData).reduce((accum: string[], address) => {\r\n      const poolData = allPoolData[address]\r\n      if (!poolData.data) {\r\n        accum.push(address)\r\n      }\r\n      return accum\r\n    }, [])\r\n  }, [allPoolData])\r\n\r\n  // fetch data for unfetched pools and update them\r\n  const { error: poolDataError, data: poolDatas } = usePoolDatas(unfetchedPoolAddresses)\r\n  useEffect(() => {\r\n    if (poolDatas && !poolDataError) {\r\n      updatePoolData(Object.values(poolDatas))\r\n    }\r\n  }, [poolDataError, poolDatas, updatePoolData])\r\n\r\n  return null\r\n}\r\n\r\nexport const TokenUpdater = (): null => {\r\n  const updateTokenDatas = useUpdateTokenData()\r\n  const addTokenKeys = useAddTokenKeys()\r\n\r\n  const allTokenData = useAllTokenData()\r\n  const addresses = useTopTokenAddresses()\r\n\r\n  // add top tokens on first load\r\n  useEffect(() => {\r\n    if (addresses.length > 0) {\r\n      addTokenKeys(addresses)\r\n    }\r\n  }, [addTokenKeys, addresses])\r\n\r\n  // detect for which addresses we havent loaded token data yet\r\n  const unfetchedTokenAddresses = useMemo(() => {\r\n    return Object.keys(allTokenData).reduce((accum: string[], key) => {\r\n      const tokenData = allTokenData[key]\r\n      if (!tokenData.data) {\r\n        accum.push(key)\r\n      }\r\n      return accum\r\n    }, [])\r\n  }, [allTokenData])\r\n\r\n  // fetch data for unfetched tokens and update them\r\n  const { error: tokenDataError, data: tokenDatas } = useFetchedTokenDatas(unfetchedTokenAddresses)\r\n  useEffect(() => {\r\n    if (tokenDatas && !tokenDataError) {\r\n      updateTokenDatas(Object.values(tokenDatas))\r\n    }\r\n  }, [tokenDataError, tokenDatas, updateTokenDatas])\r\n\r\n  return null\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { useTokenDatas, usePoolDatas } from 'state/info/hooks'\r\nimport { TokenData, PoolData } from 'state/info/types'\r\nimport { MINIMUM_SEARCH_CHARACTERS } from 'config/constants/info'\r\n\r\nconst TOKEN_SEARCH = gql`\r\n  query tokens($symbol: String, $name: String, $id: String) {\r\n    asSymbol: tokens(first: 10, where: { symbol_contains: $symbol }, orderBy: tradeVolumeUSD, orderDirection: desc) {\r\n      id\r\n    }\r\n    asName: tokens(first: 10, where: { name_contains: $name }, orderBy: tradeVolumeUSD, orderDirection: desc) {\r\n      id\r\n    }\r\n    asAddress: tokens(first: 1, where: { id: $id }, orderBy: tradeVolumeUSD, orderDirection: desc) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nconst POOL_SEARCH = gql`\r\n  query pools($tokens: [Bytes]!, $id: String) {\r\n    as0: pairs(first: 10, where: { token0_in: $tokens }) {\r\n      id\r\n    }\r\n    as1: pairs(first: 10, where: { token1_in: $tokens }) {\r\n      id\r\n    }\r\n    asAddress: pairs(first: 1, where: { id: $id }) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\ninterface SingleQueryResponse {\r\n  id: string[]\r\n}\r\n\r\ninterface TokenSearchResponse {\r\n  asSymbol: SingleQueryResponse[]\r\n  asName: SingleQueryResponse[]\r\n  asAddress: SingleQueryResponse[]\r\n}\r\ninterface PoolSearchResponse {\r\n  as0: SingleQueryResponse[]\r\n  as1: SingleQueryResponse[]\r\n  asAddress: SingleQueryResponse[]\r\n}\r\n\r\nconst getIds = (entityArrays: SingleQueryResponse[][]) => {\r\n  const ids = entityArrays\r\n    .reduce((entities, currentTokenArray) => [...entities, ...currentTokenArray], [])\r\n    .map((entity) => entity.id)\r\n  return Array.from(new Set(ids))\r\n}\r\n\r\nconst useFetchSearchResults = (\r\n  searchString: string,\r\n): {\r\n  tokens: TokenData[]\r\n  pools: PoolData[]\r\n  tokensLoading: boolean\r\n  poolsLoading: boolean\r\n  error: boolean\r\n} => {\r\n  const [searchResults, setSearchResults] = useState({\r\n    tokens: [], // Token ids found by search query\r\n    pools: [], // Pool ids found by search query\r\n    loading: false, // Search query is in progress\r\n    error: false, // GraphQL returned error\r\n  })\r\n\r\n  const searchStringTooShort = searchString.length < MINIMUM_SEARCH_CHARACTERS\r\n\r\n  // New value received, reset state\r\n  useEffect(() => {\r\n    setSearchResults({\r\n      tokens: [],\r\n      pools: [],\r\n      loading: !searchStringTooShort,\r\n      error: false,\r\n    })\r\n  }, [searchString, searchStringTooShort])\r\n\r\n  useEffect(() => {\r\n    const search = async () => {\r\n      try {\r\n        const tokens = await request<TokenSearchResponse>(INFO_CLIENT, TOKEN_SEARCH, {\r\n          symbol: searchString.toUpperCase(),\r\n          // Most well known tokens have first letter capitalized\r\n          name: searchString.charAt(0).toUpperCase() + searchString.slice(1),\r\n          id: searchString.toLowerCase(),\r\n        })\r\n        const tokenIds = getIds([tokens.asAddress, tokens.asSymbol, tokens.asName])\r\n        const pools = await request<PoolSearchResponse>(INFO_CLIENT, POOL_SEARCH, {\r\n          tokens: tokenIds,\r\n          id: searchString.toLowerCase(),\r\n        })\r\n        setSearchResults({\r\n          tokens: tokenIds,\r\n          pools: getIds([pools.asAddress, pools.as0, pools.as1]),\r\n          loading: false,\r\n          error: false,\r\n        })\r\n      } catch (error) {\r\n        console.error(`Search failed for ${searchString}`, error)\r\n        setSearchResults({\r\n          tokens: [],\r\n          pools: [],\r\n          loading: false,\r\n          error: true,\r\n        })\r\n      }\r\n    }\r\n    if (!searchStringTooShort) {\r\n      search()\r\n    }\r\n  }, [searchString, searchStringTooShort])\r\n\r\n  // Save ids to Redux\r\n  // Token and Pool updater will then go fetch full data for these addresses\r\n  // These hooks in turn will return data of tokens that have been fetched\r\n  const tokenDatasFull = useTokenDatas(searchResults.tokens)\r\n  const poolDatasFull = usePoolDatas(searchResults.pools)\r\n\r\n  // If above hooks returned not all tokens/pools it means\r\n  // that some requests for full data are in progress\r\n  const tokensLoading = tokenDatasFull.length !== searchResults.tokens.length || searchResults.loading\r\n  const poolsLoading = poolDatasFull.length !== searchResults.pools.length || searchResults.loading\r\n\r\n  return {\r\n    tokens: tokenDatasFull,\r\n    pools: poolDatasFull,\r\n    tokensLoading,\r\n    poolsLoading,\r\n    error: searchResults.error,\r\n  }\r\n}\r\n\r\nexport default useFetchSearchResults\r\n","import React, { useState } from 'react'\r\nimport { HelpIcon } from 'uranus-uikit'\r\n\r\nconst BAD_SRCS: string[] = []\r\n\r\nexport interface LogoLoaderProps {\r\n  alt: string\r\n  src: string\r\n}\r\n\r\n/**\r\n * Renders an image by sequentially trying a list of URIs, and then eventually a fallback to HelpIcon\r\n */\r\nconst LogoLoader: React.FC<LogoLoaderProps> = ({ src, alt, ...rest }) => {\r\n  const [, refresh] = useState(0)\r\n\r\n  const srcFailedLoading = BAD_SRCS.includes(src)\r\n\r\n  if (src && !srcFailedLoading) {\r\n    return (\r\n      <img\r\n        {...rest}\r\n        alt={alt}\r\n        src={src}\r\n        onError={() => {\r\n          if (src) BAD_SRCS.push(src)\r\n          refresh((i) => i + 1)\r\n        }}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <HelpIcon {...rest} />\r\n}\r\n\r\nexport default LogoLoader\r\n","import React, { useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { isAddress } from 'utils'\r\nimport LogoLoader from './LogoLoader'\r\n\r\nconst StyledLogo = styled(LogoLoader)<{ size: string }>`\r\n  width: ${({ size }) => size};\r\n  height: ${({ size }) => size};\r\n  border-radius: ${({ size }) => size};\r\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\r\n  background-color: ${({ theme }) => theme.colors.background};\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n\r\nexport const CurrencyLogo: React.FC<{\r\n  address?: string\r\n  size?: string\r\n}> = ({ address, size = '24px', ...rest }) => {\r\n  const src = useMemo(() => {\r\n    const checkSummedAddress = isAddress(address)\r\n    if (checkSummedAddress) {\r\n      return `${process.env.REACT_APP_BASE_URL}/images/tokens/${checkSummedAddress}.svg` // XXX: update URL for token logo\r\n    }\r\n    return null\r\n  }, [address])\r\n\r\n  return <StyledLogo size={size} src={src} alt=\"token logo\" {...rest} />\r\n}\r\n\r\nconst DoubleCurrencyWrapper = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  width: 32px;\r\n`\r\n\r\ninterface DoubleCurrencyLogoProps {\r\n  address0?: string\r\n  address1?: string\r\n  size?: number\r\n}\r\n\r\nexport const DoubleCurrencyLogo: React.FC<DoubleCurrencyLogoProps> = ({ address0, address1, size = 16 }) => {\r\n  return (\r\n    <DoubleCurrencyWrapper>\r\n      {address0 && <CurrencyLogo address={address0} size={`${size.toString()}px`} />}\r\n      {address1 && <CurrencyLogo address={address1} size={`${size.toString()}px`} />}\r\n    </DoubleCurrencyWrapper>\r\n  )\r\n}\r\n","import numeral from 'numeral'\r\n\r\n// Returns first 2 digits after first non-zero decimal\r\n// i.e. 0.001286 -> 0.0012, 0.9845 -> 0.98, 0.0102 -> 0.010, etc\r\n// Intended to be used for tokens whose value is less than $1\r\n// https://stackoverflow.com/a/23887837\r\nexport const getFirstThreeNonZeroDecimals = (value: number) => {\r\n  return value.toFixed(9).match(/^-?\\d*\\.?0*\\d{0,2}/)[0]\r\n}\r\n\r\n/**\r\n * This function is used to format token prices, liquidity, amount of tokens in TX, and in general any numbers on info section\r\n * @param amount - amount to be formatted\r\n * @param notation - whether to show 1M or 1,000,000\r\n * @param displayThreshold - threshold below which it will return simply <displayThreshold instead of actual value, e.g. if 0.001 -> returns <0.001 for 0.0005\r\n * @param tokenPrecision - set to true when you want precision to be 3 decimals for values < 1 and 2 decimals for values > 1\r\n * @param isInteger - if true the values will contain decimal part only if the amount is > 1000\r\n * @returns formatted string ready to be displayed\r\n */\r\nexport const formatAmount = (\r\n  amount: number | undefined,\r\n  options?: {\r\n    notation?: 'compact' | 'standard'\r\n    displayThreshold?: number\r\n    tokenPrecision?: boolean\r\n    isInteger?: boolean\r\n  },\r\n) => {\r\n  const { notation = 'compact', displayThreshold, tokenPrecision, isInteger } = options || { notation: 'compact' }\r\n  if (amount === 0) {\r\n    if (isInteger) {\r\n      return '0'\r\n    }\r\n    return '0.00'\r\n  }\r\n  if (!amount) return '-'\r\n  if (displayThreshold && amount < displayThreshold) {\r\n    return `<${displayThreshold}`\r\n  }\r\n  if (amount < 1 && !tokenPrecision) {\r\n    return getFirstThreeNonZeroDecimals(amount)\r\n  }\r\n\r\n  let precision = 2\r\n  if (tokenPrecision) {\r\n    precision = amount < 1 ? 3 : 2\r\n  }\r\n\r\n  let format = `0.${'0'.repeat(precision)}a`\r\n\r\n  if (notation === 'standard') {\r\n    format = `0,0.${'0'.repeat(precision)}`\r\n  }\r\n\r\n  if (isInteger && amount < 1000) {\r\n    format = '0'\r\n  }\r\n\r\n  const amountWithPrecision = parseFloat(amount.toFixed(precision))\r\n\r\n  // toUpperCase is needed cause numeral doesn't have support for capital K M B out of the box\r\n  return numeral(amountWithPrecision).format(format).toUpperCase()\r\n}\r\n","import React, { HTMLAttributes } from 'react'\r\nimport styled from 'styled-components'\r\nimport { StarFillIcon, StarLineIcon } from 'uranus-uikit'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst HoverIcon = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  :hover {\r\n    cursor: pointer;\r\n    opacity: 0.6;\r\n  }\r\n`\r\n\r\nconst SaveIcon: React.FC<{ fill: boolean } & HTMLAttributes<HTMLDivElement>> = ({ fill = false, ...rest }) => {\r\n  const { theme } = useTheme()\r\n  return (\r\n    <HoverIcon {...rest}>\r\n      {fill ? (\r\n        <StarFillIcon stroke={theme.colors.warning} color={theme.colors.warning} />\r\n      ) : (\r\n        <StarLineIcon stroke={theme.colors.textDisabled} />\r\n      )}\r\n    </HoverIcon>\r\n  )\r\n}\r\n\r\nexport default SaveIcon\r\n","import React, { useRef, useState, useEffect, useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Input, Flex, Skeleton, useMatchBreakpoints } from 'uranus-uikit'\r\nimport useFetchSearchResults from 'state/info/queries/search'\r\nimport { CurrencyLogo, DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport { useWatchlistTokens, useWatchlistPools } from 'state/user/hooks'\r\nimport SaveIcon from 'views/Info/components/SaveIcon'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { usePoolDatas, useTokenDatas } from 'state/info/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDebounce from 'hooks/useDebounce'\r\nimport { MINIMUM_SEARCH_CHARACTERS } from 'config/constants/info'\r\nimport { PoolData } from 'state/info/types'\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  z-index: 30;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  z-index: 9999;\r\n  border: 0;\r\n  font-size: 13px;\r\n`\r\n\r\nconst Menu = styled.div<{ hide: boolean }>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  z-index: 9999;\r\n  width: 100%;\r\n  top: 50px;\r\n  max-height: 400px;\r\n  overflow: auto;\r\n  right: 0;\r\n  padding: 1.5rem;\r\n  padding-bottom: 2.5rem;\r\n  position: absolute;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  border-radius: 8px;\r\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.04), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\r\n    0px 24px 32px rgba(0, 0, 0, 0.04);\r\n  display: ${({ hide }) => hide && 'none'};\r\n  border: 1px solid ${({ theme }) => theme.colors.secondary};\r\n  margin-top: 4px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 0;\r\n    width: 500px;\r\n    max-height: 600px;\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    margin-top: 0;\r\n    width: 800px;\r\n    max-height: 600px;\r\n  }\r\n`\r\n\r\nconst Blackout = styled.div`\r\n  position: absolute;\r\n  min-height: 100vh;\r\n  width: 100vw;\r\n  z-index: 10;\r\n  background-color: black;\r\n  opacity: 0.7;\r\n  left: 0;\r\n  top: 0;\r\n`\r\n\r\nconst ResponsiveGrid = styled.div`\r\n  display: grid;\r\n  grid-gap: 1em;\r\n  grid-template-columns: 1fr;\r\n  margin: 8px 0;\r\n  align-items: center;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: 1.5fr repeat(3, 1fr);\r\n  }\r\n`\r\n\r\nconst Break = styled.div`\r\n  height: 1px;\r\n  background-color: ${({ theme }) => theme.colors.cardBorder};\r\n  width: 100%;\r\n  margin: 16px 0;\r\n`\r\n\r\nconst HoverText = styled.div<{ hide: boolean }>`\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n  display: ${({ hide }) => (hide ? 'none' : 'block')};\r\n  margin-top: 16px;\r\n  :hover {\r\n    cursor: pointer;\r\n    opacity: 0.6;\r\n  }\r\n`\r\n\r\nconst HoverRowLink = styled.div`\r\n  :hover {\r\n    cursor: pointer;\r\n    opacity: 0.6;\r\n  }\r\n`\r\n\r\nconst OptionButton = styled.div<{ enabled: boolean }>`\r\n  width: fit-content;\r\n  padding: 4px 8px;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n  margin-right: 10px;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: ${({ theme, enabled }) => (enabled ? theme.colors.primary : 'transparent')};\r\n  color: ${({ theme, enabled }) => (enabled ? theme.card.background : theme.colors.secondary)};\r\n  :hover {\r\n    opacity: 0.6;\r\n    cursor: pointer;\r\n  }\r\n`\r\ntype BasicTokenData = {\r\n  address: string\r\n  symbol: string\r\n  name: string\r\n}\r\nconst tokenIncludesSearchTerm = (token: BasicTokenData, value: string) => {\r\n  return (\r\n    token.address.toLowerCase().includes(value.toLowerCase()) ||\r\n    token.symbol.toLowerCase().includes(value.toLowerCase()) ||\r\n    token.name.toLowerCase().includes(value.toLowerCase())\r\n  )\r\n}\r\n\r\nconst poolIncludesSearchTerm = (pool: PoolData, value: string) => {\r\n  return (\r\n    pool.address.toLowerCase().includes(value.toLowerCase()) ||\r\n    tokenIncludesSearchTerm(pool.token0, value) ||\r\n    tokenIncludesSearchTerm(pool.token1, value)\r\n  )\r\n}\r\n\r\nconst Search = () => {\r\n  const history = useHistory()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { t } = useTranslation()\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null)\r\n  const menuRef = useRef<HTMLDivElement>(null)\r\n  const showMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [showMenu, setShowMenu] = useState(false)\r\n  const [value, setValue] = useState('')\r\n  const debouncedSearchTerm = useDebounce(value, 600)\r\n\r\n  const { tokens, pools, tokensLoading, poolsLoading, error } = useFetchSearchResults(debouncedSearchTerm)\r\n\r\n  const [tokensShown, setTokensShown] = useState(3)\r\n  const [poolsShown, setPoolsShown] = useState(3)\r\n\r\n  useEffect(() => {\r\n    setTokensShown(3)\r\n    setPoolsShown(3)\r\n  }, [debouncedSearchTerm])\r\n\r\n  const handleOutsideClick = (e: any) => {\r\n    const menuClick = menuRef.current && menuRef.current.contains(e.target)\r\n    const inputCLick = inputRef.current && inputRef.current.contains(e.target)\r\n    const showMoreClick = showMoreRef.current && showMoreRef.current.contains(e.target)\r\n\r\n    if (!menuClick && !inputCLick && !showMoreClick) {\r\n      setPoolsShown(3)\r\n      setTokensShown(3)\r\n      setShowMenu(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (showMenu) {\r\n      document.addEventListener('click', handleOutsideClick)\r\n      document.querySelector('body').style.overflow = 'hidden'\r\n    } else {\r\n      document.removeEventListener('click', handleOutsideClick)\r\n      document.querySelector('body').style.overflow = 'visible'\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('click', handleOutsideClick)\r\n      document.querySelector('body').style.overflow = 'visible'\r\n    }\r\n  }, [showMenu])\r\n\r\n  // watchlist\r\n  const [savedTokens, addSavedToken] = useWatchlistTokens()\r\n  const [savedPools, addSavedPool] = useWatchlistPools()\r\n\r\n  const handleItemClick = (to: string) => {\r\n    setShowMenu(false)\r\n    setPoolsShown(3)\r\n    setTokensShown(3)\r\n    history.push(to)\r\n  }\r\n\r\n  // get date for watchlist\r\n  const watchListTokenData = useTokenDatas(savedTokens)\r\n  const watchListTokenLoading = watchListTokenData.length !== savedTokens.length\r\n  const watchListPoolData = usePoolDatas(savedPools)\r\n  const watchListPoolLoading = watchListPoolData.length !== savedPools.length\r\n\r\n  // filter on view\r\n  const [showWatchlist, setShowWatchlist] = useState(false)\r\n  const tokensForList = useMemo(() => {\r\n    if (showWatchlist) {\r\n      return watchListTokenData.filter((token) => tokenIncludesSearchTerm(token, value))\r\n    }\r\n    return tokens.sort((t0, t1) => (t0.volumeUSD > t1.volumeUSD ? -1 : 1))\r\n  }, [showWatchlist, tokens, watchListTokenData, value])\r\n\r\n  const poolForList = useMemo(() => {\r\n    if (showWatchlist) {\r\n      return watchListPoolData.filter((pool) => poolIncludesSearchTerm(pool, value))\r\n    }\r\n    return pools.sort((p0, p1) => (p0.volumeUSD > p1.volumeUSD ? -1 : 1))\r\n  }, [pools, showWatchlist, watchListPoolData, value])\r\n\r\n  const contentUnderTokenList = () => {\r\n    const isLoading = showWatchlist ? watchListTokenLoading : tokensLoading\r\n    const noTokensFound =\r\n      tokensForList.length === 0 && !isLoading && debouncedSearchTerm.length >= MINIMUM_SEARCH_CHARACTERS\r\n    const noWatchlistTokens = tokensForList.length === 0 && !isLoading\r\n    const showMessage = showWatchlist ? noWatchlistTokens : noTokensFound\r\n    const noTokensMessage = showWatchlist ? t('Saved tokens will appear here') : t('No results')\r\n    return (\r\n      <>\r\n        {isLoading && <Skeleton />}\r\n        {showMessage && <Text>{noTokensMessage}</Text>}\r\n        {!showWatchlist && debouncedSearchTerm.length < MINIMUM_SEARCH_CHARACTERS && (\r\n          <Text>{t('Search farms or tokens')}</Text>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  const contentUnderPoolList = () => {\r\n    const isLoading = showWatchlist ? watchListPoolLoading : poolsLoading\r\n    const noPoolsFound =\r\n      poolForList.length === 0 && !poolsLoading && debouncedSearchTerm.length >= MINIMUM_SEARCH_CHARACTERS\r\n    const noWatchlistPools = poolForList.length === 0 && !isLoading\r\n    const showMessage = showWatchlist ? noWatchlistPools : noPoolsFound\r\n    const noPoolsMessage = showWatchlist ? t('Saved tokens will appear here') : t('No results')\r\n    return (\r\n      <>\r\n        {isLoading && <Skeleton />}\r\n        {showMessage && <Text>{noPoolsMessage}</Text>}\r\n        {!showWatchlist && debouncedSearchTerm.length < MINIMUM_SEARCH_CHARACTERS && (\r\n          <Text>{t('Search farms or tokens')}</Text>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {showMenu ? <Blackout /> : null}\r\n      <Container>\r\n        <StyledInput\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={(e) => {\r\n            setValue(e.target.value)\r\n          }}\r\n          placeholder={t('Search farms or tokens')}\r\n          ref={inputRef}\r\n          onFocus={() => {\r\n            setShowMenu(true)\r\n          }}\r\n        />\r\n        <Menu hide={!showMenu} ref={menuRef}>\r\n          <Flex mb=\"16px\">\r\n            <OptionButton enabled={!showWatchlist} onClick={() => setShowWatchlist(false)}>\r\n              {t('Search')}\r\n            </OptionButton>\r\n            <OptionButton enabled={showWatchlist} onClick={() => setShowWatchlist(true)}>\r\n              {t('Watchlist')}\r\n            </OptionButton>\r\n          </Flex>\r\n          {error && <Text color=\"failure\">{t('Error occurred, please try again')}</Text>}\r\n\r\n          <ResponsiveGrid>\r\n            <Text bold color=\"secondary\">\r\n              {t('Tokens')}\r\n            </Text>\r\n            {!isXs && !isSm && (\r\n              <Text textAlign=\"end\" fontSize=\"12px\">\r\n                {t('Price')}\r\n              </Text>\r\n            )}\r\n            {!isXs && !isSm && (\r\n              <Text textAlign=\"end\" fontSize=\"12px\">\r\n                {t('Volume 24H')}\r\n              </Text>\r\n            )}\r\n            {!isXs && !isSm && (\r\n              <Text textAlign=\"end\" fontSize=\"12px\">\r\n                {t('Liquidity')}\r\n              </Text>\r\n            )}\r\n          </ResponsiveGrid>\r\n          {tokensForList.slice(0, tokensShown).map((token, i) => {\r\n            return (\r\n              // eslint-disable-next-line react/no-array-index-key\r\n              <HoverRowLink onClick={() => handleItemClick(`/info/token/${token.address}`)} key={i}>\r\n                <ResponsiveGrid>\r\n                  <Flex>\r\n                    <CurrencyLogo address={token.address} />\r\n                    <Text ml=\"10px\">\r\n                      <Text>{`${token.name} (${token.symbol})`}</Text>\r\n                    </Text>\r\n                    <SaveIcon\r\n                      id=\"watchlist-icon\"\r\n                      style={{ marginLeft: '8px' }}\r\n                      fill={savedTokens.includes(token.address)}\r\n                      onClick={(e) => {\r\n                        e.stopPropagation()\r\n                        addSavedToken(token.address)\r\n                      }}\r\n                    />\r\n                  </Flex>\r\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.priceUSD)}</Text>}\r\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.volumeUSD)}</Text>}\r\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.liquidityUSD)}</Text>}\r\n                </ResponsiveGrid>\r\n              </HoverRowLink>\r\n            )\r\n          })}\r\n          {contentUnderTokenList()}\r\n          <HoverText\r\n            onClick={() => {\r\n              setTokensShown(tokensShown + 5)\r\n            }}\r\n            hide={tokensForList.length <= tokensShown}\r\n            ref={showMoreRef}\r\n          >\r\n            {t('See more...')}\r\n          </HoverText>\r\n\r\n          <Break />\r\n          <ResponsiveGrid>\r\n            <Text bold color=\"secondary\" mb=\"8px\">\r\n              Mines\r\n            </Text>\r\n            {!isXs && !isSm && (\r\n              <Text textAlign=\"end\" fontSize=\"12px\">\r\n                {t('Volume 24H')}\r\n              </Text>\r\n            )}\r\n            {!isXs && !isSm && (\r\n              <Text textAlign=\"end\" fontSize=\"12px\">\r\n                {t('Volume 7D')}\r\n              </Text>\r\n            )}\r\n            {!isXs && !isSm && (\r\n              <Text textAlign=\"end\" fontSize=\"12px\">\r\n                {t('Liquidity')}\r\n              </Text>\r\n            )}\r\n          </ResponsiveGrid>\r\n          {poolForList.slice(0, poolsShown).map((p, i) => {\r\n            return (\r\n              // eslint-disable-next-line react/no-array-index-key\r\n              <HoverRowLink onClick={() => handleItemClick(`/info/farm/${p.address}`)} key={i}>\r\n                <ResponsiveGrid>\r\n                  <Flex>\r\n                    <DoubleCurrencyLogo address0={p.token0.address} address1={p.token1.address} />\r\n                    <Text ml=\"10px\" style={{ whiteSpace: 'nowrap' }}>\r\n                      <Text>{`${p.token0.symbol} / ${p.token1.symbol}`}</Text>\r\n                    </Text>\r\n                    <SaveIcon\r\n                      id=\"watchlist-icon\"\r\n                      style={{ marginLeft: '10px' }}\r\n                      fill={savedPools.includes(p.address)}\r\n                      onClick={(e) => {\r\n                        e.stopPropagation()\r\n                        addSavedPool(p.address)\r\n                      }}\r\n                    />\r\n                  </Flex>\r\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.volumeUSD)}</Text>}\r\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.volumeUSDWeek)}</Text>}\r\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.liquidityUSD)}</Text>}\r\n                </ResponsiveGrid>\r\n              </HoverRowLink>\r\n            )\r\n          })}\r\n          {contentUnderPoolList()}\r\n          <HoverText\r\n            onClick={() => {\r\n              setPoolsShown(poolsShown + 5)\r\n            }}\r\n            hide={poolForList.length <= poolsShown}\r\n            ref={showMoreRef}\r\n          >\r\n            {t('See more...')}\r\n          </HoverText>\r\n        </Menu>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Link, useRouteMatch } from 'react-router-dom'\r\nimport { Box, Flex, ButtonMenu, ButtonMenuItem } from 'uranus-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Search from 'views/Info/components/InfoSearch'\r\n\r\nconst NavWrapper = styled(Flex)`\r\n  background: ${({ theme }) => theme.colors.gradients.cardHeader};\r\n  justify-content: space-between;\r\n  padding: 20px 16px;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding: 24px;\r\n    flex-direction: row;\r\n  }\r\n`\r\n\r\nconst InfoNav = () => {\r\n  const { t } = useTranslation()\r\n  const isPools = useRouteMatch(['/info/farms', '/info/farm', '/info/pair'])\r\n  const isTokens = useRouteMatch(['/info/tokens', '/info/token'])\r\n  let activeIndex = 0\r\n  if (isPools) {\r\n    activeIndex = 1\r\n  }\r\n  if (isTokens) {\r\n    activeIndex = 2\r\n  }\r\n  return (\r\n    <NavWrapper>\r\n      <Box>\r\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"primary\">\r\n          <ButtonMenuItem as={Link} to=\"/info\">\r\n            {t('Overview')}\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem as={Link} to=\"/info/farms\">\r\n            {t('Farms')}\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem as={Link} to=\"/info/tokens\">\r\n            {t('Tokens')}\r\n          </ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </Box>\r\n      <Box width={['100%', '100%', '250px']}>\r\n        <Search />\r\n      </Box>\r\n    </NavWrapper>\r\n  )\r\n}\r\n\r\nexport default InfoNav\r\n","import React from 'react'\r\nimport { Svg, SvgProps } from 'uranus-uikit'\r\n\r\nconst LineChartLoaderSVG: React.FC<SvgProps> = (props) => {\r\n  return (\r\n    <Svg width=\"100%\" height=\"100%\" preserveAspectRatio=\"none\" viewBox=\"0 0 100 50\" {...props}>\r\n      <path\r\n        d=\"M 0 49 C 1 49 1 45 4 47 C 7 49 7 35 11 37 C 13 38 14 32 16 34 C 18 35.6667 20 40 22 39 C 24 38 24 34 26 34 C 27 34 29 39 32 36 C 33 35 34 32 35 32 C 37 32 37 35 39 34 C 40 33 39 29 43 31 C 46 32 45 28 47 30 C 50 32 49 22 51 24 Q 53 26 55 24 C 56 23 56 25 57 26 C 58 27 59 28 60 28 C 63 28 66 17 67 16 C 68 15 69 17 70 16 C 71 15 71 13 74 13 C 76 13 76 14 77 15 C 79 17 80 18 82 18 C 83 18 83 17 84 17 C 87 17 89 24 91 24 C 93 24 95 20 96 17 C 97.6667 13.3333 98 9 101 6\"\r\n        stroke=\"#7645D9\"\r\n        strokeWidth=\"0.2\"\r\n        strokeDasharray=\"156\"\r\n        strokeDashoffset=\"156\"\r\n        fill=\"transparent\"\r\n        opacity=\"0.5\"\r\n        filter=\"url(#glow)\"\r\n      >\r\n        <animate\r\n          id=\"firstline\"\r\n          attributeName=\"stroke-dashoffset\"\r\n          dur=\"2s\"\r\n          from=\"156\"\r\n          to=\"-156\"\r\n          begin=\"0s;firstline.end+0.5s\"\r\n        />\r\n      </path>\r\n      <path\r\n        d=\"M 0 49 C 1 49 1 45 4 47 C 7 49 7 35 11 37 C 13 38 14 32 16 34 C 18 35.6667 20 40 22 39 C 24 38 24 34 26 34 C 27 34 29 39 32 36 C 33 35 34 32 35 32 C 37 32 37 35 39 34 C 40 33 39 29 43 31 C 46 32 45 28 47 30 C 50 32 49 22 51 24 Q 53 26 55 24 C 56 23 56 25 57 26 C 58 27 59 28 60 28 C 63 28 66 17 67 16 C 68 15 69 17 70 16 C 71 15 71 13 74 13 C 76 13 76 14 77 15 C 79 17 80 18 82 18 C 83 18 83 17 84 17 C 87 17 89 24 91 24 C 93 24 95 20 96 17 C 97.6667 13.3333 98 9 101 6\"\r\n        stroke=\"#7645D9\"\r\n        strokeWidth=\"0.2\"\r\n        strokeDasharray=\"156\"\r\n        strokeDashoffset=\"156\"\r\n        fill=\"transparent\"\r\n        opacity=\"0.5\"\r\n        filter=\"url(#glow)\"\r\n      >\r\n        <animate\r\n          id=\"secondline\"\r\n          attributeName=\"stroke-dashoffset\"\r\n          dur=\"2s\"\r\n          from=\"156\"\r\n          to=\"-156\"\r\n          begin=\"1.3s;secondline.end+0.5s\"\r\n        />\r\n      </path>\r\n      <defs>\r\n        <filter id=\"glow\">\r\n          <feGaussianBlur className=\"blur\" result=\"coloredBlur\" stdDeviation=\"4\" />\r\n          <feMerge>\r\n            <feMergeNode in=\"coloredBlur\" />\r\n            <feMergeNode in=\"coloredBlur\" />\r\n            <feMergeNode in=\"coloredBlur\" />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport default LineChartLoaderSVG\r\n","import React from 'react'\r\nimport { Svg, SvgProps } from 'uranus-uikit'\r\n\r\nconst BarChartLoaderSVG: React.FC<SvgProps> = (props) => {\r\n  return (\r\n    <Svg width=\"100%\" height=\"100%\" viewBox=\"0 0 50 25\" preserveAspectRatio=\"none\" opacity=\"0.1\" {...props}>\r\n      <rect width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.9s\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"0.9s\"\r\n          values=\"85%; 10%; 85%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.9s\"\r\n        />\r\n      </rect>\r\n      <rect x=\"10.222%\" width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.8s\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"0.9s\"\r\n          values=\"85%; 10%; 85%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.8s\"\r\n        />\r\n      </rect>\r\n      <rect x=\"20.444%\" width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.7s\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"0.9s\"\r\n          values=\"85%; 10%; 85%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.7s\"\r\n        />\r\n      </rect>\r\n      <rect x=\"30.666%\" width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.6s\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"0.9s\"\r\n          values=\"85%; 10%; 85%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.6s\"\r\n        />\r\n      </rect>\r\n      <rect x=\"40.888%\" width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.5s\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"0.9s\"\r\n          values=\"85%; 10%; 85%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.5s\"\r\n        />\r\n      </rect>\r\n      <rect x=\"51.11%\" width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.4s\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"0.9s\"\r\n          values=\"85%; 10%; 85%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.4s\"\r\n        />\r\n      </rect>\r\n      <rect x=\"61.332%\" width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.3s\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"0.9s\"\r\n          values=\"85%; 10%; 85%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.3s\"\r\n        />\r\n      </rect>\r\n      <rect x=\"71.554%\" width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.2s\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"0.9s\"\r\n          values=\"85%; 10%; 85%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.2s\"\r\n        />\r\n      </rect>\r\n      <rect x=\"81.776%\" width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.1s\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"0.9s\"\r\n          values=\"85%; 10%; 85%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.1s\"\r\n        />\r\n      </rect>\r\n      <rect x=\"91.998%\" width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate attributeName=\"y\" dur=\"0.9s\" values=\"85%; 10%; 85%\" keyTimes=\"0; 0.55; 1\" repeatCount=\"indefinite\" />\r\n      </rect>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport default BarChartLoaderSVG\r\n","import React from 'react'\r\nimport { Svg, SvgProps } from 'uranus-uikit'\r\n\r\nconst CandleChartLoaderSVG: React.FC<SvgProps> = (props) => {\r\n  return (\r\n    <Svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 50\" opacity=\"0.1\" {...props}>\r\n      <rect width=\"5%\" fill=\"#31D0AA\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"2s\"\r\n          values=\"0%; 40%; 40%; 10%; 10%\"\r\n          keyTimes=\"0; 0.125; 0.5; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"2s\"\r\n          from=\"50%\"\r\n          to=\"30%\"\r\n          values=\"30%; 10%; 10%; 25%; 25%\"\r\n          keyTimes=\"0; 0.125; 0.5; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"rx\"\r\n          dur=\"2s\"\r\n          values=\"0%; 0%; 100%; 100%;\"\r\n          keyTimes=\"0; 0.6; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"x\"\r\n          dur=\"2s\"\r\n          values=\"32.5%; 32.5%; 47.5%; 47.5%;\"\r\n          keyTimes=\"0; 0.7; 0.8; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"opacity\"\r\n          dur=\"2s\"\r\n          values=\"1; 1; 0; 0;\"\r\n          keyTimes=\"0; 0.75; 0.9; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </rect>\r\n      <rect width=\"5%\" fill=\"#31D0AA\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"2s\"\r\n          values=\"0%; 0%; 20%; 20%; 10%; 10%\"\r\n          keyTimes=\"0; 0.125; 0.25; 0.5; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"2s\"\r\n          values=\"15%; 15%; 5%; 5%; 25%; 25%\"\r\n          keyTimes=\"0; 0.125; 0.25; 0.5; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"rx\"\r\n          dur=\"2s\"\r\n          values=\"0%; 0%; 100%; 100%;\"\r\n          keyTimes=\"0; 0.6; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"x\"\r\n          dur=\"2s\"\r\n          values=\"42.5%; 42.5%; 47.5%; 47.5%;\"\r\n          keyTimes=\"0; 0.7; 0.8; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"opacity\"\r\n          dur=\"2s\"\r\n          values=\"1; 1; 0; 0;\"\r\n          keyTimes=\"0; 0.75; 0.9; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </rect>\r\n      <rect width=\"5%\" fill=\"#ED4B9E\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"2s\"\r\n          values=\"0%; 0%; 35%; 35%; 10%; 10%\"\r\n          keyTimes=\"0; 0.25; 0.375; 0.5; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"2s\"\r\n          values=\"25%; 25%; 10%; 10%; 25%; 25%\"\r\n          keyTimes=\"0; 0.25; 0.375; 0.5; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"rx\"\r\n          dur=\"2s\"\r\n          values=\"0%; 0%; 100%; 100%;\"\r\n          keyTimes=\"0; 0.6; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"x\"\r\n          dur=\"2s\"\r\n          values=\"52.5%; 52.5%; 47.5%; 47.5%;\"\r\n          keyTimes=\"0; 0.7; 0.8; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"opacity\"\r\n          dur=\"2s\"\r\n          values=\"1; 1; 0; 0;\"\r\n          keyTimes=\"0; 0.75; 0.9; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </rect>\r\n      <rect width=\"5%\" fill=\"#31D0AA\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"2s\"\r\n          values=\"0%; 0%; 35%; 35%; 10%; 10%\"\r\n          keyTimes=\"0; 0.375; 0.5; 0.5; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"2s\"\r\n          values=\"15%; 15%; 0%; 0%; 25%; 25%\"\r\n          keyTimes=\"0; 0.375; 0.5; 0.5; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"rx\"\r\n          dur=\"2s\"\r\n          values=\"0%; 0%; 100%; 100%;\"\r\n          keyTimes=\"0; 0.6; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"x\"\r\n          dur=\"2s\"\r\n          values=\"62.5%; 62.5%; 47.5%; 47.5%;\"\r\n          keyTimes=\"0; 0.7; 0.8; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"opacity\"\r\n          dur=\"2s\"\r\n          values=\"1; 1; 0; 0;\"\r\n          keyTimes=\"0; 0.75; 0.9; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </rect>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport default CandleChartLoaderSVG\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Text } from 'uranus-uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport LineChartLoaderSVG from './LineChartLoaderSVG'\r\nimport BarChartLoaderSVG from './BarChartLoaderSVG'\r\nimport CandleChartLoaderSVG from './CandleChartLoaderSVG'\r\n\r\nconst LoadingText = styled(Box)`\r\n  position: absolute;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  top: 50%;\r\n  left: 0;\r\n  right: 0;\r\n  text-align: center;\r\n`\r\n\r\nconst LoadingIndicator = styled(Box)`\r\n  height: 100%;\r\n  position: relative;\r\n`\r\n\r\nexport const BarChartLoader: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <LoadingIndicator>\r\n      <BarChartLoaderSVG />\r\n      <LoadingText>\r\n        <Text color=\"textSubtle\" fontSize=\"20px\">\r\n          {t('Loading chart data...')}\r\n        </Text>\r\n      </LoadingText>\r\n    </LoadingIndicator>\r\n  )\r\n}\r\n\r\nexport const LineChartLoader: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <LoadingIndicator>\r\n      <LineChartLoaderSVG />\r\n      <LoadingText>\r\n        <Text color=\"textSubtle\" fontSize=\"20px\">\r\n          {t('Loading chart data...')}\r\n        </Text>\r\n      </LoadingText>\r\n    </LoadingIndicator>\r\n  )\r\n}\r\n\r\nexport const CandleChartLoader: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <LoadingIndicator>\r\n      <CandleChartLoaderSVG />\r\n      <LoadingText>\r\n        <Text color=\"textSubtle\" fontSize=\"20px\">\r\n          {t('Loading chart data...')}\r\n        </Text>\r\n      </LoadingText>\r\n    </LoadingIndicator>\r\n  )\r\n}\r\n","import React, { useEffect, Dispatch, SetStateAction } from 'react'\r\nimport { format } from 'date-fns'\r\nimport { ResponsiveContainer, XAxis, YAxis, Tooltip, AreaChart, Area } from 'recharts'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport { LineChartLoader } from 'views/Info/components/ChartLoaders'\r\n\r\nexport type LineChartProps = {\r\n  data: any[]\r\n  setHoverValue: Dispatch<SetStateAction<number | undefined>> // used for value on hover\r\n  setHoverDate: Dispatch<SetStateAction<string | undefined>> // used for label of valye\r\n} & React.HTMLAttributes<HTMLDivElement>\r\n\r\n// Calls setHoverValue and setHoverDate when part of chart is hovered\r\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\r\nconst HoverUpdater = ({ payload, setHoverValue, setHoverDate }) => {\r\n  useEffect(() => {\r\n    setHoverValue(payload.value)\r\n    setHoverDate(format(payload.time, 'MMM d, yyyy'))\r\n  }, [payload.value, payload.time, setHoverValue, setHoverDate])\r\n\r\n  return null\r\n}\r\n\r\n/**\r\n * Note: remember that it needs to be mounted inside the container with fixed height\r\n */\r\nconst LineChart = ({ data, setHoverValue, setHoverDate }: LineChartProps) => {\r\n  const { theme } = useTheme()\r\n  if (!data || data.length === 0) {\r\n    return <LineChartLoader />\r\n  }\r\n  return (\r\n    <ResponsiveContainer>\r\n      <AreaChart\r\n        data={data}\r\n        width={300}\r\n        height={308}\r\n        margin={{\r\n          top: 5,\r\n          right: 15,\r\n          left: 0,\r\n          bottom: 5,\r\n        }}\r\n        onMouseLeave={() => {\r\n          if (setHoverDate) setHoverDate(undefined)\r\n          if (setHoverValue) setHoverValue(undefined)\r\n        }}\r\n      >\r\n        <XAxis\r\n          dataKey=\"time\"\r\n          axisLine={false}\r\n          tickLine={false}\r\n          tickFormatter={(time) => format(time, 'dd')}\r\n          minTickGap={10}\r\n        />\r\n        <YAxis\r\n          dataKey=\"value\"\r\n          tickCount={6}\r\n          scale=\"linear\"\r\n          axisLine={false}\r\n          tickLine={false}\r\n          fontSize=\"12px\"\r\n          tickFormatter={(val) => `$${formatAmount(val)}`}\r\n          orientation=\"right\"\r\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\r\n        />\r\n        <Tooltip\r\n          cursor={{ stroke: theme.colors.primary }}\r\n          contentStyle={{ display: 'none' }}\r\n          formatter={(tooltipValue, name, props) => (\r\n            <HoverUpdater payload={props.payload} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\r\n          )}\r\n        />\r\n        <Area\r\n          dataKey=\"value\"\r\n          type=\"monotone\"\r\n          stroke={theme.colors.primary}\r\n          fill={theme.colors.lightBlue}\r\n          strokeWidth={2}\r\n        />\r\n      </AreaChart>\r\n    </ResponsiveContainer>\r\n  )\r\n}\r\n\r\nexport default LineChart\r\n","import React from 'react'\r\nimport { Text, TextProps } from 'uranus-uikit'\r\n\r\nexport interface PercentProps extends TextProps {\r\n  value: number | undefined\r\n}\r\n\r\nconst Percent: React.FC<PercentProps> = ({ value, ...rest }) => {\r\n  if (!value || Number.isNaN(value)) {\r\n    return <Text {...rest}>-</Text>\r\n  }\r\n\r\n  const isNegative = value < 0\r\n\r\n  return (\r\n    <Text {...rest} color={isNegative ? 'failure' : 'success'}>\r\n      {isNegative ? '↓' : '↑'}\r\n      {Math.abs(value).toFixed(2)}%\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default Percent\r\n","import styled from 'styled-components'\r\nimport { Text, Flex } from 'uranus-uikit'\r\n\r\nexport const ClickableColumnHeader = styled(Text)`\r\n  cursor: pointer;\r\n`\r\n\r\nexport const TableWrapper = styled(Flex)`\r\n  width: 100%;\r\n  padding-top: 16px;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-radius: ${({ theme }) => theme.radii.card};  \r\n  box-shadow: 0px 10px 50px -20px rgba(121, 121, 121, 0.1);\r\n`\r\n\r\nexport const PageButtons = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-top: 0.2em;\r\n  margin-bottom: 1.2em;\r\n`\r\n\r\nexport const Arrow = styled.div`\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  padding: 0 20px;\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nexport const Break = styled.div`\r\n  height: 1px;\r\n  background-color: ${({ theme }) => theme.colors.cardBorder};\r\n  width: 100%;\r\n`\r\n","import React, { useState, useMemo, useCallback, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Box, Skeleton, useMatchBreakpoints, ArrowBackIcon, ArrowForwardIcon } from 'uranus-uikit'\r\nimport { TokenData } from 'state/info/types'\r\nimport { Link } from 'react-router-dom'\r\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport Percent from 'views/Info/components/Percent'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\r\n\r\n/**\r\n *  Columns on different layouts\r\n *  6 = | # | Name | Price | Price Change | Volume 24H | TVL |\r\n *  5 = | # | Name | Price |              | Volume 24H | TVL |\r\n *  4 = | # | Name | Price |              | Volume 24H |     |\r\n *  2 = |   | Name |       |              | Volume 24H |     |\r\n *  On smallest screen Name is reduced to just symbol\r\n */\r\nconst ResponsiveGrid = styled.div`\r\n  display: grid;\r\n  grid-gap: 1em;\r\n  align-items: center;\r\n\r\n  padding: 0 24px;\r\n\r\n  grid-template-columns: 20px 3fr repeat(4, 1fr);\r\n\r\n  @media screen and (max-width: 900px) {\r\n    grid-template-columns: 20px 2fr repeat(3, 1fr);\r\n    & :nth-child(4) {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    grid-template-columns: 20px 2fr repeat(2, 1fr);\r\n    & :nth-child(6) {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 670px) {\r\n    grid-template-columns: 1fr 1fr;\r\n    > *:first-child {\r\n      display: none;\r\n    }\r\n    > *:nth-child(3) {\r\n      display: none;\r\n    }\r\n  }\r\n`\r\n\r\nconst LinkWrapper = styled(Link)`\r\n  text-decoration: none;\r\n  :hover {\r\n    cursor: pointer;\r\n    opacity: 0.7;\r\n  }\r\n`\r\n\r\nconst ResponsiveLogo = styled(CurrencyLogo)`\r\n  @media screen and (max-width: 670px) {\r\n    width: 16px;\r\n    height: 16px;\r\n  }\r\n`\r\n\r\nconst TableLoader: React.FC = () => {\r\n  const loadingRow = (\r\n    <ResponsiveGrid>\r\n      <Skeleton />\r\n      <Skeleton />\r\n      <Skeleton />\r\n      <Skeleton />\r\n      <Skeleton />\r\n      <Skeleton />\r\n    </ResponsiveGrid>\r\n  )\r\n  return (\r\n    <>\r\n      {loadingRow}\r\n      {loadingRow}\r\n      {loadingRow}\r\n    </>\r\n  )\r\n}\r\n\r\nconst DataRow: React.FC<{ tokenData: TokenData; index: number }> = ({ tokenData, index }) => {\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  return (\r\n    <LinkWrapper to={`/info/token/${tokenData.address}`}>\r\n      <ResponsiveGrid>\r\n        <Flex>\r\n          <Text>{index + 1}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"center\">\r\n          <ResponsiveLogo address={tokenData.address} />\r\n          {(isXs || isSm) && <Text ml=\"8px\">{tokenData.symbol}</Text>}\r\n          {!isXs && !isSm && (\r\n            <Flex marginLeft=\"10px\">\r\n              <Text>{tokenData.name}</Text>\r\n              <Text ml=\"8px\">({tokenData.symbol})</Text>\r\n            </Flex>\r\n          )}\r\n        </Flex>\r\n        <Text fontWeight={400}>${formatAmount(tokenData.priceUSD, { notation: 'standard' })}</Text>\r\n        <Text fontWeight={400}>\r\n          <Percent value={tokenData.priceUSDChange} fontWeight={400} />\r\n        </Text>\r\n        <Text fontWeight={400}>${formatAmount(tokenData.volumeUSD)}</Text>\r\n        <Text fontWeight={400}>${formatAmount(tokenData.liquidityUSD)}</Text>\r\n      </ResponsiveGrid>\r\n    </LinkWrapper>\r\n  )\r\n}\r\n\r\nconst SORT_FIELD = {\r\n  name: 'name',\r\n  volumeUSD: 'volumeUSD',\r\n  tvlUSD: 'tvlUSD',\r\n  priceUSD: 'priceUSD',\r\n  priceUSDChange: 'priceUSDChange',\r\n  priceUSDChangeWeek: 'priceUSDChangeWeek',\r\n}\r\n\r\nconst MAX_ITEMS = 10\r\n\r\nconst TokenTable: React.FC<{\r\n  tokenDatas: TokenData[] | undefined\r\n  maxItems?: number\r\n}> = ({ tokenDatas, maxItems = MAX_ITEMS }) => {\r\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\r\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const [page, setPage] = useState(1)\r\n  const [maxPage, setMaxPage] = useState(1)\r\n  useEffect(() => {\r\n    let extraPages = 1\r\n    if (tokenDatas) {\r\n      if (tokenDatas.length % maxItems === 0) {\r\n        extraPages = 0\r\n      }\r\n      setMaxPage(Math.floor(tokenDatas.length / maxItems) + extraPages)\r\n    }\r\n  }, [maxItems, tokenDatas])\r\n\r\n  const sortedTokens = useMemo(() => {\r\n    return tokenDatas\r\n      ? tokenDatas\r\n          .sort((a, b) => {\r\n            if (a && b) {\r\n              return a[sortField as keyof TokenData] > b[sortField as keyof TokenData]\r\n                ? (sortDirection ? -1 : 1) * 1\r\n                : (sortDirection ? -1 : 1) * -1\r\n            }\r\n            return -1\r\n          })\r\n          .slice(maxItems * (page - 1), page * maxItems)\r\n      : []\r\n  }, [tokenDatas, maxItems, page, sortDirection, sortField])\r\n\r\n  const handleSort = useCallback(\r\n    (newField: string) => {\r\n      setSortField(newField)\r\n      setSortDirection(sortField !== newField ? true : !sortDirection)\r\n    },\r\n    [sortDirection, sortField],\r\n  )\r\n\r\n  const arrow = useCallback(\r\n    (field: string) => {\r\n      const directionArrow = !sortDirection ? '↑' : '↓'\r\n      return sortField === field ? directionArrow : ''\r\n    },\r\n    [sortDirection, sortField],\r\n  )\r\n\r\n  if (!tokenDatas) {\r\n    return <Skeleton />\r\n  }\r\n\r\n  return (\r\n    <TableWrapper>\r\n      <ResponsiveGrid>\r\n        <Text color=\"primary\" fontSize=\"12px\" bold>\r\n          #\r\n        </Text>\r\n        <ClickableColumnHeader\r\n          color=\"primary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.name)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('Name')} {arrow(SORT_FIELD.name)}\r\n        </ClickableColumnHeader>\r\n        <ClickableColumnHeader\r\n          color=\"primary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.priceUSD)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('Price')} {arrow(SORT_FIELD.priceUSD)}\r\n        </ClickableColumnHeader>\r\n        <ClickableColumnHeader\r\n          color=\"primary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.priceUSDChange)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('Price Change')} {arrow(SORT_FIELD.priceUSDChange)}\r\n        </ClickableColumnHeader>\r\n        <ClickableColumnHeader\r\n          color=\"primary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\r\n        </ClickableColumnHeader>\r\n        <ClickableColumnHeader\r\n          color=\"primary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.tvlUSD)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('Liquidity')} {arrow(SORT_FIELD.tvlUSD)}\r\n        </ClickableColumnHeader>\r\n      </ResponsiveGrid>\r\n\r\n      <Break />\r\n      {sortedTokens.length > 0 ? (\r\n        <>\r\n          {sortedTokens.map((data, i) => {\r\n            if (data) {\r\n              return (\r\n                <React.Fragment key={data.address}>\r\n                  <DataRow index={(page - 1) * MAX_ITEMS + i} tokenData={data} />\r\n                  <Break />\r\n                </React.Fragment>\r\n              )\r\n            }\r\n            return null\r\n          })}\r\n          <PageButtons>\r\n            <Arrow\r\n              onClick={() => {\r\n                setPage(page === 1 ? page : page - 1)\r\n              }}\r\n            >\r\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\r\n            </Arrow>\r\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\r\n            <Arrow\r\n              onClick={() => {\r\n                setPage(page === maxPage ? page : page + 1)\r\n              }}\r\n            >\r\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\r\n            </Arrow>\r\n          </PageButtons>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <TableLoader />\r\n          <Box />\r\n        </>\r\n      )}\r\n    </TableWrapper>\r\n  )\r\n}\r\n\r\nexport default TokenTable\r\n","import React, { useCallback, useState, useMemo, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\nimport { Text, Flex, Box, Skeleton, ArrowBackIcon, ArrowForwardIcon } from 'uranus-uikit'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport { PoolData } from 'state/info/types'\r\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\r\nimport { DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\r\n\r\n/**\r\n *  Columns on different layouts\r\n *  5 = | # | Pool | TVL | Volume 24H | Volume 7D |\r\n *  4 = | # | Pool |     | Volume 24H | Volume 7D |\r\n *  3 = | # | Pool |     | Volume 24H |           |\r\n *  2 = |   | Pool |     | Volume 24H |           |\r\n */\r\nconst ResponsiveGrid = styled.div`\r\n  display: grid;\r\n  grid-gap: 1em;\r\n  align-items: center;\r\n  grid-template-columns: 20px 3.5fr repeat(5, 1fr);\r\n\r\n  padding: 0 24px;\r\n  @media screen and (max-width: 900px) {\r\n    grid-template-columns: 20px 1.5fr repeat(3, 1fr);\r\n    & :nth-child(4),\r\n    & :nth-child(5) {\r\n      display: none;\r\n    }\r\n  }\r\n  @media screen and (max-width: 500px) {\r\n    grid-template-columns: 20px 1.5fr repeat(1, 1fr);\r\n    & :nth-child(4),\r\n    & :nth-child(5),\r\n    & :nth-child(6),\r\n    & :nth-child(7) {\r\n      display: none;\r\n    }\r\n  }\r\n  @media screen and (max-width: 480px) {\r\n    grid-template-columns: 2.5fr repeat(1, 1fr);\r\n    > *:nth-child(1) {\r\n      display: none;\r\n    }\r\n  }\r\n`\r\n\r\nconst LinkWrapper = styled(Link)`\r\n  text-decoration: none;\r\n  :hover {\r\n    cursor: pointer;\r\n    opacity: 0.7;\r\n  }\r\n`\r\n\r\nconst SORT_FIELD = {\r\n  volumeUSD: 'volumeUSD',\r\n  tvlUSD: 'tvlUSD',\r\n  volumeUSDWeek: 'volumeUSDWeek',\r\n  lpFees24h: 'lpFees24h',\r\n  lpApr7d: 'lpApr7d',\r\n}\r\n\r\nconst LoadingRow: React.FC = () => (\r\n  <ResponsiveGrid>\r\n    <Skeleton />\r\n    <Skeleton />\r\n    <Skeleton />\r\n    <Skeleton />\r\n    <Skeleton />\r\n    <Skeleton />\r\n    <Skeleton />\r\n  </ResponsiveGrid>\r\n)\r\n\r\nconst TableLoader: React.FC = () => (\r\n  <>\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n  </>\r\n)\r\n\r\nconst DataRow = ({ poolData, index }: { poolData: PoolData; index: number }) => {\r\n  return (\r\n    <LinkWrapper to={`/info/farm/${poolData.address}`}>\r\n      <ResponsiveGrid>\r\n        <Text>{index + 1}</Text>\r\n        <Flex>\r\n          <DoubleCurrencyLogo address0={poolData.token0.address} address1={poolData.token1.address} />\r\n          <Text ml=\"8px\">\r\n            {poolData.token0.symbol}/{poolData.token1.symbol}\r\n          </Text>\r\n        </Flex>\r\n        <Text>${formatAmount(poolData.volumeUSD)}</Text>\r\n        <Text>${formatAmount(poolData.volumeUSDWeek)}</Text>\r\n        <Text>${formatAmount(poolData.lpFees24h)}</Text>\r\n        <Text>{formatAmount(poolData.lpApr7d)}%</Text>\r\n        <Text>${formatAmount(poolData.liquidityUSD)}</Text>\r\n      </ResponsiveGrid>\r\n    </LinkWrapper>\r\n  )\r\n}\r\n\r\ninterface PoolTableProps {\r\n  poolDatas: PoolData[]\r\n  loading?: boolean // If true shows indication that SOME pools are loading, but the ones already fetched will be shown\r\n}\r\n\r\nconst PoolTable: React.FC<PoolTableProps> = ({ poolDatas, loading }) => {\r\n  // for sorting\r\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\r\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\r\n  const { t } = useTranslation()\r\n\r\n  // pagination\r\n  const [page, setPage] = useState(1)\r\n  const [maxPage, setMaxPage] = useState(1)\r\n  useEffect(() => {\r\n    let extraPages = 1\r\n    if (poolDatas.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\r\n      extraPages = 0\r\n    }\r\n    setMaxPage(Math.floor(poolDatas.length / ITEMS_PER_INFO_TABLE_PAGE) + extraPages)\r\n  }, [poolDatas])\r\n\r\n  const sortedPools = useMemo(() => {\r\n    return poolDatas\r\n      ? poolDatas\r\n          .sort((a, b) => {\r\n            if (a && b) {\r\n              return a[sortField as keyof PoolData] > b[sortField as keyof PoolData]\r\n                ? (sortDirection ? -1 : 1) * 1\r\n                : (sortDirection ? -1 : 1) * -1\r\n            }\r\n            return -1\r\n          })\r\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\r\n      : []\r\n  }, [page, poolDatas, sortDirection, sortField])\r\n\r\n  const handleSort = useCallback(\r\n    (newField: string) => {\r\n      setSortField(newField)\r\n      setSortDirection(sortField !== newField ? true : !sortDirection)\r\n    },\r\n    [sortDirection, sortField],\r\n  )\r\n\r\n  const arrow = useCallback(\r\n    (field: string) => {\r\n      const directionArrow = !sortDirection ? '↑' : '↓'\r\n      return sortField === field ? directionArrow : ''\r\n    },\r\n    [sortDirection, sortField],\r\n  )\r\n\r\n  return (\r\n    <TableWrapper>\r\n      <ResponsiveGrid>\r\n        <Text color=\"primary\" fontSize=\"12px\" bold>\r\n          #\r\n        </Text>\r\n        <Text color=\"primary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farm')}\r\n        </Text>\r\n        <ClickableColumnHeader\r\n          color=\"primary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\r\n        </ClickableColumnHeader>\r\n        <ClickableColumnHeader\r\n          color=\"primary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.volumeUSDWeek)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('Volume 7D')} {arrow(SORT_FIELD.volumeUSDWeek)}\r\n        </ClickableColumnHeader>\r\n        <ClickableColumnHeader\r\n          color=\"primary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.lpFees24h)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('LP reward fees 24H')} {arrow(SORT_FIELD.lpFees24h)}\r\n        </ClickableColumnHeader>\r\n        <ClickableColumnHeader\r\n          color=\"primary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.lpApr7d)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('LP reward APR')} {arrow(SORT_FIELD.lpApr7d)}\r\n        </ClickableColumnHeader>\r\n        <ClickableColumnHeader\r\n          color=\"primary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.tvlUSD)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('Liquidity')} {arrow(SORT_FIELD.tvlUSD)}\r\n        </ClickableColumnHeader>\r\n      </ResponsiveGrid>\r\n      <Break />\r\n      {sortedPools.length > 0 ? (\r\n        <>\r\n          {sortedPools.map((poolData, i) => {\r\n            if (poolData) {\r\n              return (\r\n                <React.Fragment key={poolData.address}>\r\n                  <DataRow index={(page - 1) * ITEMS_PER_INFO_TABLE_PAGE + i} poolData={poolData} />\r\n                  <Break />\r\n                </React.Fragment>\r\n              )\r\n            }\r\n            return null\r\n          })}\r\n          {loading && <LoadingRow />}\r\n          <PageButtons>\r\n            <Arrow\r\n              onClick={() => {\r\n                setPage(page === 1 ? page : page - 1)\r\n              }}\r\n            >\r\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\r\n            </Arrow>\r\n\r\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\r\n\r\n            <Arrow\r\n              onClick={() => {\r\n                setPage(page === maxPage ? page : page + 1)\r\n              }}\r\n            >\r\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\r\n            </Arrow>\r\n          </PageButtons>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <TableLoader />\r\n          {/* spacer */}\r\n          <Box />\r\n        </>\r\n      )}\r\n    </TableWrapper>\r\n  )\r\n}\r\n\r\nexport default PoolTable\r\n","import React, { useEffect, Dispatch, SetStateAction } from 'react'\r\nimport { format } from 'date-fns'\r\nimport { BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Bar } from 'recharts'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport { BarChartLoader } from 'views/Info/components/ChartLoaders'\r\n\r\nexport type LineChartProps = {\r\n  data: any[]\r\n  height?: string\r\n  chartHeight?: string\r\n  setHoverValue: Dispatch<SetStateAction<number | undefined>> // used for value on hover\r\n  setHoverDate: Dispatch<SetStateAction<string | undefined>> // used for label of valye\r\n} & React.HTMLAttributes<HTMLDivElement>\r\n\r\nconst CustomBar = ({\r\n  x,\r\n  y,\r\n  width,\r\n  height,\r\n  fill,\r\n}: {\r\n  x: number\r\n  y: number\r\n  width: number\r\n  height: number\r\n  fill: string\r\n}) => {\r\n  return (\r\n    <g>\r\n      <rect x={x} y={y} fill={fill} width={width} height={height} rx=\"2\" />\r\n    </g>\r\n  )\r\n}\r\n\r\n// Calls setHoverValue and setHoverDate when part of chart is hovered\r\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\r\nconst HoverUpdater = ({ payload, setHoverValue, setHoverDate }) => {\r\n  useEffect(() => {\r\n    setHoverValue(payload.value)\r\n    setHoverDate(format(payload.time, 'MMM d, yyyy'))\r\n  }, [payload.value, payload.time, setHoverValue, setHoverDate])\r\n\r\n  return null\r\n}\r\n\r\nconst Chart = ({ data, setHoverValue, setHoverDate }: LineChartProps) => {\r\n  const { theme } = useTheme()\r\n  if (!data || data.length === 0) {\r\n    return <BarChartLoader />\r\n  }\r\n  return (\r\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n      <BarChart\r\n        data={data}\r\n        margin={{\r\n          top: 5,\r\n          right: 15,\r\n          left: 0,\r\n          bottom: 5,\r\n        }}\r\n        onMouseLeave={() => {\r\n          setHoverDate(undefined)\r\n          setHoverValue(undefined)\r\n        }}\r\n      >\r\n        <XAxis\r\n          dataKey=\"time\"\r\n          axisLine={false}\r\n          tickLine={false}\r\n          tickFormatter={(time) => format(time, 'dd')}\r\n          minTickGap={10}\r\n        />\r\n        <YAxis\r\n          dataKey=\"value\"\r\n          tickCount={6}\r\n          scale=\"linear\"\r\n          axisLine={false}\r\n          tickLine={false}\r\n          color={theme.colors.textSubtle}\r\n          fontSize=\"12px\"\r\n          tickFormatter={(val) => `$${formatAmount(val)}`}\r\n          orientation=\"right\"\r\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\r\n        />\r\n        <Tooltip\r\n          cursor={{ fill: theme.colors.backgroundDisabled }}\r\n          contentStyle={{ display: 'none' }}\r\n          formatter={(tooltipValue, name, props) => (\r\n            <HoverUpdater payload={props.payload} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\r\n          )}\r\n        />\r\n        <Bar\r\n          dataKey=\"value\"\r\n          fill={theme.colors.primary}\r\n          shape={(props) => (\r\n            <CustomBar height={props.height} width={props.width} x={props.x} y={props.y} fill={theme.colors.primary} />\r\n          )}\r\n        />\r\n      </BarChart>\r\n    </ResponsiveContainer>\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","// TODO PCS refactor ternaries\r\n/* eslint-disable no-nested-ternary */\r\nimport React, { useCallback, useState, useMemo, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { formatDistanceToNowStrict } from 'date-fns'\r\nimport { Text, Flex, Box, Radio, Skeleton, LinkExternal, ArrowForwardIcon, ArrowBackIcon } from 'uranus-uikit'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport { getExplorerLink } from 'utils'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { Transaction, TransactionType } from 'state/info/types'\r\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n`\r\n\r\nconst ResponsiveGrid = styled.div`\r\n  display: grid;\r\n  grid-gap: 1em;\r\n  align-items: center;\r\n  grid-template-columns: 2fr 0.8fr repeat(4, 1fr);\r\n  padding: 0 24px;\r\n  @media screen and (max-width: 940px) {\r\n    grid-template-columns: 2fr repeat(4, 1fr);\r\n    & > *:nth-child(5) {\r\n      display: none;\r\n    }\r\n  }\r\n  @media screen and (max-width: 800px) {\r\n    grid-template-columns: 2fr repeat(2, 1fr);\r\n    & > *:nth-child(5) {\r\n      display: none;\r\n    }\r\n    & > *:nth-child(3) {\r\n      display: none;\r\n    }\r\n    & > *:nth-child(4) {\r\n      display: none;\r\n    }\r\n  }\r\n  @media screen and (max-width: 500px) {\r\n    grid-template-columns: 2fr 1fr;\r\n    & > *:nth-child(5) {\r\n      display: none;\r\n    }\r\n    & > *:nth-child(3) {\r\n      display: none;\r\n    }\r\n    & > *:nth-child(4) {\r\n      display: none;\r\n    }\r\n    & > *:nth-child(2) {\r\n      display: none;\r\n    }\r\n  }\r\n`\r\n\r\nconst RadioGroup = styled(Flex)`\r\n  align-items: center;\r\n  margin-right: 16px;\r\n  margin-top: 8px;\r\n  cursor: pointer;\r\n`\r\n\r\nconst SORT_FIELD = {\r\n  amountUSD: 'amountUSD',\r\n  timestamp: 'timestamp',\r\n  sender: 'sender',\r\n  amountToken0: 'amountToken0',\r\n  amountToken1: 'amountToken1',\r\n}\r\n\r\nconst TableLoader: React.FC = () => {\r\n  const loadingRow = (\r\n    <ResponsiveGrid>\r\n      <Skeleton />\r\n      <Skeleton />\r\n      <Skeleton />\r\n      <Skeleton />\r\n      <Skeleton />\r\n      <Skeleton />\r\n    </ResponsiveGrid>\r\n  )\r\n  return (\r\n    <>\r\n      {loadingRow}\r\n      {loadingRow}\r\n      {loadingRow}\r\n    </>\r\n  )\r\n}\r\n\r\nconst DataRow: React.FC<{ transaction: Transaction }> = ({ transaction }) => {\r\n  const { t } = useTranslation()\r\n  const abs0 = Math.abs(transaction.amountToken0)\r\n  const abs1 = Math.abs(transaction.amountToken1)\r\n  const outputTokenSymbol = transaction.amountToken0 < 0 ? transaction.token0Symbol : transaction.token1Symbol\r\n  const inputTokenSymbol = transaction.amountToken1 < 0 ? transaction.token0Symbol : transaction.token1Symbol\r\n\r\n  return (\r\n    <ResponsiveGrid>\r\n      <LinkExternal href={getExplorerLink(transaction.hash, 'transaction')}>\r\n        <Text>\r\n          {transaction.type === TransactionType.MINT\r\n            ? t('Add %token0% and %token1%', { token0: transaction.token0Symbol, token1: transaction.token1Symbol })\r\n            : transaction.type === TransactionType.SWAP\r\n            ? t('Swap %token0% for %token1%', { token0: inputTokenSymbol, token1: outputTokenSymbol })\r\n            : t('Remove %token0% and %token1%', { token0: transaction.token0Symbol, token1: transaction.token1Symbol })}\r\n        </Text>\r\n      </LinkExternal>\r\n      <Text>${formatAmount(transaction.amountUSD)}</Text>\r\n      <Text>\r\n        <Text>{`${formatAmount(abs0)} ${transaction.token0Symbol}`}</Text>\r\n      </Text>\r\n      <Text>\r\n        <Text>{`${formatAmount(abs1)} ${transaction.token1Symbol}`}</Text>\r\n      </Text>\r\n      <LinkExternal href={getExplorerLink(transaction.sender, 'address')}>\r\n        <Text>{truncateHash(transaction.sender)}</Text>\r\n      </LinkExternal>\r\n      <Text>{formatDistanceToNowStrict(parseInt(transaction.timestamp, 10) * 1000)}</Text>\r\n    </ResponsiveGrid>\r\n  )\r\n}\r\n\r\nconst TransactionTable: React.FC<{\r\n  transactions: Transaction[]\r\n}> = ({ transactions }) => {\r\n  const [sortField, setSortField] = useState(SORT_FIELD.timestamp)\r\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const [page, setPage] = useState(1)\r\n  const [maxPage, setMaxPage] = useState(1)\r\n\r\n  const [txFilter, setTxFilter] = useState<TransactionType | undefined>(undefined)\r\n\r\n  const sortedTransactions = useMemo(() => {\r\n    return transactions\r\n      ? transactions\r\n          .slice()\r\n          .sort((a, b) => {\r\n            if (a && b) {\r\n              return a[sortField as keyof Transaction] > b[sortField as keyof Transaction]\r\n                ? (sortDirection ? -1 : 1) * 1\r\n                : (sortDirection ? -1 : 1) * -1\r\n            }\r\n            return -1\r\n          })\r\n          .filter((x) => {\r\n            return txFilter === undefined || x.type === txFilter\r\n          })\r\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\r\n      : []\r\n  }, [transactions, page, sortField, sortDirection, txFilter])\r\n\r\n  // Update maxPage based on amount of items & applied filtering\r\n  useEffect(() => {\r\n    if (transactions) {\r\n      const filteredTransactions = transactions.filter((tx) => {\r\n        return txFilter === undefined || tx.type === txFilter\r\n      })\r\n      if (filteredTransactions.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\r\n        setMaxPage(Math.floor(filteredTransactions.length / ITEMS_PER_INFO_TABLE_PAGE))\r\n      } else {\r\n        setMaxPage(Math.floor(filteredTransactions.length / ITEMS_PER_INFO_TABLE_PAGE) + 1)\r\n      }\r\n    }\r\n  }, [transactions, txFilter])\r\n\r\n  const handleFilter = useCallback(\r\n    (newFilter: TransactionType) => {\r\n      if (newFilter !== txFilter) {\r\n        setTxFilter(newFilter)\r\n        setPage(1)\r\n      }\r\n    },\r\n    [txFilter],\r\n  )\r\n\r\n  const handleSort = useCallback(\r\n    (newField: string) => {\r\n      setSortField(newField)\r\n      setSortDirection(sortField !== newField ? true : !sortDirection)\r\n    },\r\n    [sortDirection, sortField],\r\n  )\r\n\r\n  const arrow = useCallback(\r\n    (field: string) => {\r\n      const directionArrow = !sortDirection ? '↑' : '↓'\r\n      return sortField === field ? directionArrow : ''\r\n    },\r\n    [sortDirection, sortField],\r\n  )\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex mb=\"16px\">\r\n        <Flex flexDirection={['column', 'row']}>\r\n          <RadioGroup onClick={() => handleFilter(undefined)}>\r\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === undefined} />\r\n            <Text fontSize=\"13px\" ml=\"8px\">\r\n              {t('All')}\r\n            </Text>\r\n          </RadioGroup>\r\n\r\n          <RadioGroup onClick={() => handleFilter(TransactionType.SWAP)}>\r\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === TransactionType.SWAP} />\r\n            <Text fontSize=\"13px\" ml=\"8px\">\r\n              {t('Swaps')}\r\n            </Text>\r\n          </RadioGroup>\r\n        </Flex>\r\n\r\n        <Flex flexDirection={['column', 'row']}>\r\n          <RadioGroup onClick={() => handleFilter(TransactionType.MINT)}>\r\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === TransactionType.MINT} />\r\n            <Text fontSize=\"13px\" ml=\"8px\">\r\n              {t('Adds')}\r\n            </Text>\r\n          </RadioGroup>\r\n\r\n          <RadioGroup onClick={() => handleFilter(TransactionType.BURN)}>\r\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === TransactionType.BURN} />\r\n            <Text fontSize=\"13px\" ml=\"8px\">\r\n              {t('Removes')}\r\n            </Text>\r\n          </RadioGroup>\r\n        </Flex>\r\n      </Flex>\r\n      <TableWrapper>\r\n        <ResponsiveGrid>\r\n          <Text color=\"primary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n            {t('Action')}\r\n          </Text>\r\n          <ClickableColumnHeader\r\n            color=\"primary\"\r\n            fontSize=\"12px\"\r\n            bold\r\n            onClick={() => handleSort(SORT_FIELD.amountUSD)}\r\n            textTransform=\"uppercase\"\r\n          >\r\n            {t('Total Value')} {arrow(SORT_FIELD.amountUSD)}\r\n          </ClickableColumnHeader>\r\n          <ClickableColumnHeader\r\n            color=\"primary\"\r\n            fontSize=\"12px\"\r\n            bold\r\n            onClick={() => handleSort(SORT_FIELD.amountToken0)}\r\n            textTransform=\"uppercase\"\r\n          >\r\n            {t('Token Amount')} {arrow(SORT_FIELD.amountToken0)}\r\n          </ClickableColumnHeader>\r\n          <ClickableColumnHeader\r\n            color=\"primary\"\r\n            fontSize=\"12px\"\r\n            bold\r\n            onClick={() => handleSort(SORT_FIELD.amountToken1)}\r\n            textTransform=\"uppercase\"\r\n          >\r\n            {t('Token Amount')} {arrow(SORT_FIELD.amountToken1)}\r\n          </ClickableColumnHeader>\r\n          <ClickableColumnHeader\r\n            color=\"primary\"\r\n            fontSize=\"12px\"\r\n            bold\r\n            onClick={() => handleSort(SORT_FIELD.sender)}\r\n            textTransform=\"uppercase\"\r\n          >\r\n            {t('Account')} {arrow(SORT_FIELD.sender)}\r\n          </ClickableColumnHeader>\r\n          <ClickableColumnHeader\r\n            color=\"primary\"\r\n            fontSize=\"12px\"\r\n            bold\r\n            onClick={() => handleSort(SORT_FIELD.timestamp)}\r\n            textTransform=\"uppercase\"\r\n          >\r\n            {t('Time')} {arrow(SORT_FIELD.timestamp)}\r\n          </ClickableColumnHeader>\r\n        </ResponsiveGrid>\r\n        <Break />\r\n\r\n        {transactions ? (\r\n          <>\r\n            {sortedTransactions.map((transaction, index) => {\r\n              if (transaction) {\r\n                return (\r\n                  // eslint-disable-next-line react/no-array-index-key\r\n                  <React.Fragment key={index}>\r\n                    <DataRow transaction={transaction} />\r\n                    <Break />\r\n                  </React.Fragment>\r\n                )\r\n              }\r\n              return null\r\n            })}\r\n            {sortedTransactions.length === 0 ? (\r\n              <Flex justifyContent=\"center\">\r\n                <Text>{t('No Transactions')}</Text>\r\n              </Flex>\r\n            ) : undefined}\r\n            <PageButtons>\r\n              <Arrow\r\n                onClick={() => {\r\n                  setPage(page === 1 ? page : page - 1)\r\n                }}\r\n              >\r\n                <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\r\n              </Arrow>\r\n\r\n              <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\r\n              <Arrow\r\n                onClick={() => {\r\n                  setPage(page === maxPage ? page : page + 1)\r\n                }}\r\n              >\r\n                <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\r\n              </Arrow>\r\n            </PageButtons>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <TableLoader />\r\n            {/* spacer */}\r\n            <Box />\r\n          </>\r\n        )}\r\n      </TableWrapper>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default TransactionTable\r\n","import React, { useState, useMemo, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Box, Text, Heading, Card, Skeleton } from 'uranus-uikit'\r\nimport { format, fromUnixTime } from 'date-fns'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Page from 'components/Layout/Page'\r\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\r\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\r\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\r\nimport {\r\n  useAllPoolData,\r\n  useAllTokenData,\r\n  useProtocolChartData,\r\n  useProtocolData,\r\n  useProtocolTransactions,\r\n} from 'state/info/hooks'\r\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\r\n\r\nexport const ChartCardsContainer = styled(Flex)`\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  padding: 0;\r\n  gap: 1em;\r\n\r\n  & > * {\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex-direction: row;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    gap: 2rem;\r\n  } ;\r\n`\r\n\r\nconst Overview: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  const [liquidityHover, setLiquidityHover] = useState<number | undefined>()\r\n  const [liquidityDateHover, setLiquidityDateHover] = useState<string | undefined>()\r\n  const [volumeHover, setVolumeHover] = useState<number | undefined>()\r\n  const [volumeDateHover, setVolumeDateHover] = useState<string | undefined>()\r\n\r\n  const [protocolData] = useProtocolData()\r\n  const [chartData] = useProtocolChartData()\r\n  const [transactions] = useProtocolTransactions()\r\n\r\n  const currentDate = format(new Date(), 'MMM d, yyyy')\r\n\r\n  // Getting latest liquidity and volumeUSD to display on top of chart when not hovered\r\n  useEffect(() => {\r\n    if (volumeHover == null && protocolData) {\r\n      setVolumeHover(protocolData.volumeUSD)\r\n    }\r\n  }, [protocolData, volumeHover])\r\n  useEffect(() => {\r\n    if (liquidityHover == null && protocolData) {\r\n      setLiquidityHover(protocolData.liquidityUSD)\r\n    }\r\n  }, [liquidityHover, protocolData])\r\n\r\n  const formattedLiquidityData = useMemo(() => {\r\n    if (chartData) {\r\n      return chartData.map((day) => {\r\n        return {\r\n          time: fromUnixTime(day.date),\r\n          value: day.liquidityUSD,\r\n        }\r\n      })\r\n    }\r\n    return []\r\n  }, [chartData])\r\n\r\n  const formattedVolumeData = useMemo(() => {\r\n    if (chartData) {\r\n      return chartData.map((day) => {\r\n        return {\r\n          time: fromUnixTime(day.date),\r\n          value: day.volumeUSD,\r\n        }\r\n      })\r\n    }\r\n    return []\r\n  }, [chartData])\r\n\r\n  const allTokens = useAllTokenData()\r\n\r\n  const formattedTokens = useMemo(() => {\r\n    return Object.values(allTokens)\r\n      .map((token) => token.data)\r\n      .filter((token) => token)\r\n  }, [allTokens])\r\n\r\n  const allPoolData = useAllPoolData()\r\n  const poolDatas = useMemo(() => {\r\n    return Object.values(allPoolData)\r\n      .map((pool) => pool.data)\r\n      .filter((pool) => pool)\r\n  }, [allPoolData])\r\n\r\n  const somePoolsAreLoading = useMemo(() => {\r\n    return Object.values(allPoolData).some((pool) => !pool.data)\r\n  }, [allPoolData])\r\n\r\n  return (\r\n    <Page>\r\n      <Heading scale=\"lg\" mb=\"16px\" id=\"info-overview-title\">\r\n        {t('TAN Info & Analytics')}\r\n      </Heading>\r\n      <ChartCardsContainer>\r\n        <Card>\r\n          <Box p={['16px', '16px', '24px']}>\r\n            <Text bold color=\"black\">\r\n              {t('Liquidity')}\r\n            </Text>\r\n            {liquidityHover > 0 ? (\r\n              <Text bold fontSize=\"24px\">\r\n                ${formatAmount(liquidityHover)}\r\n              </Text>\r\n            ) : (\r\n              <Skeleton width=\"128px\" height=\"36px\" />\r\n            )}\r\n            <Text color=\"darkGrey\">{liquidityDateHover ?? currentDate}</Text>\r\n            <Box height=\"250px\">\r\n              <LineChart\r\n                data={formattedLiquidityData}\r\n                setHoverValue={setLiquidityHover}\r\n                setHoverDate={setLiquidityDateHover}\r\n              />\r\n            </Box>\r\n          </Box>\r\n        </Card>\r\n        <Card>\r\n          <Box p={['16px', '16px', '24px']}>\r\n            <Text bold color=\"black\">\r\n              {t('Volume 24H')}\r\n            </Text>\r\n            {volumeHover > 0 ? (\r\n              <Text bold fontSize=\"24px\">\r\n                ${formatAmount(volumeHover)}\r\n              </Text>\r\n            ) : (\r\n              <Skeleton width=\"128px\" height=\"36px\" />\r\n            )}\r\n            <Text color=\"darkGrey\">{volumeDateHover ?? currentDate}</Text>\r\n            <Box height=\"250px\">\r\n              <BarChart data={formattedVolumeData} setHoverValue={setVolumeHover} setHoverDate={setVolumeDateHover} />\r\n            </Box>\r\n          </Box>\r\n        </Card>\r\n      </ChartCardsContainer>\r\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\r\n        {t('Top Tokens')}\r\n      </Heading>\r\n      <TokenTable tokenDatas={formattedTokens} />\r\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\r\n        {t('Top Farms')}\r\n      </Heading>\r\n      <PoolTable poolDatas={poolDatas} loading={somePoolsAreLoading} />\r\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\r\n        {t('Transactions')}\r\n      </Heading>\r\n      <TransactionTable transactions={transactions} />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Overview\r\n","import styled from \"styled-components\"\r\nimport { Flex, FlexProps } from \"uranus-uikit\"\r\nimport { space } from \"styled-system\"\r\n\r\nexport const WatchlistCard = styled(Flex)<FlexProps>`\r\n  background: ${({ theme }) => theme.colors.lightBeige};\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  overflow: hidden;\r\n  position: relative;\r\n\r\n  padding: 1px 1px 3px 1px;\r\n\r\n  ${space}\r\n`","import React, { useMemo } from 'react'\r\nimport { Text, Heading } from 'uranus-uikit'\r\nimport Page from 'components/Layout/Page'\r\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\r\nimport { useAllPoolData, usePoolDatas } from 'state/info/hooks'\r\nimport { useWatchlistPools } from 'state/user/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { WatchlistCard } from '../components/Watchlist'\r\n\r\nconst PoolsOverview: React.FC = () => {\r\n  const { t } = useTranslation()\r\n\r\n  // get all the pool datas that exist\r\n  const allPoolData = useAllPoolData()\r\n  const poolDatas = useMemo(() => {\r\n    return Object.values(allPoolData)\r\n      .map((pool) => pool.data)\r\n      .filter((pool) => pool)\r\n  }, [allPoolData])\r\n\r\n  const [savedPools] = useWatchlistPools()\r\n  const watchlistPools = usePoolDatas(savedPools)\r\n\r\n  return (\r\n    <Page>\r\n      <Heading scale=\"lg\" mb=\"16px\">\r\n        {t('Your Watchlist')}\r\n      </Heading>\r\n      <WatchlistCard justifyContent=\"center\">\r\n        {watchlistPools.length > 0 ? (\r\n          <PoolTable poolDatas={watchlistPools} />\r\n        ) : (\r\n          <Text px=\"24px\" py=\"16px\" bold>\r\n            {t('Saved farms will appear here')}\r\n          </Text>\r\n        )}\r\n      </WatchlistCard>\r\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\" id=\"info-pools-title\">\r\n        {t('All Farms')}\r\n      </Heading>\r\n      <PoolTable poolDatas={poolDatas} />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default PoolsOverview\r\n","import React, { useRef, useState, useEffect, useCallback, Dispatch, SetStateAction } from 'react'\r\nimport { createChart, IChartApi } from 'lightweight-charts'\r\nimport { format } from 'date-fns'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { CandleChartLoader } from 'views/Info/components/ChartLoaders'\r\n\r\nconst CANDLE_CHART_HEIGHT = 250\r\n\r\nexport type LineChartProps = {\r\n  data: any[]\r\n  setValue?: Dispatch<SetStateAction<number | undefined>> // used for value on hover\r\n  setLabel?: Dispatch<SetStateAction<string | undefined>> // used for value label on hover\r\n} & React.HTMLAttributes<HTMLDivElement>\r\n\r\nconst CandleChart = ({ data, setValue, setLabel, ...rest }: LineChartProps) => {\r\n  const { theme } = useTheme()\r\n  const chartRef = useRef<HTMLDivElement>(null)\r\n  const [chartCreated, setChart] = useState<IChartApi | undefined>()\r\n\r\n  const handleResize = useCallback(() => {\r\n    if (chartCreated && chartRef?.current?.parentElement) {\r\n      chartCreated.resize(chartRef.current.parentElement.clientWidth - 32, CANDLE_CHART_HEIGHT)\r\n      chartCreated.timeScale().fitContent()\r\n      chartCreated.timeScale().scrollToPosition(0, false)\r\n    }\r\n  }, [chartCreated, chartRef])\r\n\r\n  // add event listener for resize\r\n  const isClient = typeof window === 'object'\r\n  useEffect(() => {\r\n    if (!isClient) {\r\n      return null\r\n    }\r\n    window.addEventListener('resize', handleResize)\r\n    return () => window.removeEventListener('resize', handleResize)\r\n  }, [isClient, chartRef, handleResize]) // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  // if chart not instantiated in canvas, create it\r\n  useEffect(() => {\r\n    if (!chartCreated && data && !!chartRef?.current?.parentElement) {\r\n      const chart = createChart(chartRef.current, {\r\n        height: CANDLE_CHART_HEIGHT,\r\n        width: chartRef.current.parentElement.clientWidth - 32,\r\n        layout: {\r\n          backgroundColor: 'transparent',\r\n          textColor: theme.colors.textSubtle,\r\n          fontFamily: 'Poppins, sans-serif',\r\n          fontSize: 12,\r\n        },\r\n        rightPriceScale: {\r\n          scaleMargins: {\r\n            top: 0.1,\r\n            bottom: 0.1,\r\n          },\r\n          borderVisible: false,\r\n        },\r\n        timeScale: {\r\n          borderVisible: false,\r\n          secondsVisible: true,\r\n          tickMarkFormatter: (unixTime: number) => {\r\n            return format(unixTime * 1000, 'MM/dd h:mm a')\r\n          },\r\n        },\r\n        watermark: {\r\n          visible: false,\r\n        },\r\n        grid: {\r\n          horzLines: {\r\n            visible: false,\r\n          },\r\n          vertLines: {\r\n            visible: false,\r\n          },\r\n        },\r\n        crosshair: {\r\n          horzLine: {\r\n            visible: false,\r\n            labelVisible: false,\r\n          },\r\n          mode: 1,\r\n          vertLine: {\r\n            visible: true,\r\n            labelVisible: false,\r\n            style: 3,\r\n            width: 1,\r\n            color: theme.colors.textSubtle,\r\n            labelBackgroundColor: theme.colors.primary,\r\n          },\r\n        },\r\n      })\r\n\r\n      chart.timeScale().fitContent()\r\n      setChart(chart)\r\n    }\r\n  }, [chartCreated, data, setValue, theme])\r\n\r\n  useEffect(() => {\r\n    if (chartCreated && data) {\r\n      const series = chartCreated.addCandlestickSeries({\r\n        upColor: theme.colors.success,\r\n        downColor: theme.colors.failure,\r\n        borderDownColor: theme.colors.failure,\r\n        borderUpColor: theme.colors.success,\r\n        wickDownColor: theme.colors.failure,\r\n        wickUpColor: theme.colors.success,\r\n      })\r\n\r\n      series.setData(data)\r\n\r\n      // update the title when hovering on the chart\r\n      chartCreated.subscribeCrosshairMove((param) => {\r\n        if (\r\n          chartRef?.current &&\r\n          (param === undefined ||\r\n            param.time === undefined ||\r\n            (param && param.point && param.point.x < 0) ||\r\n            (param && param.point && param.point.x > chartRef.current.clientWidth) ||\r\n            (param && param.point && param.point.y < 0) ||\r\n            (param && param.point && param.point.y > CANDLE_CHART_HEIGHT))\r\n        ) {\r\n          // reset values\r\n          if (setValue) setValue(undefined)\r\n          if (setLabel) setLabel(undefined)\r\n        } else if (series && param) {\r\n          const timestamp = param.time as number\r\n          const now = new Date(timestamp * 1000)\r\n          const utc = new Date(now.getTime() + now.getTimezoneOffset() * 60000)\r\n          const time = `${format(utc, 'MMM d, yyyy h:mm a')} (UTC)`\r\n          const parsed = param.seriesPrices.get(series) as { open: number } | undefined\r\n          if (setValue) setValue(parsed?.open)\r\n          if (setLabel) setLabel(time)\r\n        }\r\n      })\r\n    }\r\n  }, [chartCreated, data, setValue, setLabel, theme])\r\n\r\n  return (\r\n    <>\r\n      {!chartCreated && <CandleChartLoader />}\r\n      <div ref={chartRef} id=\"candle-chart\" {...rest} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CandleChart\r\n","import React from 'react'\r\nimport { Flex } from 'uranus-uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst Wrapper = styled(Flex)`\r\n  overflow-x: scroll;\r\n  padding: 0;\r\n  border-radius: 24px 24px 0 0;\r\n  ::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n  scrollbar-width: none; /* Firefox */\r\n`\r\n\r\nconst Inner = styled(Flex)`\r\n  justify-content: space-between;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  width: 100%;\r\n`\r\n\r\ninterface TabProps {\r\n  isActive?: boolean\r\n  onClick?: () => void\r\n}\r\n\r\nexport const TabToggle = styled.button<TabProps>`\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  flex: 1;\r\n  border: 0;\r\n  outline: 0;\r\n  padding: 16px;\r\n  margin: 0;\r\n  border-radius: 24px 24px 0 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: ${({ theme, isActive }) => (isActive ? theme.colors.text : theme.colors.textSubtle)};\r\n  background-color: ${({ theme, isActive }) => (isActive ? theme.card.background : theme.colors.input)};\r\n`\r\n\r\ninterface TabToggleGroupProps {\r\n  children: React.ReactElement[]\r\n}\r\n\r\nexport const TabToggleGroup: React.FC<TabToggleGroupProps> = ({ children }) => {\r\n  return (\r\n    <Wrapper p={['0 4px', '0 16px']}>\r\n      <Inner>{children}</Inner>\r\n    </Wrapper>\r\n  )\r\n}\r\n","/* eslint-disable no-nested-ternary */\r\nimport React, { useEffect, useState } from 'react'\r\nimport { RouteComponentProps, Link } from 'react-router-dom'\r\nimport {\r\n  Text,\r\n  Flex,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  Breadcrumbs,\r\n  Heading,\r\n  LinkExternal,\r\n  useMatchBreakpoints,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n  HelpIcon,\r\n  useTooltip,\r\n} from 'uranus-uikit'\r\nimport styled from 'styled-components'\r\nimport { Spinner } from 'components/Spinner'\r\nimport Page from 'components/Layout/Page'\r\nimport { getExplorerLink } from 'utils'\r\nimport { CurrencyLogo, DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport Percent from 'views/Info/components/Percent'\r\nimport SaveIcon from 'views/Info/components/SaveIcon'\r\nimport { usePoolDatas, usePoolChartData, usePoolTransactions } from 'state/info/hooks'\r\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\r\nimport { useWatchlistPools } from 'state/user/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ChartCard from 'views/Info/components/InfoCharts/ChartCard'\r\n\r\nconst ContentLayout = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 300px 1fr;\r\n  grid-gap: 1em;\r\n  margin-top: 16px;\r\n  @media screen and (max-width: 800px) {\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: 1fr 1fr;\r\n  }\r\n`\r\n\r\nconst TokenButton = styled(Flex)`\r\n  padding: 8px 0px;\r\n  margin-right: 16px;\r\n  :hover {\r\n    cursor: pointer;\r\n    opacity: 0.6;\r\n  }\r\n`\r\n\r\nconst LockedTokensContainer = styled(Flex)`\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  background-color: ${({ theme }) => theme.colors.background};\r\n  padding: 16px;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n  margin-top: 8px;\r\n  border-radius: 16px;\r\n  max-width: 280px;\r\n`\r\n\r\nconst PoolPage: React.FC<RouteComponentProps<{ address: string }>> = ({\r\n  match: {\r\n    params: { address: routeAddress },\r\n  },\r\n}) => {\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { t } = useTranslation()\r\n  const [showWeeklyData, setShowWeeklyData] = useState(0)\r\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\r\n    t(`Based on last 7 days' performance. Does not account for impermanent loss`),\r\n    {},\r\n  )\r\n\r\n  // Needed to scroll up if user comes to this page by clicking on entry in the table\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0)\r\n  }, [])\r\n\r\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\r\n  const address = routeAddress.toLowerCase()\r\n\r\n  const poolData = usePoolDatas([address])[0]\r\n  const chartData = usePoolChartData(address)\r\n  const transactions = usePoolTransactions(address)\r\n\r\n  const [watchlistPools, addPoolToWatchlist] = useWatchlistPools()\r\n\r\n  return (\r\n    <Page symbol={poolData ? `${poolData?.token0.symbol} / ${poolData?.token1.symbol}` : null}>\r\n      {poolData ? (\r\n        <>\r\n          <Flex justifyContent=\"space-between\" mb=\"16px\" flexDirection={['column', 'column', 'row']}>\r\n            <Breadcrumbs mb=\"32px\">\r\n              <Link to=\"/info\">\r\n                <Text color=\"primary\">{t('Info')}</Text>\r\n              </Link>\r\n              <Link to=\"/info/farms\">\r\n                <Text color=\"primary\">{t('Farms')}</Text>\r\n              </Link>\r\n              <Flex>\r\n                <Text mr=\"8px\">{`${poolData.token0.symbol} / ${poolData.token1.symbol}`}</Text>\r\n              </Flex>\r\n            </Breadcrumbs>\r\n            <Flex justifyContent={[null, null, 'flex-end']} mt={['8px', '8px', 0]}>\r\n              <LinkExternal mr=\"8px\" href={getExplorerLink(address, 'address')}>\r\n                {t('View on Cronos Explorer')}\r\n              </LinkExternal>\r\n              <SaveIcon fill={watchlistPools.includes(address)} onClick={() => addPoolToWatchlist(address)} />\r\n            </Flex>\r\n          </Flex>\r\n          <Flex flexDirection=\"column\">\r\n            <Flex alignItems=\"center\" mb={['8px', null]}>\r\n              <DoubleCurrencyLogo address0={poolData.token0.address} address1={poolData.token1.address} size={32} />\r\n              <Text\r\n                ml=\"38px\"\r\n                bold\r\n                fontSize={isXs || isSm ? '24px' : '40px'}\r\n                id=\"info-pool-pair-title\"\r\n              >{`${poolData.token0.symbol} / ${poolData.token1.symbol}`}</Text>\r\n            </Flex>\r\n            <Flex justifyContent=\"space-between\" flexDirection={['column', 'column', 'column', 'row']}>\r\n              <Flex flexDirection={['column', 'column', 'row']} mb={['8px', '8px', null]}>\r\n                <Link to={`/info/token/${poolData.token0.address}`}>\r\n                  <TokenButton>\r\n                    <CurrencyLogo address={poolData.token0.address} size=\"24px\" />\r\n                    <Text fontSize=\"16px\" ml=\"4px\" style={{ whiteSpace: 'nowrap' }} width=\"fit-content\">\r\n                      {`1 ${poolData.token0.symbol} =  ${poolData.token0Price.toFixed(7)} ${poolData.token1.symbol}`}\r\n                    </Text>\r\n                  </TokenButton>\r\n                </Link>\r\n                <Link to={`/info/token/${poolData.token1.address}`}>\r\n                  <TokenButton ml={[null, null, '10px']}>\r\n                    <CurrencyLogo address={poolData.token1.address} size=\"24px\" />\r\n                    <Text fontSize=\"16px\" ml=\"4px\" style={{ whiteSpace: 'nowrap' }} width=\"fit-content\">\r\n                      {`1 ${poolData.token1.symbol} =  ${poolData.token1Price.toFixed(7)} ${poolData.token0.symbol}`}\r\n                    </Text>\r\n                  </TokenButton>\r\n                </Link>\r\n              </Flex>\r\n              <Flex>\r\n                <Link to={`/add/${poolData.token0.address}/${poolData.token1.address}`}>\r\n                  <Button mr=\"8px\" variant=\"secondary\">\r\n                    {t('Add Liquidity')}\r\n                  </Button>\r\n                </Link>\r\n                <Link to={`/swap?inputCurrency=${poolData.token0.address}&outputCurrency=${poolData.token1.address}`}>\r\n                  <Button>{t('Trade')}</Button>\r\n                </Link>\r\n              </Flex>\r\n            </Flex>\r\n          </Flex>\r\n          <ContentLayout>\r\n            <Box>\r\n              <Card>\r\n                <Box p=\"24px\">\r\n                  <Flex justifyContent=\"space-between\">\r\n                    <Flex flex=\"1\" flexDirection=\"column\">\r\n                      <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\r\n                        {t('Liquidity')}\r\n                      </Text>\r\n                      <Text fontSize=\"24px\" bold>\r\n                        ${formatAmount(poolData.liquidityUSD)}\r\n                      </Text>\r\n                      <Percent value={poolData.liquidityUSDChange} />\r\n                    </Flex>\r\n                    <Flex flex=\"1\" flexDirection=\"column\">\r\n                      <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\r\n                        {t('LP reward APR')}\r\n                      </Text>\r\n                      <Text fontSize=\"24px\" bold>\r\n                        {formatAmount(poolData.lpApr7d)}%\r\n                      </Text>\r\n                      <Flex alignItems=\"center\">\r\n                        <span ref={targetRef}>\r\n                          <HelpIcon color=\"textSubtle\" />\r\n                        </span>\r\n                        <Text ml=\"4px\" fontSize=\"12px\" color=\"textSubtle\">\r\n                          {t('7D performance')}\r\n                        </Text>\r\n                        {tooltipVisible && tooltip}\r\n                      </Flex>\r\n                    </Flex>\r\n                  </Flex>\r\n                  <Text color=\"secondary\" bold mt=\"24px\" fontSize=\"12px\" textTransform=\"uppercase\">\r\n                    {t('Total Tokens Locked')}\r\n                  </Text>\r\n                  <LockedTokensContainer>\r\n                    <Flex justifyContent=\"space-between\">\r\n                      <Flex>\r\n                        <CurrencyLogo address={poolData.token0.address} size=\"24px\" />\r\n                        <Text small color=\"textSubtle\" ml=\"8px\">\r\n                          {poolData.token0.symbol}\r\n                        </Text>\r\n                      </Flex>\r\n                      <Text small>{formatAmount(poolData.liquidityToken0)}</Text>\r\n                    </Flex>\r\n                    <Flex justifyContent=\"space-between\">\r\n                      <Flex>\r\n                        <CurrencyLogo address={poolData.token1.address} size=\"24px\" />\r\n                        <Text small color=\"textSubtle\" ml=\"8px\">\r\n                          {poolData.token1.symbol}\r\n                        </Text>\r\n                      </Flex>\r\n                      <Text small>{formatAmount(poolData.liquidityToken1)}</Text>\r\n                    </Flex>\r\n                  </LockedTokensContainer>\r\n                </Box>\r\n              </Card>\r\n              <Card mt=\"16px\">\r\n                <Flex flexDirection=\"column\" p=\"24px\">\r\n                  <ButtonMenu\r\n                    activeIndex={showWeeklyData}\r\n                    onItemClick={(index) => setShowWeeklyData(index)}\r\n                    scale=\"sm\"\r\n                    variant=\"subtle\"\r\n                  >\r\n                    <ButtonMenuItem width=\"100%\">{t('24H')}</ButtonMenuItem>\r\n                    <ButtonMenuItem width=\"100%\">{t('7D')}</ButtonMenuItem>\r\n                  </ButtonMenu>\r\n                  <Flex mt=\"24px\">\r\n                    <Flex flex=\"1\" flexDirection=\"column\">\r\n                      <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n                        {showWeeklyData ? t('Volume 7D') : t('Volume 24H')}\r\n                      </Text>\r\n                      <Text fontSize=\"24px\" bold>\r\n                        ${showWeeklyData ? formatAmount(poolData.volumeUSDWeek) : formatAmount(poolData.volumeUSD)}\r\n                      </Text>\r\n                      <Percent value={showWeeklyData ? poolData.volumeUSDChangeWeek : poolData.volumeUSDChange} />\r\n                    </Flex>\r\n                    <Flex flex=\"1\" flexDirection=\"column\">\r\n                      <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n                        {showWeeklyData ? t('LP reward fees 7D') : t('LP reward fees 24H')}\r\n                      </Text>\r\n                      <Text fontSize=\"24px\" bold>\r\n                        ${showWeeklyData ? formatAmount(poolData.lpFees7d) : formatAmount(poolData.lpFees24h)}\r\n                      </Text>\r\n                      <Text color=\"textSubtle\" fontSize=\"12px\">\r\n                        {t('out of $%totalFees% total fees', {\r\n                          totalFees: showWeeklyData\r\n                            ? formatAmount(poolData.totalFees7d)\r\n                            : formatAmount(poolData.totalFees24h),\r\n                        })}\r\n                      </Text>\r\n                    </Flex>\r\n                  </Flex>\r\n                </Flex>\r\n              </Card>\r\n            </Box>\r\n            <ChartCard variant=\"pool\" chartData={chartData} />\r\n          </ContentLayout>\r\n          <Heading mb=\"16px\" mt=\"40px\" scale=\"lg\">\r\n            {t('Transactions')}\r\n          </Heading>\r\n          <TransactionTable transactions={transactions} />\r\n        </>\r\n      ) : (\r\n        <Flex mt=\"80px\" justifyContent=\"center\">\r\n          <Spinner />\r\n        </Flex>\r\n      )}\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default PoolPage\r\n","import React, { useMemo, useRef, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Box, Heading, Grid } from 'uranus-uikit'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAllTokenData } from 'state/info/hooks'\r\nimport { TokenData } from 'state/info/types'\r\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport Percent from 'views/Info/components/Percent'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst CardWrapper = styled(Link)`\r\n  display: inline-block;\r\n  margin-right: 16px;\r\n  min-width: 278.5px;\r\n  height: 104px;\r\n  :hover {\r\n    cursor: pointer;\r\n    opacity: 0.6;\r\n  }\r\n`\r\n\r\nconst TopMoverCard = styled(Box)`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  padding: 16px;\r\n`\r\n\r\nexport const ScrollableRow = styled.div`\r\n  width: 100%;\r\n  overflow-x: auto;\r\n  padding: 16px 0;\r\n  white-space: nowrap;\r\n  ::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst DataCard = ({ tokenData }: { tokenData: TokenData }) => {\r\n  return (\r\n    <CardWrapper to={`/info/token/${tokenData.address}`}>\r\n      <TopMoverCard>\r\n        <Grid>\r\n          <Grid>\r\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n              <Box ml=\"16px\">\r\n                <Text fontSize=\"13px\">{tokenData.symbol}</Text>\r\n                <Text fontSize=\"20px\" mr=\"6px\" lineHeight=\"32px\" bold>\r\n                  ${formatAmount(tokenData.priceUSD)}\r\n                </Text>\r\n              </Box>\r\n              <Flex width=\"44px\" mr=\"16px\">\r\n                {/* wrapped in a box because of alignment issues between img and svg */}\r\n                <CurrencyLogo address={tokenData.address} size=\"44px\" />\r\n              </Flex>\r\n            </Flex>\r\n          </Grid>\r\n          <Grid>\r\n            <Box ml=\"16px\">\r\n              <Percent fontSize=\"14px\" value={tokenData.priceUSDChange} />\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </TopMoverCard>\r\n    </CardWrapper>\r\n  )\r\n}\r\n\r\nconst TopTokenMovers: React.FC = () => {\r\n  const allTokens = useAllTokenData()\r\n  const { t } = useTranslation()\r\n\r\n  const topPriceIncrease = useMemo(() => {\r\n    return Object.values(allTokens)\r\n      .sort(({ data: a }, { data: b }) => {\r\n        // eslint-disable-next-line no-nested-ternary\r\n        return a && b ? (Math.abs(a?.priceUSDChange) > Math.abs(b?.priceUSDChange) ? -1 : 1) : -1\r\n      })\r\n      .slice(0, Math.min(20, Object.values(allTokens).length))\r\n  }, [allTokens])\r\n\r\n  const increaseRef = useRef<HTMLDivElement>(null)\r\n  const moveLeftRef = useRef<boolean>(true)\r\n  // const [pauseAnimation, setPauseAnimation] = useState(false)\r\n  // const [resetInterval, setClearInterval] = useState<() => void | undefined>()\r\n\r\n  useEffect(() => {\r\n    const scrollInterval = setInterval(() => {\r\n      if (increaseRef.current) {\r\n        if (increaseRef.current.scrollLeft === increaseRef.current.scrollWidth - increaseRef.current.clientWidth) {\r\n          moveLeftRef.current = false\r\n        } else if (increaseRef.current.scrollLeft === 0) {\r\n          moveLeftRef.current = true\r\n        }\r\n        increaseRef.current.scrollTo(\r\n          moveLeftRef.current ? increaseRef.current.scrollLeft + 1 : increaseRef.current.scrollLeft - 1,\r\n          0,\r\n        )\r\n      }\r\n    }, 30)\r\n\r\n    return () => {\r\n      clearInterval(scrollInterval)\r\n    }\r\n  }, [])\r\n\r\n  if (topPriceIncrease.length === 0 || !topPriceIncrease.some((entry) => entry.data)) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Heading scale=\"lg\" mb=\"16px\" mt=\"43px\">\r\n        {t('Top Movers')}\r\n      </Heading>\r\n      <ScrollableRow ref={increaseRef}>\r\n        {topPriceIncrease.map((entry) =>\r\n          entry.data ? <DataCard key={`top-card-token-${entry.data?.address}`} tokenData={entry.data} /> : null,\r\n        )}\r\n      </ScrollableRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TopTokenMovers\r\n","import React, { useMemo, useEffect } from 'react'\r\nimport { Text, Heading, Card } from 'uranus-uikit'\r\nimport Page from 'components/Layout/Page'\r\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\r\nimport { useAllTokenData, useTokenDatas } from 'state/info/hooks'\r\nimport { useWatchlistTokens } from 'state/user/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport TopTokenMovers from 'views/Info/components/TopTokenMovers'\r\nimport { WatchlistCard } from '../components/Watchlist'\r\n\r\nconst TokensOverview: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0)\r\n  }, [])\r\n\r\n  const allTokens = useAllTokenData()\r\n\r\n  const formattedTokens = useMemo(() => {\r\n    return Object.values(allTokens)\r\n      .map((token) => token.data)\r\n      .filter((token) => token)\r\n  }, [allTokens])\r\n\r\n  const [savedTokens] = useWatchlistTokens()\r\n  const watchListTokens = useTokenDatas(savedTokens)\r\n\r\n  return (\r\n    <Page>\r\n      <Heading scale=\"lg\" mb=\"16px\">\r\n        {t('Your Watchlist')}\r\n      </Heading>\r\n      {savedTokens.length > 0 ? (\r\n        <TokenTable tokenDatas={watchListTokens} />\r\n      ) : (\r\n        <WatchlistCard justifyContent=\"center\">\r\n          <Text py=\"16px\" px=\"24px\" bold>\r\n            {t('Saved tokens will appear here')}\r\n          </Text>\r\n        </WatchlistCard>\r\n      )}\r\n      <TopTokenMovers />\r\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\" id=\"info-tokens-title\">\r\n        {t('All Tokens')}\r\n      </Heading>\r\n      <TokenTable tokenDatas={formattedTokens} />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default TokensOverview\r\n","import { useState, useEffect } from 'react'\r\n\r\n// endpoint to check asset exists and get url to CMC page\r\n// returns 400 status code if token is not on CMC\r\nconst CMC_ENDPOINT = 'https://3rdparty-apis.coinmarketcap.com/v1/cryptocurrency/contract?address='\r\n\r\n/**\r\n * Check if asset exists on CMC, if exists\r\n * return  url, if not return undefined\r\n * @param address token address (all lowercase, checksummed are not supported by CMC)\r\n */\r\nconst useCMCLink = (address: string): string | undefined => {\r\n  const [cmcPageUrl, setCMCPageUrl] = useState<string | undefined>(undefined)\r\n\r\n  useEffect(() => {\r\n    const fetchLink = async () => {\r\n      const result = await fetch(`${CMC_ENDPOINT}${address}`)\r\n      // if link exists, format the url\r\n      if (result.status === 200) {\r\n        result.json().then(({ data }) => {\r\n          setCMCPageUrl(data.url)\r\n        })\r\n      }\r\n    }\r\n    if (address) {\r\n      fetchLink()\r\n    }\r\n  }, [address])\r\n\r\n  return cmcPageUrl\r\n}\r\n\r\nexport default useCMCLink\r\n","/* eslint-disable no-nested-ternary */\r\nimport React, { useEffect, useMemo } from 'react'\r\nimport { RouteComponentProps, Link } from 'react-router-dom'\r\nimport { Duration } from 'date-fns'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Text,\r\n  Box,\r\n  Heading,\r\n  Button,\r\n  Card,\r\n  Flex,\r\n  Breadcrumbs,\r\n  Link as UIKitLink,\r\n  LinkExternal,\r\n  Image,\r\n  useMatchBreakpoints,\r\n} from 'uranus-uikit'\r\nimport { Spinner } from 'components/Spinner'\r\nimport Page from 'components/Layout/Page'\r\nimport { getExplorerLink } from 'utils'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport useCMCLink from 'views/Info/hooks/useCMCLink'\r\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport Percent from 'views/Info/components/Percent'\r\nimport SaveIcon from 'views/Info/components/SaveIcon'\r\nimport {\r\n  usePoolDatas,\r\n  useTokenData,\r\n  usePoolsForToken,\r\n  useTokenChartData,\r\n  useTokenPriceData,\r\n  useTokenTransactions,\r\n} from 'state/info/hooks'\r\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\r\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\r\nimport { useWatchlistTokens } from 'state/user/hooks'\r\nimport { ONE_HOUR_SECONDS } from 'config/constants/info'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ChartCard from 'views/Info/components/InfoCharts/ChartCard'\r\n\r\nconst ContentLayout = styled.div`\r\n  margin-top: 16px;\r\n  display: grid;\r\n  grid-template-columns: 260px 1fr;\r\n  grid-gap: 1em;\r\n  @media screen and (max-width: 800px) {\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: 1fr 1fr;\r\n  }\r\n`\r\n\r\nconst StyledCMCLink = styled(UIKitLink)`\r\n  width: 24px;\r\n  height: 24px;\r\n  margin-right: 8px;\r\n\r\n  & :hover {\r\n    opacity: 0.8;\r\n  }\r\n`\r\nconst DEFAULT_TIME_WINDOW: Duration = { weeks: 1 }\r\n\r\nconst TokenPage: React.FC<RouteComponentProps<{ address: string }>> = ({\r\n  match: {\r\n    params: { address: routeAddress },\r\n  },\r\n}) => {\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { t } = useTranslation()\r\n\r\n  // Needed to scroll up if user comes to this page by clicking on entry in the table\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0)\r\n  }, [])\r\n\r\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\r\n  const address = routeAddress.toLowerCase()\r\n\r\n  const cmcLink = useCMCLink(address)\r\n\r\n  const tokenData = useTokenData(address)\r\n  const poolsForToken = usePoolsForToken(address)\r\n  const poolDatas = usePoolDatas(poolsForToken ?? [])\r\n  const transactions = useTokenTransactions(address)\r\n  const chartData = useTokenChartData(address)\r\n\r\n  // pricing data\r\n  const priceData = useTokenPriceData(address, ONE_HOUR_SECONDS, DEFAULT_TIME_WINDOW)\r\n  const adjustedPriceData = useMemo(() => {\r\n    // Include latest available price\r\n    if (priceData && tokenData && priceData.length > 0) {\r\n      return [\r\n        ...priceData,\r\n        {\r\n          time: new Date().getTime() / 1000,\r\n          open: priceData[priceData.length - 1].close,\r\n          close: tokenData?.priceUSD,\r\n          high: tokenData?.priceUSD,\r\n          low: priceData[priceData.length - 1].close,\r\n        },\r\n      ]\r\n    }\r\n    return undefined\r\n  }, [priceData, tokenData])\r\n\r\n  const [watchlistTokens, addWatchlistToken] = useWatchlistTokens()\r\n\r\n  return (\r\n    <Page symbol={tokenData?.symbol}>\r\n      {tokenData ? (\r\n        !tokenData.exists ? (\r\n          <Card>\r\n            <Box p=\"16px\">\r\n              <Text>\r\n                {t('No pool has been created with this token yet. Create one')}\r\n                <Link style={{ display: 'inline', marginLeft: '6px' }} to={`/add/${address}`}>\r\n                  {t('here.')}\r\n                </Link>\r\n              </Text>\r\n            </Box>\r\n          </Card>\r\n        ) : (\r\n          <>\r\n            {/* Stuff on top */}\r\n            <Flex justifyContent=\"space-between\" mb=\"24px\" flexDirection={['column', 'column', 'row']}>\r\n              <Breadcrumbs mb=\"32px\">\r\n                <Link to=\"/info\">\r\n                  <Text color=\"primary\">{t('Info')}</Text>\r\n                </Link>\r\n                <Link to=\"/info/tokens\">\r\n                  <Text color=\"primary\">{t('Tokens')}</Text>\r\n                </Link>\r\n                <Flex>\r\n                  <Text mr=\"8px\">{tokenData.symbol}</Text>\r\n                  <Text>{`(${truncateHash(address)})`}</Text>\r\n                </Flex>\r\n              </Breadcrumbs>\r\n              <Flex justifyContent={[null, null, 'flex-end']} mt={['8px', '8px', 0]}>\r\n                <LinkExternal mr=\"8px\" color=\"primary\" href={getExplorerLink(address, 'address')}>\r\n                  {t('View on Cronos Explorer')}\r\n                </LinkExternal>\r\n                {cmcLink && (\r\n                  <StyledCMCLink href={cmcLink} rel=\"noopener noreferrer nofollow\" target=\"_blank\">\r\n                    <Image src=\"/images/CMC-logo.svg\" height={22} width={22} alt={t('View token on CoinMarketCap')} />\r\n                  </StyledCMCLink>\r\n                )}\r\n                <SaveIcon fill={watchlistTokens.includes(address)} onClick={() => addWatchlistToken(address)} />\r\n              </Flex>\r\n            </Flex>\r\n            <Flex justifyContent=\"space-between\" flexDirection={['column', 'column', 'column', 'row']}>\r\n              <Flex flexDirection=\"column\" mb={['8px', null]}>\r\n                <Flex alignItems=\"center\">\r\n                  <CurrencyLogo size=\"32px\" address={address} />\r\n                  <Text\r\n                    ml=\"12px\"\r\n                    bold\r\n                    lineHeight=\"0.7\"\r\n                    fontSize={isXs || isSm ? '24px' : '40px'}\r\n                    id=\"info-token-name-title\"\r\n                  >\r\n                    {tokenData.name}\r\n                  </Text>\r\n                  <Text ml=\"12px\" lineHeight=\"1\" color=\"textSubtle\" fontSize={isXs || isSm ? '14px' : '20px'}>\r\n                    ({tokenData.symbol})\r\n                  </Text>\r\n                </Flex>\r\n                <Flex mt=\"8px\" ml=\"46px\" alignItems=\"center\">\r\n                  <Text mr=\"16px\" bold fontSize=\"24px\">\r\n                    ${formatAmount(tokenData.priceUSD, { notation: 'standard' })}\r\n                  </Text>\r\n                  <Percent value={tokenData.priceUSDChange} fontWeight={600} />\r\n                </Flex>\r\n              </Flex>\r\n              <Flex>\r\n                <Link to={`/add/${address}`}>\r\n                  <Button mr=\"8px\" variant=\"secondary\">\r\n                    {t('Add Liquidity')}\r\n                  </Button>\r\n                </Link>\r\n                <Link to={`/swap?inputCurrency=${address}`}>\r\n                  <Button>{t('Trade')}</Button>\r\n                </Link>\r\n              </Flex>\r\n            </Flex>\r\n\r\n            {/* data on the right side of chart */}\r\n            <ContentLayout>\r\n              <Card>\r\n                <Box p=\"24px\">\r\n                  <Text bold small color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\r\n                    {t('Liquidity')}\r\n                  </Text>\r\n                  <Text bold fontSize=\"24px\">\r\n                    ${formatAmount(tokenData.liquidityUSD)}\r\n                  </Text>\r\n                  <Percent value={tokenData.liquidityUSDChange} />\r\n\r\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\r\n                    {t('Volume 24H')}\r\n                  </Text>\r\n                  <Text bold fontSize=\"24px\" textTransform=\"uppercase\">\r\n                    ${formatAmount(tokenData.volumeUSD)}\r\n                  </Text>\r\n                  <Percent value={tokenData.volumeUSDChange} />\r\n\r\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\r\n                    {t('Volume 7D')}\r\n                  </Text>\r\n                  <Text bold fontSize=\"24px\">\r\n                    ${formatAmount(tokenData.volumeUSDWeek)}\r\n                  </Text>\r\n\r\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\r\n                    {t('Transactions 24H')}\r\n                  </Text>\r\n                  <Text bold fontSize=\"24px\">\r\n                    {formatAmount(tokenData.txCount, { isInteger: true })}\r\n                  </Text>\r\n                </Box>\r\n              </Card>\r\n              {/* charts card */}\r\n              <ChartCard\r\n                variant=\"token\"\r\n                chartData={chartData}\r\n                tokenData={tokenData}\r\n                tokenPriceData={adjustedPriceData}\r\n              />\r\n            </ContentLayout>\r\n\r\n            {/* pools and transaction tables */}\r\n            <Heading scale=\"lg\" mb=\"16px\" mt=\"40px\">\r\n              Farms\r\n            </Heading>\r\n\r\n            <PoolTable poolDatas={poolDatas} />\r\n\r\n            <Heading scale=\"lg\" mb=\"16px\" mt=\"40px\">\r\n              {t('Transactions')}\r\n            </Heading>\r\n\r\n            <TransactionTable transactions={transactions} />\r\n          </>\r\n        )\r\n      ) : (\r\n        <Flex mt=\"80px\" justifyContent=\"center\">\r\n          <Spinner />\r\n        </Flex>\r\n      )}\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default TokenPage\r\n","import React from 'react'\r\nimport { Redirect, RouteComponentProps } from 'react-router-dom'\r\nimport { isAddress } from 'ethers/lib/utils'\r\nimport TokenPage from './TokenPage'\r\n\r\nconst RedirectInvalidToken = (props: RouteComponentProps<{ address: string }>) => {\r\n  const {\r\n    match: {\r\n      params: { address },\r\n    },\r\n  } = props\r\n\r\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\r\n  if (!isAddress(address.toLowerCase())) {\r\n    return <Redirect to=\"/\" />\r\n  }\r\n  return <TokenPage {...props} />\r\n}\r\n\r\nexport default RedirectInvalidToken\r\n","import React from 'react'\r\nimport { Route } from 'react-router-dom'\r\nimport { PoolUpdater, ProtocolUpdater, TokenUpdater } from 'state/info/updaters'\r\nimport Toolbar from 'components/Toolbar'\r\nimport InfoNav from './components/InfoNav'\r\nimport Overview from './Overview'\r\nimport Pools from './Pools'\r\nimport PoolPage from './Pools/PoolPage'\r\nimport Tokens from './Tokens'\r\nimport RedirectInvalidToken from './Tokens/redirects'\r\n\r\nconst Info: React.FC = () => {\r\n  return (\r\n    <div style={{ marginLeft: '250px' }}>\r\n      <Toolbar />\r\n      <ProtocolUpdater />\r\n      <PoolUpdater />\r\n      <TokenUpdater />\r\n      <InfoNav />\r\n      <Route path=\"/info\" exact>\r\n        <Overview />\r\n      </Route>\r\n      <Route path=\"/info/farms\" exact>\r\n        <Pools />\r\n      </Route>\r\n      <Route path=\"/info/tokens\" exact>\r\n        <Tokens />\r\n      </Route>\r\n      <Route exact path={['/info/tokens/:address', '/info/token/:address']} component={RedirectInvalidToken} />\r\n      <Route exact path={['/info/farms/:address', '/info/farm/:address', '/info/pair/:address']} component={PoolPage} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Info\r\n"],"sourceRoot":""}