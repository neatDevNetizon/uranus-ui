{"version":3,"sources":["components/Links/index.tsx","views/PoolFinder/index.tsx"],"names":["StyledInternalLink","styled","Link","theme","colors","primary","Fields","StyledButton","Button","text","PoolFinder","account","useActiveWeb3React","t","useTranslation","useState","TOKEN1","activeField","setActiveField","ETHER","currency0","setCurrency0","currency1","setCurrency1","usePair","undefined","pairState","pair","addPair","usePairAdder","useEffect","validPairNoLiquidity","PairState","NOT_EXISTS","Boolean","EXISTS","JSBI","equal","reserve0","raw","BigInt","reserve1","position","useTokenBalance","liquidityToken","hasPosition","greaterThan","handleCurrencySelect","useCallback","currency","TOKEN0","prerequisiteMessage","padding","textAlign","useModal","onCurrencySelect","showCommonBases","selectedCurrency","onPresentCurrencyModal","title","subtitle","backTo","style","gap","endIcon","onClick","ml","symbol","as","Row","justifyItems","backgroundColor","borderRadius","to","justify","currencyId","textDecorationLine","color","INVALID","fontWeight","LOADING"],"mappings":"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","file":"static/js/5.f956fa4c.chunk.js","sourcesContent":["import { Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\n\r\n// An internal link from the react-router-dom library that is correctly styled\r\nconst StyledInternalLink = styled(Link)`\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  font-weight: 500;\r\n\r\n  :hover {\r\n    text-decoration: underline;\r\n  }\r\n\r\n  :focus {\r\n    outline: none;\r\n    text-decoration: underline;\r\n  }\r\n\r\n  :active {\r\n    text-decoration: none;\r\n  }\r\n`\r\n\r\nexport default StyledInternalLink\r\n","import React, { useCallback, useEffect, useState } from 'react'\r\nimport { Currency, ETHER, JSBI, TokenAmount } from 'uranus-swap-sdk'\r\nimport { Button, ChevronDownIcon, Text, AddIcon, useModal, Flex } from 'uranus-uikit'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LightCard } from '../../components/Card'\r\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\r\nimport { CurrencyLogo } from '../../components/Logo'\r\nimport { MinimalPositionCard } from '../../components/PositionCard'\r\nimport Row from '../../components/Layout/Row'\r\nimport CurrencySearchModal from '../../components/SearchModal/CurrencySearchModal'\r\nimport { PairState, usePair } from '../../hooks/usePairs'\r\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\r\nimport { usePairAdder } from '../../state/user/hooks'\r\nimport { useTokenBalance } from '../../state/wallet/hooks'\r\nimport StyledInternalLink from '../../components/Links'\r\nimport { currencyId } from '../../utils/currencyId'\r\nimport Dots from '../../components/Loader/Dots'\r\nimport { AppHeader, AppBody } from '../../components/App'\r\nimport Page from '../Page'\r\n\r\nenum Fields {\r\n  TOKEN0 = 0,\r\n  TOKEN1 = 1,\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  background-color: ${({ theme }) => theme.colors.primary};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  box-shadow: none;\r\n  border-radius: 8px;\r\n`\r\n\r\nexport default function PoolFinder() {\r\n  const { account } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n\r\n  const [activeField, setActiveField] = useState<number>(Fields.TOKEN1)\r\n  const [currency0, setCurrency0] = useState<Currency | null>(ETHER)\r\n  const [currency1, setCurrency1] = useState<Currency | null>(null)\r\n\r\n  const [pairState, pair] = usePair(currency0 ?? undefined, currency1 ?? undefined)\r\n  const addPair = usePairAdder()\r\n  useEffect(() => {\r\n    if (pair) {\r\n      addPair(pair)\r\n    }\r\n  }, [pair, addPair])\r\n\r\n  const validPairNoLiquidity: boolean =\r\n    pairState === PairState.NOT_EXISTS ||\r\n    Boolean(\r\n      pairState === PairState.EXISTS &&\r\n        pair &&\r\n        JSBI.equal(pair.reserve0.raw, JSBI.BigInt(0)) &&\r\n        JSBI.equal(pair.reserve1.raw, JSBI.BigInt(0)),\r\n    )\r\n\r\n  const position: TokenAmount | undefined = useTokenBalance(account ?? undefined, pair?.liquidityToken)\r\n  const hasPosition = Boolean(position && JSBI.greaterThan(position.raw, JSBI.BigInt(0)))\r\n\r\n  const handleCurrencySelect = useCallback(\r\n    (currency: Currency) => {\r\n      if (activeField === Fields.TOKEN0) {\r\n        setCurrency0(currency)\r\n      } else {\r\n        setCurrency1(currency)\r\n      }\r\n    },\r\n    [activeField],\r\n  )\r\n\r\n  const prerequisiteMessage = (\r\n    <LightCard padding=\"45px 10px\">\r\n      <Text textAlign=\"center\">\r\n        {!account ? t('Connect to a wallet to find pools') : t('Select a token to find your liquidity.')}\r\n      </Text>\r\n    </LightCard>\r\n  )\r\n\r\n  const [onPresentCurrencyModal] = useModal(\r\n    <CurrencySearchModal\r\n      onCurrencySelect={handleCurrencySelect}\r\n      showCommonBases\r\n      selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\r\n    />,\r\n    true,\r\n    true,\r\n    'selectCurrencyModal',\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <AppBody>\r\n        <AppHeader title={t('Import Pool')} subtitle={t('Import an existing pool')} backTo=\"/pool\" />\r\n        <AutoColumn style={{ padding: '1rem' }} gap=\"md\">\r\n          <StyledButton\r\n            endIcon={<ChevronDownIcon />}\r\n            onClick={() => {\r\n              onPresentCurrencyModal()\r\n              setActiveField(Fields.TOKEN0)\r\n            }}\r\n          >\r\n            {currency0 ? (\r\n              <Row>\r\n                <CurrencyLogo currency={currency0} />\r\n                <Text ml=\"8px\">{currency0.symbol}</Text>\r\n              </Row>\r\n            ) : (\r\n              <Text ml=\"8px\">{t('Select a token')}</Text>\r\n            )}\r\n          </StyledButton>\r\n\r\n          <ColumnCenter>\r\n            <AddIcon />\r\n          </ColumnCenter>\r\n\r\n          <StyledButton\r\n            endIcon={<ChevronDownIcon />}\r\n            onClick={() => {\r\n              onPresentCurrencyModal()\r\n              setActiveField(Fields.TOKEN1)\r\n            }}\r\n          >\r\n            {currency1 ? (\r\n              <Row>\r\n                <CurrencyLogo currency={currency1} />\r\n                <Text ml=\"8px\">{currency1.symbol}</Text>\r\n              </Row>\r\n            ) : (\r\n              <Text as={Row}>{t('Select a token')}</Text>\r\n            )}\r\n          </StyledButton>\r\n\r\n          {hasPosition && (\r\n            <ColumnCenter\r\n              style={{ justifyItems: 'center', backgroundColor: '', padding: '12px 0px', borderRadius: '12px' }}\r\n            >\r\n              <Text textAlign=\"center\">{t('Pool Found!')}</Text>\r\n              <StyledInternalLink to=\"/pool\">\r\n                <Text textAlign=\"center\">{t('Manage this pool.')}</Text>\r\n              </StyledInternalLink>\r\n            </ColumnCenter>\r\n          )}\r\n\r\n          {currency0 && currency1 ? (\r\n            pairState === PairState.EXISTS ? (\r\n              hasPosition && pair ? (\r\n                <MinimalPositionCard pair={pair} />\r\n              ) : (\r\n                <LightCard padding=\"45px 10px\">\r\n                  <AutoColumn gap=\"sm\" justify=\"center\">\r\n                    <Text textAlign=\"center\">{t('You don’t have liquidity in this pool yet.')}</Text>\r\n                    <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\r\n                      <Text textAlign=\"center\" style={{textDecorationLine: 'underline'}} color=\"textSubtle\">{t('Add Liquidity')}</Text>\r\n                    </StyledInternalLink>\r\n                  </AutoColumn>\r\n                </LightCard>\r\n              )\r\n            ) : validPairNoLiquidity ? (\r\n              <LightCard padding=\"45px 10px\">\r\n                <AutoColumn gap=\"sm\" justify=\"center\">\r\n                  <Text textAlign=\"center\">{t('No pool found.')}</Text>\r\n                  <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\r\n                    <Text color=\"textSubtle\" style={{textDecorationLine: 'underline'}}>{t('Create pool.')}</Text>\r\n                  </StyledInternalLink>\r\n                </AutoColumn>\r\n              </LightCard>\r\n            ) : pairState === PairState.INVALID ? (\r\n              <LightCard padding=\"45px 10px\">\r\n                <AutoColumn gap=\"sm\" justify=\"center\">\r\n                  <Text textAlign=\"center\" fontWeight={500}>\r\n                    {t('Invalid pair.')}\r\n                  </Text>\r\n                </AutoColumn>\r\n              </LightCard>\r\n            ) : pairState === PairState.LOADING ? (\r\n              <LightCard padding=\"45px 10px\">\r\n                <AutoColumn gap=\"sm\" justify=\"center\">\r\n                  <Text textAlign=\"center\">\r\n                    {t('Loading')}\r\n                    <Dots />\r\n                  </Text>\r\n                </AutoColumn>\r\n              </LightCard>\r\n            ) : null\r\n          ) : (\r\n            prerequisiteMessage\r\n          )}\r\n        </AutoColumn>\r\n\r\n        {/* <CurrencySearchModal\r\n          isOpen={showSearch}\r\n          onCurrencySelect={handleCurrencySelect}\r\n          onDismiss={handleSearchDismiss}\r\n          showCommonBases\r\n          selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\r\n        /> */}\r\n      </AppBody>\r\n    </Page>\r\n  )\r\n}\r\n"],"sourceRoot":""}